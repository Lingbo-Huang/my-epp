// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: contrib/envoy/extensions/matching/input_matchers/hyperscan/v3alpha/hyperscan.proto

package v3alpha

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// `Hyperscan <https://github.com/intel/hyperscan>`_ regex matcher. The matcher uses the Hyperscan
// engine which exploits x86 SIMD instructions to accelerate matching large numbers of regular
// expressions simultaneously across streams of data.
type Hyperscan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies a set of regex expressions that the input should match on.
	Regexes       []*Hyperscan_Regex `protobuf:"bytes,1,rep,name=regexes,proto3" json:"regexes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hyperscan) Reset() {
	*x = Hyperscan{}
	mi := &file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hyperscan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hyperscan) ProtoMessage() {}

func (x *Hyperscan) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hyperscan.ProtoReflect.Descriptor instead.
func (*Hyperscan) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescGZIP(), []int{0}
}

func (x *Hyperscan) GetRegexes() []*Hyperscan_Regex {
	if x != nil {
		return x.Regexes
	}
	return nil
}

// [#next-free-field: 11]
type Hyperscan_Regex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The regex expression.
	//
	// The expression must represent only the pattern to be matched, with no delimiters or flags.
	Regex string `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
	// The ID of the regex expression.
	//
	// This option is designed to be used on the sub-expressions in logical combinations.
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Matching will be performed case-insensitively.
	//
	// The expression may still use PCRE tokens (notably “(?i)“ and “(?-i)“) to switch
	// case-insensitive matching on and off.
	Caseless bool `protobuf:"varint,3,opt,name=caseless,proto3" json:"caseless,omitempty"`
	// Matching a “.“ will not exclude newlines.
	DotAll bool `protobuf:"varint,4,opt,name=dot_all,json=dotAll,proto3" json:"dot_all,omitempty"`
	// “^“ and “$“ anchors match any newlines in data.
	Multiline bool `protobuf:"varint,5,opt,name=multiline,proto3" json:"multiline,omitempty"`
	// Allow expressions which can match against an empty string.
	//
	// This option instructs the compiler to allow expressions that can match against empty buffers,
	// such as “.?“, “.*“, “(a|)“. Since Hyperscan can return every possible match for an expression,
	// such expressions generally execute very slowly.
	AllowEmpty bool `protobuf:"varint,6,opt,name=allow_empty,json=allowEmpty,proto3" json:"allow_empty,omitempty"`
	// Treat the pattern as a sequence of UTF-8 characters.
	Utf8 bool `protobuf:"varint,7,opt,name=utf8,proto3" json:"utf8,omitempty"`
	// Use Unicode properties for character classes.
	//
	// This option instructs Hyperscan to use Unicode properties, rather than the default ASCII
	// interpretations, for character mnemonics like “\w“ and “\s“ as well as the POSIX character
	// classes. It is only meaningful in conjunction with “utf8“.
	Ucp bool `protobuf:"varint,8,opt,name=ucp,proto3" json:"ucp,omitempty"`
	// Logical combination.
	//
	// This option instructs Hyperscan to parse this expression as logical combination syntax.
	// Logical constraints consist of operands, operators and parentheses. The operands are
	// expression indices, and operators can be “!“, “&“ or “|“.
	Combination bool `protobuf:"varint,9,opt,name=combination,proto3" json:"combination,omitempty"`
	// Don’t do any match reporting.
	//
	// This option instructs Hyperscan to ignore match reporting for this expression. It is
	// designed to be used on the sub-expressions in logical combinations.
	Quiet         bool `protobuf:"varint,10,opt,name=quiet,proto3" json:"quiet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hyperscan_Regex) Reset() {
	*x = Hyperscan_Regex{}
	mi := &file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hyperscan_Regex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hyperscan_Regex) ProtoMessage() {}

func (x *Hyperscan_Regex) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hyperscan_Regex.ProtoReflect.Descriptor instead.
func (*Hyperscan_Regex) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Hyperscan_Regex) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *Hyperscan_Regex) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Hyperscan_Regex) GetCaseless() bool {
	if x != nil {
		return x.Caseless
	}
	return false
}

func (x *Hyperscan_Regex) GetDotAll() bool {
	if x != nil {
		return x.DotAll
	}
	return false
}

func (x *Hyperscan_Regex) GetMultiline() bool {
	if x != nil {
		return x.Multiline
	}
	return false
}

func (x *Hyperscan_Regex) GetAllowEmpty() bool {
	if x != nil {
		return x.AllowEmpty
	}
	return false
}

func (x *Hyperscan_Regex) GetUtf8() bool {
	if x != nil {
		return x.Utf8
	}
	return false
}

func (x *Hyperscan_Regex) GetUcp() bool {
	if x != nil {
		return x.Ucp
	}
	return false
}

func (x *Hyperscan_Regex) GetCombination() bool {
	if x != nil {
		return x.Combination
	}
	return false
}

func (x *Hyperscan_Regex) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

var File_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto protoreflect.FileDescriptor

const file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDesc = "" +
	"\n" +
	"Rcontrib/envoy/extensions/matching/input_matchers/hyperscan/v3alpha/hyperscan.proto\x12:envoy.extensions.matching.input_matchers.hyperscan.v3alpha\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\x87\x03\n" +
	"\tHyperscan\x12o\n" +
	"\aregexes\x18\x01 \x03(\v2K.envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.RegexB\b\xfaB\x05\x92\x01\x02\b\x01R\aregexes\x1a\x88\x02\n" +
	"\x05Regex\x12\x1d\n" +
	"\x05regex\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05regex\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\rR\x02id\x12\x1a\n" +
	"\bcaseless\x18\x03 \x01(\bR\bcaseless\x12\x17\n" +
	"\adot_all\x18\x04 \x01(\bR\x06dotAll\x12\x1c\n" +
	"\tmultiline\x18\x05 \x01(\bR\tmultiline\x12\x1f\n" +
	"\vallow_empty\x18\x06 \x01(\bR\n" +
	"allowEmpty\x12\x12\n" +
	"\x04utf8\x18\a \x01(\bR\x04utf8\x12\x10\n" +
	"\x03ucp\x18\b \x01(\bR\x03ucp\x12 \n" +
	"\vcombination\x18\t \x01(\bR\vcombination\x12\x14\n" +
	"\x05quiet\x18\n" +
	" \x01(\bR\x05quietB\xcf\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"Hio.envoyproxy.envoy.extensions.matching.input_matchers.hyperscan.v3alphaB\x0eHyperscanProtoP\x01Zigithub.com/envoyproxy/go-control-plane/contrib/envoy/extensions/matching/input_matchers/hyperscan/v3alphab\x06proto3"

var (
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescData []byte
)

func file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDesc), len(file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDesc)))
	})
	return file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDescData
}

var file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_goTypes = []any{
	(*Hyperscan)(nil),       // 0: envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan
	(*Hyperscan_Regex)(nil), // 1: envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex
}
var file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.regexes:type_name -> envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() {
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_init()
}
func file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_init() {
	if File_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDesc), len(file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_depIdxs,
		MessageInfos:      file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto = out.File
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_goTypes = nil
	file_contrib_envoy_extensions_matching_input_matchers_hyperscan_v3alpha_hyperscan_proto_depIdxs = nil
}
