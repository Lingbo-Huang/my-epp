// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: contrib/envoy/extensions/filters/network/sip_proxy/v3alpha/route.proto

package v3alpha

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RouteConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the route configuration. Reserved for future use in asynchronous route discovery.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of routes that will be matched, in order, against incoming requests. The first route
	// that matches will be used.
	Routes        []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteConfiguration) Reset() {
	*x = RouteConfiguration{}
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfiguration) ProtoMessage() {}

func (x *RouteConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfiguration.ProtoReflect.Descriptor instead.
func (*RouteConfiguration) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescGZIP(), []int{0}
}

func (x *RouteConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfiguration) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Route struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Route matching parameters.
	Match *RouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Route request to some upstream cluster.
	Route         *RouteAction `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetMatch() *RouteMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Route) GetRoute() *RouteAction {
	if x != nil {
		return x.Route
	}
	return nil
}

type RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MatchSpecifier:
	//
	//	*RouteMatch_Domain
	MatchSpecifier isRouteMatch_MatchSpecifier `protobuf_oneof:"match_specifier"`
	// The header to get match parameter, default is "Route".
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// The parameter to get domain, default is "host".
	Parameter     string `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescGZIP(), []int{2}
}

func (x *RouteMatch) GetMatchSpecifier() isRouteMatch_MatchSpecifier {
	if x != nil {
		return x.MatchSpecifier
	}
	return nil
}

func (x *RouteMatch) GetDomain() string {
	if x != nil {
		if x, ok := x.MatchSpecifier.(*RouteMatch_Domain); ok {
			return x.Domain
		}
	}
	return ""
}

func (x *RouteMatch) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *RouteMatch) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

type isRouteMatch_MatchSpecifier interface {
	isRouteMatch_MatchSpecifier()
}

type RouteMatch_Domain struct {
	// The domain from Request URI or Route Header.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3,oneof"`
}

func (*RouteMatch_Domain) isRouteMatch_MatchSpecifier() {}

type RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ClusterSpecifier:
	//
	//	*RouteAction_Cluster
	ClusterSpecifier isRouteAction_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteAction) Reset() {
	*x = RouteAction{}
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAction) ProtoMessage() {}

func (x *RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAction.ProtoReflect.Descriptor instead.
func (*RouteAction) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescGZIP(), []int{3}
}

func (x *RouteAction) GetClusterSpecifier() isRouteAction_ClusterSpecifier {
	if x != nil {
		return x.ClusterSpecifier
	}
	return nil
}

func (x *RouteAction) GetCluster() string {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_Cluster); ok {
			return x.Cluster
		}
	}
	return ""
}

type isRouteAction_ClusterSpecifier interface {
	isRouteAction_ClusterSpecifier()
}

type RouteAction_Cluster struct {
	// Indicates a single upstream cluster to which the request should be routed
	// to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3,oneof"`
}

func (*RouteAction_Cluster) isRouteAction_ClusterSpecifier() {}

var File_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto protoreflect.FileDescriptor

const file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDesc = "" +
	"\n" +
	"Fcontrib/envoy/extensions/filters/network/sip_proxy/v3alpha/route.proto\x122envoy.extensions.filters.network.sip_proxy.v3alpha\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"{\n" +
	"\x12RouteConfiguration\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12Q\n" +
	"\x06routes\x18\x02 \x03(\v29.envoy.extensions.filters.network.sip_proxy.v3alpha.RouteR\x06routes\"\xc8\x01\n" +
	"\x05Route\x12^\n" +
	"\x05match\x18\x01 \x01(\v2>.envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatchB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05match\x12_\n" +
	"\x05route\x18\x02 \x01(\v2?.envoy.extensions.filters.network.sip_proxy.v3alpha.RouteActionB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05route\"t\n" +
	"\n" +
	"RouteMatch\x12\x18\n" +
	"\x06domain\x18\x01 \x01(\tH\x00R\x06domain\x12\x16\n" +
	"\x06header\x18\x02 \x01(\tR\x06header\x12\x1c\n" +
	"\tparameter\x18\x03 \x01(\tR\tparameterB\x16\n" +
	"\x0fmatch_specifier\x12\x03\xf8B\x01\"L\n" +
	"\vRouteAction\x12#\n" +
	"\acluster\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\aclusterB\x18\n" +
	"\x11cluster_specifier\x12\x03\xf8B\x01B\xbb\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"@io.envoyproxy.envoy.extensions.filters.network.sip_proxy.v3alphaB\n" +
	"RouteProtoP\x01Zagithub.com/envoyproxy/go-control-plane/contrib/envoy/extensions/filters/network/sip_proxy/v3alphab\x06proto3"

var (
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescData []byte
)

func file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDesc), len(file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDesc)))
	})
	return file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDescData
}

var file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_goTypes = []any{
	(*RouteConfiguration)(nil), // 0: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration
	(*Route)(nil),              // 1: envoy.extensions.filters.network.sip_proxy.v3alpha.Route
	(*RouteMatch)(nil),         // 2: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch
	(*RouteAction)(nil),        // 3: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction
}
var file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.filters.network.sip_proxy.v3alpha.RouteConfiguration.routes:type_name -> envoy.extensions.filters.network.sip_proxy.v3alpha.Route
	2, // 1: envoy.extensions.filters.network.sip_proxy.v3alpha.Route.match:type_name -> envoy.extensions.filters.network.sip_proxy.v3alpha.RouteMatch
	3, // 2: envoy.extensions.filters.network.sip_proxy.v3alpha.Route.route:type_name -> envoy.extensions.filters.network.sip_proxy.v3alpha.RouteAction
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_init() }
func file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_init() {
	if File_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto != nil {
		return
	}
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[2].OneofWrappers = []any{
		(*RouteMatch_Domain)(nil),
	}
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes[3].OneofWrappers = []any{
		(*RouteAction_Cluster)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDesc), len(file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_depIdxs,
		MessageInfos:      file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto = out.File
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_goTypes = nil
	file_contrib_envoy_extensions_filters_network_sip_proxy_v3alpha_route_proto_depIdxs = nil
}
