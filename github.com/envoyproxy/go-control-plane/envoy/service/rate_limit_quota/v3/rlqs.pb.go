// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/service/rate_limit_quota/v3/rlqs.proto

package rate_limit_quotav3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateLimitQuotaUsageReports struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All quota requests must specify the domain. This enables sharing the quota
	// server between different applications without fear of overlap.
	// E.g., "envoy".
	//
	// Should only be provided in the first report, all subsequent messages on the same
	// stream are considered to be in the same domain. In case the domain needs to be
	// changes, close the stream, and reopen a new one with the different domain.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A list of quota usage reports. The list is processed by the RLQS server in the same order
	// it's provided by the client.
	BucketQuotaUsages []*RateLimitQuotaUsageReports_BucketQuotaUsage `protobuf:"bytes,2,rep,name=bucket_quota_usages,json=bucketQuotaUsages,proto3" json:"bucket_quota_usages,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RateLimitQuotaUsageReports) Reset() {
	*x = RateLimitQuotaUsageReports{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaUsageReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaUsageReports) ProtoMessage() {}

func (x *RateLimitQuotaUsageReports) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaUsageReports.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaUsageReports) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimitQuotaUsageReports) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RateLimitQuotaUsageReports) GetBucketQuotaUsages() []*RateLimitQuotaUsageReports_BucketQuotaUsage {
	if x != nil {
		return x.BucketQuotaUsages
	}
	return nil
}

type RateLimitQuotaResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An ordered list of actions to be applied to the buckets. The actions are applied in the
	// given order, from top to bottom.
	BucketAction  []*RateLimitQuotaResponse_BucketAction `protobuf:"bytes,1,rep,name=bucket_action,json=bucketAction,proto3" json:"bucket_action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitQuotaResponse) Reset() {
	*x = RateLimitQuotaResponse{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse) ProtoMessage() {}

func (x *RateLimitQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1}
}

func (x *RateLimitQuotaResponse) GetBucketAction() []*RateLimitQuotaResponse_BucketAction {
	if x != nil {
		return x.BucketAction
	}
	return nil
}

// The identifier for the bucket. Used to match the bucket between the control plane (RLQS server),
// and the data plane (RLQS client), f.e.:
//
//   - the data plane sends a usage report for requests matched into the bucket with “BucketId“
//     to the control plane
//   - the control plane sends an assignment for the bucket with “BucketId“ to the data plane
//     Bucket ID.
//
// Example:
//
// .. validated-code-block:: yaml
//
//	:type-name: envoy.service.rate_limit_quota.v3.BucketId
//
//	bucket:
//	  name: my_bucket
//	  env: staging
//
// .. note::
//
//	The order of ``BucketId`` keys do not matter. Buckets ``{ a: 'A', b: 'B' }`` and
//	``{ b: 'B', a: 'A' }`` are identical.
type BucketId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bucket        map[string]string      `protobuf:"bytes,1,rep,name=bucket,proto3" json:"bucket,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BucketId) Reset() {
	*x = BucketId{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BucketId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketId) ProtoMessage() {}

func (x *BucketId) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketId.ProtoReflect.Descriptor instead.
func (*BucketId) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{2}
}

func (x *BucketId) GetBucket() map[string]string {
	if x != nil {
		return x.Bucket
	}
	return nil
}

// The usage report for a bucket.
//
// .. note::
//
//	Note that the first report sent for a ``BucketId`` indicates to the RLQS server that
//	the RLQS client is subscribing for the future assignments for this ``BucketId``.
type RateLimitQuotaUsageReports_BucketQuotaUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// “BucketId“ for which request quota usage is reported.
	BucketId *BucketId `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Time elapsed since the last report.
	TimeElapsed *durationpb.Duration `protobuf:"bytes,2,opt,name=time_elapsed,json=timeElapsed,proto3" json:"time_elapsed,omitempty"`
	// Requests the data plane has allowed through.
	NumRequestsAllowed uint64 `protobuf:"varint,3,opt,name=num_requests_allowed,json=numRequestsAllowed,proto3" json:"num_requests_allowed,omitempty"`
	// Requests throttled.
	NumRequestsDenied uint64 `protobuf:"varint,4,opt,name=num_requests_denied,json=numRequestsDenied,proto3" json:"num_requests_denied,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) Reset() {
	*x = RateLimitQuotaUsageReports_BucketQuotaUsage{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaUsageReports_BucketQuotaUsage) ProtoMessage() {}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaUsageReports_BucketQuotaUsage.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaUsageReports_BucketQuotaUsage) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetBucketId() *BucketId {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetTimeElapsed() *durationpb.Duration {
	if x != nil {
		return x.TimeElapsed
	}
	return nil
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetNumRequestsAllowed() uint64 {
	if x != nil {
		return x.NumRequestsAllowed
	}
	return 0
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetNumRequestsDenied() uint64 {
	if x != nil {
		return x.NumRequestsDenied
	}
	return 0
}

// Commands the data plane to apply one of the actions to the bucket with the
// :ref:`bucket_id <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
type RateLimitQuotaResponse_BucketAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// “BucketId“ for which request the action is applied.
	BucketId *BucketId `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Types that are valid to be assigned to BucketAction:
	//
	//	*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_
	//	*RateLimitQuotaResponse_BucketAction_AbandonAction_
	BucketAction  isRateLimitQuotaResponse_BucketAction_BucketAction `protobuf_oneof:"bucket_action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitQuotaResponse_BucketAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaResponse_BucketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RateLimitQuotaResponse_BucketAction) GetBucketId() *BucketId {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction) GetBucketAction() isRateLimitQuotaResponse_BucketAction_BucketAction {
	if x != nil {
		return x.BucketAction
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction) GetQuotaAssignmentAction() *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction {
	if x != nil {
		if x, ok := x.BucketAction.(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_); ok {
			return x.QuotaAssignmentAction
		}
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction) GetAbandonAction() *RateLimitQuotaResponse_BucketAction_AbandonAction {
	if x != nil {
		if x, ok := x.BucketAction.(*RateLimitQuotaResponse_BucketAction_AbandonAction_); ok {
			return x.AbandonAction
		}
	}
	return nil
}

type isRateLimitQuotaResponse_BucketAction_BucketAction interface {
	isRateLimitQuotaResponse_BucketAction_BucketAction()
}

type RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_ struct {
	// Apply the quota assignment to the bucket.
	//
	// Commands the data plane to apply a rate limiting strategy to the bucket.
	// The process of applying and expiring the rate limiting strategy is detailed in the
	// :ref:`QuotaAssignmentAction
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`
	// message.
	QuotaAssignmentAction *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction `protobuf:"bytes,2,opt,name=quota_assignment_action,json=quotaAssignmentAction,proto3,oneof"`
}

type RateLimitQuotaResponse_BucketAction_AbandonAction_ struct {
	// Abandon the bucket.
	//
	// Commands the data plane to abandon the bucket.
	// The process of abandoning the bucket is described in the :ref:`AbandonAction
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction>`
	// message.
	AbandonAction *RateLimitQuotaResponse_BucketAction_AbandonAction `protobuf:"bytes,3,opt,name=abandon_action,json=abandonAction,proto3,oneof"`
}

func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_) isRateLimitQuotaResponse_BucketAction_BucketAction() {
}

func (*RateLimitQuotaResponse_BucketAction_AbandonAction_) isRateLimitQuotaResponse_BucketAction_BucketAction() {
}

// Quota assignment for the bucket. Configures the rate limiting strategy and the duration
// for the given :ref:`bucket_id
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
//
// **Applying the first assignment to the bucket**
//
// Once the data plane receives the “QuotaAssignmentAction“, it must send the current usage
// report for the bucket, and start rate limiting requests matched into the bucket
// using the strategy configured in the :ref:`rate_limit_strategy
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.rate_limit_strategy>`
// field. The assignment becomes bucket's “active“ assignment.
//
// **Expiring the assignment**
//
// The duration of the assignment defined in the :ref:`assignment_time_to_live
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
// field. When the duration runs off, the assignment is “expired“, and no longer “active“.
// The data plane should stop applying the rate limiting strategy to the bucket, and transition
// the bucket to the "expired assignment" state. This activates the behavior configured in the
// :ref:`expired_assignment_behavior <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.expired_assignment_behavior>`
// field.
//
// **Replacing the assignment**
//
//   - If the rate limiting strategy is different from bucket's “active“ assignment, or
//     the current bucket assignment is “expired“, the data plane must immediately
//     end the current assignment, report the bucket usage, and apply the new assignment.
//     The new assignment becomes bucket's “active“ assignment.
//   - If the rate limiting strategy is the same as the bucket's “active“ (not “expired“)
//     assignment, the data plane should extend the duration of the “active“ assignment
//     for the duration of the new assignment provided in the :ref:`assignment_time_to_live
//     <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
//     field. The “active“ assignment is considered unchanged.
type RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A duration after which the assignment is be considered “expired“. The process of the
	// expiration is described :ref:`above
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`.
	//
	//   - If unset, the assignment has no expiration date.
	//   - If set to “0“, the assignment expires immediately, forcing the client into the
	//     :ref:`"expired assignment"
	//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior.expired_assignment_behavior_timeout>`
	//     state. This may be used by the RLQS server in cases when it needs clients to proactively
	//     fall back to the pre-configured :ref:`ExpiredAssignmentBehavior
	//     <envoy_v3_api_msg_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior>`,
	//     f.e. before the server going into restart.
	//
	// .. attention::
	//
	//	Note that :ref:`expiring
	//	<envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`
	//	the assignment is not the same as :ref:`abandoning
	//	<envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction>`
	//	the assignment. While expiring the assignment just transitions the bucket to
	//	the "expired assignment" state; abandoning the assignment completely erases
	//	the bucket from the data plane memory, and stops the usage reports.
	AssignmentTimeToLive *durationpb.Duration `protobuf:"bytes,2,opt,name=assignment_time_to_live,json=assignmentTimeToLive,proto3" json:"assignment_time_to_live,omitempty"`
	// Configures the local rate limiter for the request matched to the bucket.
	// If not set, allow all requests.
	RateLimitStrategy *v3.RateLimitStrategy `protobuf:"bytes,3,opt,name=rate_limit_strategy,json=rateLimitStrategy,proto3" json:"rate_limit_strategy,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) GetAssignmentTimeToLive() *durationpb.Duration {
	if x != nil {
		return x.AssignmentTimeToLive
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) GetRateLimitStrategy() *v3.RateLimitStrategy {
	if x != nil {
		return x.RateLimitStrategy
	}
	return nil
}

// Abandon action for the bucket. Indicates that the RLQS server will no longer be
// sending updates for the given :ref:`bucket_id
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
//
// If no requests are reported for a bucket, after some time the server considers the bucket
// inactive. The server stops tracking the bucket, and instructs the the data plane to abandon
// the bucket via this message.
//
// **Abandoning the assignment**
//
// The data plane is to erase the bucket (including its usage data) from the memory.
// It should stop tracking the bucket, and stop reporting its usage. This effectively resets
// the data plane to the state prior to matching the first request into the bucket.
//
// **Restarting the subscription**
//
// If a new request is matched into a bucket previously abandoned, the data plane must behave
// as if it has never tracked the bucket, and it's the first request matched into it:
//
//  1. The process of :ref:`subscription and reporting
//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.reporting_interval>`
//     starts from the beginning.
//
//  2. The bucket transitions to the :ref:`"no assignment"
//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.no_assignment_behavior>`
//     state.
//
//  3. Once the new assignment is received, it's applied per
//     "Applying the first assignment to the bucket" section of the :ref:`QuotaAssignmentAction
//     <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`.
type RateLimitQuotaResponse_BucketAction_AbandonAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction_AbandonAction{}
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction_AbandonAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction_AbandonAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction_AbandonAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0, 1}
}

var File_envoy_service_rate_limit_quota_v3_rlqs_proto protoreflect.FileDescriptor

const file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc = "" +
	"\n" +
	",envoy/service/rate_limit_quota/v3/rlqs.proto\x12!envoy.service.rate_limit_quota.v3\x1a&envoy/type/v3/ratelimit_strategy.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fxds/annotations/v3/status.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xdd\x03\n" +
	"\x1aRateLimitQuotaUsageReports\x12\x1f\n" +
	"\x06domain\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x06domain\x12\x88\x01\n" +
	"\x13bucket_quota_usages\x18\x02 \x03(\v2N.envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsageB\b\xfaB\x05\x92\x01\x02\b\x01R\x11bucketQuotaUsages\x1a\x92\x02\n" +
	"\x10BucketQuotaUsage\x12R\n" +
	"\tbucket_id\x18\x01 \x01(\v2+.envoy.service.rate_limit_quota.v3.BucketIdB\b\xfaB\x05\x8a\x01\x02\x10\x01R\bbucketId\x12H\n" +
	"\ftime_elapsed\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\vtimeElapsed\x120\n" +
	"\x14num_requests_allowed\x18\x03 \x01(\x04R\x12numRequestsAllowed\x12.\n" +
	"\x13num_requests_denied\x18\x04 \x01(\x04R\x11numRequestsDenied\"\xfb\x05\n" +
	"\x16RateLimitQuotaResponse\x12u\n" +
	"\rbucket_action\x18\x01 \x03(\v2F.envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketActionB\b\xfaB\x05\x92\x01\x02\b\x01R\fbucketAction\x1a\xe9\x04\n" +
	"\fBucketAction\x12R\n" +
	"\tbucket_id\x18\x01 \x01(\v2+.envoy.service.rate_limit_quota.v3.BucketIdB\b\xfaB\x05\x8a\x01\x02\x10\x01R\bbucketId\x12\x96\x01\n" +
	"\x17quota_assignment_action\x18\x02 \x01(\v2\\.envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentActionH\x00R\x15quotaAssignmentAction\x12}\n" +
	"\x0eabandon_action\x18\x03 \x01(\v2T.envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonActionH\x00R\rabandonAction\x1a\xc5\x01\n" +
	"\x15QuotaAssignmentAction\x12Z\n" +
	"\x17assignment_time_to_live\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x022\x00R\x14assignmentTimeToLive\x12P\n" +
	"\x13rate_limit_strategy\x18\x03 \x01(\v2 .envoy.type.v3.RateLimitStrategyR\x11rateLimitStrategy\x1a\x0f\n" +
	"\rAbandonActionB\x14\n" +
	"\rbucket_action\x12\x03\xf8B\x01\"\xac\x01\n" +
	"\bBucketId\x12e\n" +
	"\x06bucket\x18\x01 \x03(\v27.envoy.service.rate_limit_quota.v3.BucketId.BucketEntryB\x14\xfaB\x11\x9a\x01\x0e\b\x01\"\x04r\x02\x10\x01*\x04r\x02\x10\x01R\x06bucket\x1a9\n" +
	"\vBucketEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xb1\x01\n" +
	"\x15RateLimitQuotaService\x12\x97\x01\n" +
	"\x15StreamRateLimitQuotas\x12=.envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports\x1a9.envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse\"\x00(\x010\x01B\xab\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\xd2Ƥ\xe1\x06\x02\b\x01\n" +
	"/io.envoyproxy.envoy.service.rate_limit_quota.v3B\tRlqsProtoP\x01Z[github.com/envoyproxy/go-control-plane/envoy/service/rate_limit_quota/v3;rate_limit_quotav3b\x06proto3"

var (
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescOnce sync.Once
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData []byte
)

func file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP() []byte {
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescOnce.Do(func() {
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc), len(file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc)))
	})
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData
}

var file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes = []any{
	(*RateLimitQuotaUsageReports)(nil),                                // 0: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports
	(*RateLimitQuotaResponse)(nil),                                    // 1: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse
	(*BucketId)(nil),                                                  // 2: envoy.service.rate_limit_quota.v3.BucketId
	(*RateLimitQuotaUsageReports_BucketQuotaUsage)(nil),               // 3: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage
	(*RateLimitQuotaResponse_BucketAction)(nil),                       // 4: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction
	(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction)(nil), // 5: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction
	(*RateLimitQuotaResponse_BucketAction_AbandonAction)(nil),         // 6: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction
	nil,                          // 7: envoy.service.rate_limit_quota.v3.BucketId.BucketEntry
	(*durationpb.Duration)(nil),  // 8: google.protobuf.Duration
	(*v3.RateLimitStrategy)(nil), // 9: envoy.type.v3.RateLimitStrategy
}
var file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs = []int32{
	3,  // 0: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.bucket_quota_usages:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage
	4,  // 1: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.bucket_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction
	7,  // 2: envoy.service.rate_limit_quota.v3.BucketId.bucket:type_name -> envoy.service.rate_limit_quota.v3.BucketId.BucketEntry
	2,  // 3: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage.bucket_id:type_name -> envoy.service.rate_limit_quota.v3.BucketId
	8,  // 4: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage.time_elapsed:type_name -> google.protobuf.Duration
	2,  // 5: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id:type_name -> envoy.service.rate_limit_quota.v3.BucketId
	5,  // 6: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.quota_assignment_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction
	6,  // 7: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.abandon_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction
	8,  // 8: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live:type_name -> google.protobuf.Duration
	9,  // 9: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.rate_limit_strategy:type_name -> envoy.type.v3.RateLimitStrategy
	0,  // 10: envoy.service.rate_limit_quota.v3.RateLimitQuotaService.StreamRateLimitQuotas:input_type -> envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports
	1,  // 11: envoy.service.rate_limit_quota.v3.RateLimitQuotaService.StreamRateLimitQuotas:output_type -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_envoy_service_rate_limit_quota_v3_rlqs_proto_init() }
func file_envoy_service_rate_limit_quota_v3_rlqs_proto_init() {
	if File_envoy_service_rate_limit_quota_v3_rlqs_proto != nil {
		return
	}
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4].OneofWrappers = []any{
		(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_)(nil),
		(*RateLimitQuotaResponse_BucketAction_AbandonAction_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc), len(file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes,
		DependencyIndexes: file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs,
		MessageInfos:      file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes,
	}.Build()
	File_envoy_service_rate_limit_quota_v3_rlqs_proto = out.File
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes = nil
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs = nil
}
