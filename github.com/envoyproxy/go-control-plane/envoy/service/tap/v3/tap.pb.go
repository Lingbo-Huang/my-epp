// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/service/tap/v3/tap.proto

package tapv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v31 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/data/tap/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a stream to the server
// and stream taps without ever expecting a response.
type StreamTapsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier data effectively is a structured metadata. As a performance optimization this will
	// only be sent in the first message on the stream.
	Identifier *StreamTapsRequest_Identifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The trace id. this can be used to merge together a streaming trace. Note that the trace_id
	// is not guaranteed to be spatially or temporally unique.
	TraceId uint64 `protobuf:"varint,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// The trace data.
	Trace         *v3.TraceWrapper `protobuf:"bytes,3,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTapsRequest) Reset() {
	*x = StreamTapsRequest{}
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTapsRequest) ProtoMessage() {}

func (x *StreamTapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTapsRequest.ProtoReflect.Descriptor instead.
func (*StreamTapsRequest) Descriptor() ([]byte, []int) {
	return file_envoy_service_tap_v3_tap_proto_rawDescGZIP(), []int{0}
}

func (x *StreamTapsRequest) GetIdentifier() *StreamTapsRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *StreamTapsRequest) GetTraceId() uint64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *StreamTapsRequest) GetTrace() *v3.TraceWrapper {
	if x != nil {
		return x.Trace
	}
	return nil
}

// [#not-implemented-hide:]
type StreamTapsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTapsResponse) Reset() {
	*x = StreamTapsResponse{}
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTapsResponse) ProtoMessage() {}

func (x *StreamTapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTapsResponse.ProtoReflect.Descriptor instead.
func (*StreamTapsResponse) Descriptor() ([]byte, []int) {
	return file_envoy_service_tap_v3_tap_proto_rawDescGZIP(), []int{1}
}

type StreamTapsRequest_Identifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node sending taps over the stream.
	Node *v31.Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// The opaque identifier that was set in the :ref:`output config
	// <envoy_v3_api_field_config.tap.v3.StreamingGrpcSink.tap_id>`.
	TapId         string `protobuf:"bytes,2,opt,name=tap_id,json=tapId,proto3" json:"tap_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTapsRequest_Identifier) Reset() {
	*x = StreamTapsRequest_Identifier{}
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTapsRequest_Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTapsRequest_Identifier) ProtoMessage() {}

func (x *StreamTapsRequest_Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_tap_v3_tap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTapsRequest_Identifier.ProtoReflect.Descriptor instead.
func (*StreamTapsRequest_Identifier) Descriptor() ([]byte, []int) {
	return file_envoy_service_tap_v3_tap_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamTapsRequest_Identifier) GetNode() *v31.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *StreamTapsRequest_Identifier) GetTapId() string {
	if x != nil {
		return x.TapId
	}
	return ""
}

var File_envoy_service_tap_v3_tap_proto protoreflect.FileDescriptor

const file_envoy_service_tap_v3_tap_proto_rawDesc = "" +
	"\n" +
	"\x1eenvoy/service/tap/v3/tap.proto\x12\x14envoy.service.tap.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a\x1fenvoy/data/tap/v3/wrapper.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\x8c\x03\n" +
	"\x11StreamTapsRequest\x12R\n" +
	"\n" +
	"identifier\x18\x01 \x01(\v22.envoy.service.tap.v3.StreamTapsRequest.IdentifierR\n" +
	"identifier\x12\x19\n" +
	"\btrace_id\x18\x02 \x01(\x04R\atraceId\x125\n" +
	"\x05trace\x18\x03 \x01(\v2\x1f.envoy.data.tap.v3.TraceWrapperR\x05trace\x1a\x9c\x01\n" +
	"\n" +
	"Identifier\x128\n" +
	"\x04node\x18\x01 \x01(\v2\x1a.envoy.config.core.v3.NodeB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x04node\x12\x15\n" +
	"\x06tap_id\x18\x02 \x01(\tR\x05tapId:=\x9aň\x1e8\n" +
	"6envoy.service.tap.v2alpha.StreamTapsRequest.Identifier:2\x9aň\x1e-\n" +
	"+envoy.service.tap.v2alpha.StreamTapsRequest\"I\n" +
	"\x12StreamTapsResponse:3\x9aň\x1e.\n" +
	",envoy.service.tap.v2alpha.StreamTapsResponse2u\n" +
	"\x0eTapSinkService\x12c\n" +
	"\n" +
	"StreamTaps\x12'.envoy.service.tap.v3.StreamTapsRequest\x1a(.envoy.service.tap.v3.StreamTapsResponse\"\x00(\x01B{\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"\"io.envoyproxy.envoy.service.tap.v3B\bTapProtoP\x01ZAgithub.com/envoyproxy/go-control-plane/envoy/service/tap/v3;tapv3b\x06proto3"

var (
	file_envoy_service_tap_v3_tap_proto_rawDescOnce sync.Once
	file_envoy_service_tap_v3_tap_proto_rawDescData []byte
)

func file_envoy_service_tap_v3_tap_proto_rawDescGZIP() []byte {
	file_envoy_service_tap_v3_tap_proto_rawDescOnce.Do(func() {
		file_envoy_service_tap_v3_tap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_service_tap_v3_tap_proto_rawDesc), len(file_envoy_service_tap_v3_tap_proto_rawDesc)))
	})
	return file_envoy_service_tap_v3_tap_proto_rawDescData
}

var file_envoy_service_tap_v3_tap_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_envoy_service_tap_v3_tap_proto_goTypes = []any{
	(*StreamTapsRequest)(nil),            // 0: envoy.service.tap.v3.StreamTapsRequest
	(*StreamTapsResponse)(nil),           // 1: envoy.service.tap.v3.StreamTapsResponse
	(*StreamTapsRequest_Identifier)(nil), // 2: envoy.service.tap.v3.StreamTapsRequest.Identifier
	(*v3.TraceWrapper)(nil),              // 3: envoy.data.tap.v3.TraceWrapper
	(*v31.Node)(nil),                     // 4: envoy.config.core.v3.Node
}
var file_envoy_service_tap_v3_tap_proto_depIdxs = []int32{
	2, // 0: envoy.service.tap.v3.StreamTapsRequest.identifier:type_name -> envoy.service.tap.v3.StreamTapsRequest.Identifier
	3, // 1: envoy.service.tap.v3.StreamTapsRequest.trace:type_name -> envoy.data.tap.v3.TraceWrapper
	4, // 2: envoy.service.tap.v3.StreamTapsRequest.Identifier.node:type_name -> envoy.config.core.v3.Node
	0, // 3: envoy.service.tap.v3.TapSinkService.StreamTaps:input_type -> envoy.service.tap.v3.StreamTapsRequest
	1, // 4: envoy.service.tap.v3.TapSinkService.StreamTaps:output_type -> envoy.service.tap.v3.StreamTapsResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_envoy_service_tap_v3_tap_proto_init() }
func file_envoy_service_tap_v3_tap_proto_init() {
	if File_envoy_service_tap_v3_tap_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_service_tap_v3_tap_proto_rawDesc), len(file_envoy_service_tap_v3_tap_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_envoy_service_tap_v3_tap_proto_goTypes,
		DependencyIndexes: file_envoy_service_tap_v3_tap_proto_depIdxs,
		MessageInfos:      file_envoy_service_tap_v3_tap_proto_msgTypes,
	}.Build()
	File_envoy_service_tap_v3_tap_proto = out.File
	file_envoy_service_tap_v3_tap_proto_goTypes = nil
	file_envoy_service_tap_v3_tap_proto_depIdxs = nil
}
