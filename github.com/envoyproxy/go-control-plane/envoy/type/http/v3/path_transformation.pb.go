// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/type/http/v3/path_transformation.proto

package httpv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PathTransformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of operations to apply. Transformations will be performed in the order that they appear.
	Operations    []*PathTransformation_Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathTransformation) Reset() {
	*x = PathTransformation{}
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTransformation) ProtoMessage() {}

func (x *PathTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTransformation.ProtoReflect.Descriptor instead.
func (*PathTransformation) Descriptor() ([]byte, []int) {
	return file_envoy_type_http_v3_path_transformation_proto_rawDescGZIP(), []int{0}
}

func (x *PathTransformation) GetOperations() []*PathTransformation_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// A type of operation to alter text.
type PathTransformation_Operation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to OperationSpecifier:
	//
	//	*PathTransformation_Operation_NormalizePathRfc_3986
	//	*PathTransformation_Operation_MergeSlashes_
	OperationSpecifier isPathTransformation_Operation_OperationSpecifier `protobuf_oneof:"operation_specifier"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PathTransformation_Operation) Reset() {
	*x = PathTransformation_Operation{}
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTransformation_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTransformation_Operation) ProtoMessage() {}

func (x *PathTransformation_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTransformation_Operation.ProtoReflect.Descriptor instead.
func (*PathTransformation_Operation) Descriptor() ([]byte, []int) {
	return file_envoy_type_http_v3_path_transformation_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PathTransformation_Operation) GetOperationSpecifier() isPathTransformation_Operation_OperationSpecifier {
	if x != nil {
		return x.OperationSpecifier
	}
	return nil
}

func (x *PathTransformation_Operation) GetNormalizePathRfc_3986() *PathTransformation_Operation_NormalizePathRFC3986 {
	if x != nil {
		if x, ok := x.OperationSpecifier.(*PathTransformation_Operation_NormalizePathRfc_3986); ok {
			return x.NormalizePathRfc_3986
		}
	}
	return nil
}

func (x *PathTransformation_Operation) GetMergeSlashes() *PathTransformation_Operation_MergeSlashes {
	if x != nil {
		if x, ok := x.OperationSpecifier.(*PathTransformation_Operation_MergeSlashes_); ok {
			return x.MergeSlashes
		}
	}
	return nil
}

type isPathTransformation_Operation_OperationSpecifier interface {
	isPathTransformation_Operation_OperationSpecifier()
}

type PathTransformation_Operation_NormalizePathRfc_3986 struct {
	// Enable path normalization per RFC 3986.
	NormalizePathRfc_3986 *PathTransformation_Operation_NormalizePathRFC3986 `protobuf:"bytes,2,opt,name=normalize_path_rfc_3986,json=normalizePathRfc3986,proto3,oneof"`
}

type PathTransformation_Operation_MergeSlashes_ struct {
	// Enable merging adjacent slashes.
	MergeSlashes *PathTransformation_Operation_MergeSlashes `protobuf:"bytes,3,opt,name=merge_slashes,json=mergeSlashes,proto3,oneof"`
}

func (*PathTransformation_Operation_NormalizePathRfc_3986) isPathTransformation_Operation_OperationSpecifier() {
}

func (*PathTransformation_Operation_MergeSlashes_) isPathTransformation_Operation_OperationSpecifier() {
}

// Should text be normalized according to RFC 3986? This typically is used for path headers
// before any processing of requests by HTTP filters or routing. This applies percent-encoded
// normalization and path segment normalization. Fails on characters disallowed in URLs
// (e.g. NULLs). See `Normalization and Comparison
// <https://tools.ietf.org/html/rfc3986#section-6>`_ for details of normalization. Note that
// this options does not perform `case normalization
// <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
type PathTransformation_Operation_NormalizePathRFC3986 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathTransformation_Operation_NormalizePathRFC3986) Reset() {
	*x = PathTransformation_Operation_NormalizePathRFC3986{}
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTransformation_Operation_NormalizePathRFC3986) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTransformation_Operation_NormalizePathRFC3986) ProtoMessage() {}

func (x *PathTransformation_Operation_NormalizePathRFC3986) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTransformation_Operation_NormalizePathRFC3986.ProtoReflect.Descriptor instead.
func (*PathTransformation_Operation_NormalizePathRFC3986) Descriptor() ([]byte, []int) {
	return file_envoy_type_http_v3_path_transformation_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Determines if adjacent slashes are merged into one. A common use case is for a request path
// header. Using this option in “:ref: PathNormalizationOptions
// <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions>“
// will allow incoming requests with path “//dir///file“ to match against route with “prefix“
// match set to “/dir“. When using for header transformations, note that slash merging is not
// part of `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
type PathTransformation_Operation_MergeSlashes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathTransformation_Operation_MergeSlashes) Reset() {
	*x = PathTransformation_Operation_MergeSlashes{}
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTransformation_Operation_MergeSlashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTransformation_Operation_MergeSlashes) ProtoMessage() {}

func (x *PathTransformation_Operation_MergeSlashes) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_http_v3_path_transformation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTransformation_Operation_MergeSlashes.ProtoReflect.Descriptor instead.
func (*PathTransformation_Operation_MergeSlashes) Descriptor() ([]byte, []int) {
	return file_envoy_type_http_v3_path_transformation_proto_rawDescGZIP(), []int{0, 0, 1}
}

var File_envoy_type_http_v3_path_transformation_proto protoreflect.FileDescriptor

const file_envoy_type_http_v3_path_transformation_proto_rawDesc = "" +
	"\n" +
	",envoy/type/http/v3/path_transformation.proto\x12\x12envoy.type.http.v3\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\x9e\x03\n" +
	"\x12PathTransformation\x12P\n" +
	"\n" +
	"operations\x18\x01 \x03(\v20.envoy.type.http.v3.PathTransformation.OperationR\n" +
	"operations\x1a\xb5\x02\n" +
	"\tOperation\x12~\n" +
	"\x17normalize_path_rfc_3986\x18\x02 \x01(\v2E.envoy.type.http.v3.PathTransformation.Operation.NormalizePathRFC3986H\x00R\x14normalizePathRfc3986\x12d\n" +
	"\rmerge_slashes\x18\x03 \x01(\v2=.envoy.type.http.v3.PathTransformation.Operation.MergeSlashesH\x00R\fmergeSlashes\x1a\x16\n" +
	"\x14NormalizePathRFC3986\x1a\x0e\n" +
	"\fMergeSlashesB\x1a\n" +
	"\x13operation_specifier\x12\x03\xf8B\x01B\x87\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	" io.envoyproxy.envoy.type.http.v3B\x17PathTransformationProtoP\x01Z@github.com/envoyproxy/go-control-plane/envoy/type/http/v3;httpv3b\x06proto3"

var (
	file_envoy_type_http_v3_path_transformation_proto_rawDescOnce sync.Once
	file_envoy_type_http_v3_path_transformation_proto_rawDescData []byte
)

func file_envoy_type_http_v3_path_transformation_proto_rawDescGZIP() []byte {
	file_envoy_type_http_v3_path_transformation_proto_rawDescOnce.Do(func() {
		file_envoy_type_http_v3_path_transformation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_type_http_v3_path_transformation_proto_rawDesc), len(file_envoy_type_http_v3_path_transformation_proto_rawDesc)))
	})
	return file_envoy_type_http_v3_path_transformation_proto_rawDescData
}

var file_envoy_type_http_v3_path_transformation_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_type_http_v3_path_transformation_proto_goTypes = []any{
	(*PathTransformation)(nil),                                // 0: envoy.type.http.v3.PathTransformation
	(*PathTransformation_Operation)(nil),                      // 1: envoy.type.http.v3.PathTransformation.Operation
	(*PathTransformation_Operation_NormalizePathRFC3986)(nil), // 2: envoy.type.http.v3.PathTransformation.Operation.NormalizePathRFC3986
	(*PathTransformation_Operation_MergeSlashes)(nil),         // 3: envoy.type.http.v3.PathTransformation.Operation.MergeSlashes
}
var file_envoy_type_http_v3_path_transformation_proto_depIdxs = []int32{
	1, // 0: envoy.type.http.v3.PathTransformation.operations:type_name -> envoy.type.http.v3.PathTransformation.Operation
	2, // 1: envoy.type.http.v3.PathTransformation.Operation.normalize_path_rfc_3986:type_name -> envoy.type.http.v3.PathTransformation.Operation.NormalizePathRFC3986
	3, // 2: envoy.type.http.v3.PathTransformation.Operation.merge_slashes:type_name -> envoy.type.http.v3.PathTransformation.Operation.MergeSlashes
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_envoy_type_http_v3_path_transformation_proto_init() }
func file_envoy_type_http_v3_path_transformation_proto_init() {
	if File_envoy_type_http_v3_path_transformation_proto != nil {
		return
	}
	file_envoy_type_http_v3_path_transformation_proto_msgTypes[1].OneofWrappers = []any{
		(*PathTransformation_Operation_NormalizePathRfc_3986)(nil),
		(*PathTransformation_Operation_MergeSlashes_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_type_http_v3_path_transformation_proto_rawDesc), len(file_envoy_type_http_v3_path_transformation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_type_http_v3_path_transformation_proto_goTypes,
		DependencyIndexes: file_envoy_type_http_v3_path_transformation_proto_depIdxs,
		MessageInfos:      file_envoy_type_http_v3_path_transformation_proto_msgTypes,
	}.Build()
	File_envoy_type_http_v3_path_transformation_proto = out.File
	file_envoy_type_http_v3_path_transformation_proto_goTypes = nil
	file_envoy_type_http_v3_path_transformation_proto_depIdxs = nil
}
