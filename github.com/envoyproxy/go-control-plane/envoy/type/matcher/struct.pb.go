// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/type/matcher/struct.proto

package matcher

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StructMatcher provides a general interface to check if a given value is matched in
// google.protobuf.Struct. It uses `path` to retrieve the value
// from the struct and then check if it's matched to the specified value.
//
// For example, for the following Struct:
//
// .. code-block:: yaml
//
//	fields:
//	  a:
//	    struct_value:
//	      fields:
//	        b:
//	          struct_value:
//	            fields:
//	              c:
//	                string_value: pro
//	        t:
//	          list_value:
//	            values:
//	              - string_value: m
//	              - string_value: n
//
// The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
// from the Metadata which is matched to the specified prefix match.
//
// .. code-block:: yaml
//
//	path:
//	- key: a
//	- key: b
//	- key: c
//	value:
//	  string_match:
//	    prefix: pr
//
// The following StructMatcher is matched as the code will match one of the string values in the
// list at the path [a, t].
//
// .. code-block:: yaml
//
//	path:
//	- key: a
//	- key: t
//	value:
//	  list_match:
//	    one_of:
//	      string_match:
//	        exact: m
//
// An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
type StructMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path to retrieve the Value from the Struct.
	Path []*StructMatcher_PathSegment `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	// The StructMatcher is matched if the value retrieved by path is matched to this value.
	Value         *ValueMatcher `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructMatcher) Reset() {
	*x = StructMatcher{}
	mi := &file_envoy_type_matcher_struct_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMatcher) ProtoMessage() {}

func (x *StructMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_struct_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMatcher.ProtoReflect.Descriptor instead.
func (*StructMatcher) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_struct_proto_rawDescGZIP(), []int{0}
}

func (x *StructMatcher) GetPath() []*StructMatcher_PathSegment {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *StructMatcher) GetValue() *ValueMatcher {
	if x != nil {
		return x.Value
	}
	return nil
}

// Specifies the segment in a path to retrieve value from Struct.
type StructMatcher_PathSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Segment:
	//
	//	*StructMatcher_PathSegment_Key
	Segment       isStructMatcher_PathSegment_Segment `protobuf_oneof:"segment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StructMatcher_PathSegment) Reset() {
	*x = StructMatcher_PathSegment{}
	mi := &file_envoy_type_matcher_struct_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructMatcher_PathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMatcher_PathSegment) ProtoMessage() {}

func (x *StructMatcher_PathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_struct_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMatcher_PathSegment.ProtoReflect.Descriptor instead.
func (*StructMatcher_PathSegment) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_struct_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StructMatcher_PathSegment) GetSegment() isStructMatcher_PathSegment_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *StructMatcher_PathSegment) GetKey() string {
	if x != nil {
		if x, ok := x.Segment.(*StructMatcher_PathSegment_Key); ok {
			return x.Key
		}
	}
	return ""
}

type isStructMatcher_PathSegment_Segment interface {
	isStructMatcher_PathSegment_Segment()
}

type StructMatcher_PathSegment_Key struct {
	// If specified, use the key to retrieve the value in a Struct.
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

func (*StructMatcher_PathSegment_Key) isStructMatcher_PathSegment_Segment() {}

var File_envoy_type_matcher_struct_proto protoreflect.FileDescriptor

const file_envoy_type_matcher_struct_proto_rawDesc = "" +
	"\n" +
	"\x1fenvoy/type/matcher/struct.proto\x12\x12envoy.type.matcher\x1a\x1eenvoy/type/matcher/value.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xda\x01\n" +
	"\rStructMatcher\x12K\n" +
	"\x04path\x18\x02 \x03(\v2-.envoy.type.matcher.StructMatcher.PathSegmentB\b\xfaB\x05\x92\x01\x02\b\x01R\x04path\x12@\n" +
	"\x05value\x18\x03 \x01(\v2 .envoy.type.matcher.ValueMatcherB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05value\x1a:\n" +
	"\vPathSegment\x12\x1b\n" +
	"\x03key\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\x03keyB\x0e\n" +
	"\asegment\x12\x03\xf8B\x01Bt\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	" io.envoyproxy.envoy.type.matcherB\vStructProtoP\x01Z9github.com/envoyproxy/go-control-plane/envoy/type/matcherb\x06proto3"

var (
	file_envoy_type_matcher_struct_proto_rawDescOnce sync.Once
	file_envoy_type_matcher_struct_proto_rawDescData []byte
)

func file_envoy_type_matcher_struct_proto_rawDescGZIP() []byte {
	file_envoy_type_matcher_struct_proto_rawDescOnce.Do(func() {
		file_envoy_type_matcher_struct_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_struct_proto_rawDesc), len(file_envoy_type_matcher_struct_proto_rawDesc)))
	})
	return file_envoy_type_matcher_struct_proto_rawDescData
}

var file_envoy_type_matcher_struct_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_type_matcher_struct_proto_goTypes = []any{
	(*StructMatcher)(nil),             // 0: envoy.type.matcher.StructMatcher
	(*StructMatcher_PathSegment)(nil), // 1: envoy.type.matcher.StructMatcher.PathSegment
	(*ValueMatcher)(nil),              // 2: envoy.type.matcher.ValueMatcher
}
var file_envoy_type_matcher_struct_proto_depIdxs = []int32{
	1, // 0: envoy.type.matcher.StructMatcher.path:type_name -> envoy.type.matcher.StructMatcher.PathSegment
	2, // 1: envoy.type.matcher.StructMatcher.value:type_name -> envoy.type.matcher.ValueMatcher
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_type_matcher_struct_proto_init() }
func file_envoy_type_matcher_struct_proto_init() {
	if File_envoy_type_matcher_struct_proto != nil {
		return
	}
	file_envoy_type_matcher_value_proto_init()
	file_envoy_type_matcher_struct_proto_msgTypes[1].OneofWrappers = []any{
		(*StructMatcher_PathSegment_Key)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_struct_proto_rawDesc), len(file_envoy_type_matcher_struct_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_type_matcher_struct_proto_goTypes,
		DependencyIndexes: file_envoy_type_matcher_struct_proto_depIdxs,
		MessageInfos:      file_envoy_type_matcher_struct_proto_msgTypes,
	}.Build()
	File_envoy_type_matcher_struct_proto = out.File
	file_envoy_type_matcher_struct_proto_goTypes = nil
	file_envoy_type_matcher_struct_proto_depIdxs = nil
}
