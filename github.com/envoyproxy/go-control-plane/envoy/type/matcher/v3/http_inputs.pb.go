// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/type/matcher/v3/http_inputs.proto

package matcherv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Match input indicates that matching should be done on a specific request header.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.request_headers]
type HttpRequestHeaderMatchInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The request header to match on.
	HeaderName    string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequestHeaderMatchInput) Reset() {
	*x = HttpRequestHeaderMatchInput{}
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequestHeaderMatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestHeaderMatchInput) ProtoMessage() {}

func (x *HttpRequestHeaderMatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestHeaderMatchInput.ProtoReflect.Descriptor instead.
func (*HttpRequestHeaderMatchInput) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP(), []int{0}
}

func (x *HttpRequestHeaderMatchInput) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

// Match input indicates that matching should be done on a specific request trailer.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.request_trailers]
type HttpRequestTrailerMatchInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The request trailer to match on.
	HeaderName    string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequestTrailerMatchInput) Reset() {
	*x = HttpRequestTrailerMatchInput{}
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequestTrailerMatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestTrailerMatchInput) ProtoMessage() {}

func (x *HttpRequestTrailerMatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestTrailerMatchInput.ProtoReflect.Descriptor instead.
func (*HttpRequestTrailerMatchInput) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP(), []int{1}
}

func (x *HttpRequestTrailerMatchInput) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

// Match input indicating that matching should be done on a specific response header.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the response contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.response_headers]
type HttpResponseHeaderMatchInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response header to match on.
	HeaderName    string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpResponseHeaderMatchInput) Reset() {
	*x = HttpResponseHeaderMatchInput{}
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpResponseHeaderMatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponseHeaderMatchInput) ProtoMessage() {}

func (x *HttpResponseHeaderMatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponseHeaderMatchInput.ProtoReflect.Descriptor instead.
func (*HttpResponseHeaderMatchInput) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP(), []int{2}
}

func (x *HttpResponseHeaderMatchInput) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

// Match input indicates that matching should be done on a specific response trailer.
// The resulting input string will be all headers for the given key joined by a comma,
// e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
// string will be 'bar,baz'.
// [#comment:TODO(snowp): Link to unified matching docs.]
// [#extension: envoy.matching.inputs.response_trailers]
type HttpResponseTrailerMatchInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The response trailer to match on.
	HeaderName    string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpResponseTrailerMatchInput) Reset() {
	*x = HttpResponseTrailerMatchInput{}
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpResponseTrailerMatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponseTrailerMatchInput) ProtoMessage() {}

func (x *HttpResponseTrailerMatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponseTrailerMatchInput.ProtoReflect.Descriptor instead.
func (*HttpResponseTrailerMatchInput) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP(), []int{3}
}

func (x *HttpResponseTrailerMatchInput) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

// Match input indicates that matching should be done on a specific query parameter.
// The resulting input string will be the first query parameter for the value
// 'query_param'.
// [#extension: envoy.matching.inputs.query_params]
type HttpRequestQueryParamMatchInput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The query parameter to match on.
	QueryParam    string `protobuf:"bytes,1,opt,name=query_param,json=queryParam,proto3" json:"query_param,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequestQueryParamMatchInput) Reset() {
	*x = HttpRequestQueryParamMatchInput{}
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequestQueryParamMatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestQueryParamMatchInput) ProtoMessage() {}

func (x *HttpRequestQueryParamMatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_v3_http_inputs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestQueryParamMatchInput.ProtoReflect.Descriptor instead.
func (*HttpRequestQueryParamMatchInput) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP(), []int{4}
}

func (x *HttpRequestQueryParamMatchInput) GetQueryParam() string {
	if x != nil {
		return x.QueryParam
	}
	return ""
}

var File_envoy_type_matcher_v3_http_inputs_proto protoreflect.FileDescriptor

const file_envoy_type_matcher_v3_http_inputs_proto_rawDesc = "" +
	"\n" +
	"'envoy/type/matcher/v3/http_inputs.proto\x12\x15envoy.type.matcher.v3\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"K\n" +
	"\x1bHttpRequestHeaderMatchInput\x12,\n" +
	"\vheader_name\x18\x01 \x01(\tB\v\xfaB\br\x06\xc8\x01\x00\xc0\x01\x01R\n" +
	"headerName\"L\n" +
	"\x1cHttpRequestTrailerMatchInput\x12,\n" +
	"\vheader_name\x18\x01 \x01(\tB\v\xfaB\br\x06\xc8\x01\x00\xc0\x01\x01R\n" +
	"headerName\"L\n" +
	"\x1cHttpResponseHeaderMatchInput\x12,\n" +
	"\vheader_name\x18\x01 \x01(\tB\v\xfaB\br\x06\xc8\x01\x00\xc0\x01\x01R\n" +
	"headerName\"M\n" +
	"\x1dHttpResponseTrailerMatchInput\x12,\n" +
	"\vheader_name\x18\x01 \x01(\tB\v\xfaB\br\x06\xc8\x01\x00\xc0\x01\x01R\n" +
	"headerName\"K\n" +
	"\x1fHttpRequestQueryParamMatchInput\x12(\n" +
	"\vquery_param\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"queryParamB\x88\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"#io.envoyproxy.envoy.type.matcher.v3B\x0fHttpInputsProtoP\x01ZFgithub.com/envoyproxy/go-control-plane/envoy/type/matcher/v3;matcherv3b\x06proto3"

var (
	file_envoy_type_matcher_v3_http_inputs_proto_rawDescOnce sync.Once
	file_envoy_type_matcher_v3_http_inputs_proto_rawDescData []byte
)

func file_envoy_type_matcher_v3_http_inputs_proto_rawDescGZIP() []byte {
	file_envoy_type_matcher_v3_http_inputs_proto_rawDescOnce.Do(func() {
		file_envoy_type_matcher_v3_http_inputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_v3_http_inputs_proto_rawDesc), len(file_envoy_type_matcher_v3_http_inputs_proto_rawDesc)))
	})
	return file_envoy_type_matcher_v3_http_inputs_proto_rawDescData
}

var file_envoy_type_matcher_v3_http_inputs_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_envoy_type_matcher_v3_http_inputs_proto_goTypes = []any{
	(*HttpRequestHeaderMatchInput)(nil),     // 0: envoy.type.matcher.v3.HttpRequestHeaderMatchInput
	(*HttpRequestTrailerMatchInput)(nil),    // 1: envoy.type.matcher.v3.HttpRequestTrailerMatchInput
	(*HttpResponseHeaderMatchInput)(nil),    // 2: envoy.type.matcher.v3.HttpResponseHeaderMatchInput
	(*HttpResponseTrailerMatchInput)(nil),   // 3: envoy.type.matcher.v3.HttpResponseTrailerMatchInput
	(*HttpRequestQueryParamMatchInput)(nil), // 4: envoy.type.matcher.v3.HttpRequestQueryParamMatchInput
}
var file_envoy_type_matcher_v3_http_inputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_envoy_type_matcher_v3_http_inputs_proto_init() }
func file_envoy_type_matcher_v3_http_inputs_proto_init() {
	if File_envoy_type_matcher_v3_http_inputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_v3_http_inputs_proto_rawDesc), len(file_envoy_type_matcher_v3_http_inputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_type_matcher_v3_http_inputs_proto_goTypes,
		DependencyIndexes: file_envoy_type_matcher_v3_http_inputs_proto_depIdxs,
		MessageInfos:      file_envoy_type_matcher_v3_http_inputs_proto_msgTypes,
	}.Build()
	File_envoy_type_matcher_v3_http_inputs_proto = out.File
	file_envoy_type_matcher_v3_http_inputs_proto_goTypes = nil
	file_envoy_type_matcher_v3_http_inputs_proto_depIdxs = nil
}
