// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/type/matcher/string.proto

package matcher

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies the way to match a string.
// [#next-free-field: 7]
type StringMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MatchPattern:
	//
	//	*StringMatcher_Exact
	//	*StringMatcher_Prefix
	//	*StringMatcher_Suffix
	//	*StringMatcher_Regex
	//	*StringMatcher_SafeRegex
	MatchPattern isStringMatcher_MatchPattern `protobuf_oneof:"match_pattern"`
	// If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
	// effect for the safe_regex match.
	// For example, the matcher *data* will match both input string *Data* and *data* if set to true.
	IgnoreCase    bool `protobuf:"varint,6,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringMatcher) Reset() {
	*x = StringMatcher{}
	mi := &file_envoy_type_matcher_string_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatcher) ProtoMessage() {}

func (x *StringMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_string_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatcher.ProtoReflect.Descriptor instead.
func (*StringMatcher) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_string_proto_rawDescGZIP(), []int{0}
}

func (x *StringMatcher) GetMatchPattern() isStringMatcher_MatchPattern {
	if x != nil {
		return x.MatchPattern
	}
	return nil
}

func (x *StringMatcher) GetExact() string {
	if x != nil {
		if x, ok := x.MatchPattern.(*StringMatcher_Exact); ok {
			return x.Exact
		}
	}
	return ""
}

func (x *StringMatcher) GetPrefix() string {
	if x != nil {
		if x, ok := x.MatchPattern.(*StringMatcher_Prefix); ok {
			return x.Prefix
		}
	}
	return ""
}

func (x *StringMatcher) GetSuffix() string {
	if x != nil {
		if x, ok := x.MatchPattern.(*StringMatcher_Suffix); ok {
			return x.Suffix
		}
	}
	return ""
}

// Deprecated: Marked as deprecated in envoy/type/matcher/string.proto.
func (x *StringMatcher) GetRegex() string {
	if x != nil {
		if x, ok := x.MatchPattern.(*StringMatcher_Regex); ok {
			return x.Regex
		}
	}
	return ""
}

func (x *StringMatcher) GetSafeRegex() *RegexMatcher {
	if x != nil {
		if x, ok := x.MatchPattern.(*StringMatcher_SafeRegex); ok {
			return x.SafeRegex
		}
	}
	return nil
}

func (x *StringMatcher) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

type isStringMatcher_MatchPattern interface {
	isStringMatcher_MatchPattern()
}

type StringMatcher_Exact struct {
	// The input string must match exactly the string specified here.
	//
	// Examples:
	//
	// * *abc* only matches the value *abc*.
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type StringMatcher_Prefix struct {
	// The input string must have the prefix specified here.
	// Note: empty prefix is not allowed, please use regex instead.
	//
	// Examples:
	//
	// * *abc* matches the value *abc.xyz*
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type StringMatcher_Suffix struct {
	// The input string must have the suffix specified here.
	// Note: empty prefix is not allowed, please use regex instead.
	//
	// Examples:
	//
	// * *abc* matches the value *xyz.abc*
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3,oneof"`
}

type StringMatcher_Regex struct {
	// The input string must match the regular expression specified here.
	// The regex grammar is defined `here
	// <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.
	//
	// Examples:
	//
	// * The regex “\d{3}“ matches the value *123*
	// * The regex “\d{3}“ does not match the value *1234*
	// * The regex “\d{3}“ does not match the value *123.456*
	//
	// .. attention::
	//
	//	This field has been deprecated in favor of `safe_regex` as it is not safe for use with
	//	untrusted input in all cases.
	//
	// Deprecated: Marked as deprecated in envoy/type/matcher/string.proto.
	Regex string `protobuf:"bytes,4,opt,name=regex,proto3,oneof"`
}

type StringMatcher_SafeRegex struct {
	// The input string must match the regular expression specified here.
	SafeRegex *RegexMatcher `protobuf:"bytes,5,opt,name=safe_regex,json=safeRegex,proto3,oneof"`
}

func (*StringMatcher_Exact) isStringMatcher_MatchPattern() {}

func (*StringMatcher_Prefix) isStringMatcher_MatchPattern() {}

func (*StringMatcher_Suffix) isStringMatcher_MatchPattern() {}

func (*StringMatcher_Regex) isStringMatcher_MatchPattern() {}

func (*StringMatcher_SafeRegex) isStringMatcher_MatchPattern() {}

// Specifies a list of ways to match a string.
type ListStringMatcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patterns      []*StringMatcher       `protobuf:"bytes,1,rep,name=patterns,proto3" json:"patterns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStringMatcher) Reset() {
	*x = ListStringMatcher{}
	mi := &file_envoy_type_matcher_string_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStringMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStringMatcher) ProtoMessage() {}

func (x *ListStringMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_type_matcher_string_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStringMatcher.ProtoReflect.Descriptor instead.
func (*ListStringMatcher) Descriptor() ([]byte, []int) {
	return file_envoy_type_matcher_string_proto_rawDescGZIP(), []int{1}
}

func (x *ListStringMatcher) GetPatterns() []*StringMatcher {
	if x != nil {
		return x.Patterns
	}
	return nil
}

var File_envoy_type_matcher_string_proto protoreflect.FileDescriptor

const file_envoy_type_matcher_string_proto_rawDesc = "" +
	"\n" +
	"\x1fenvoy/type/matcher/string.proto\x12\x12envoy.type.matcher\x1a\x1eenvoy/type/matcher/regex.proto\x1a#envoy/annotations/deprecation.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\x9b\x02\n" +
	"\rStringMatcher\x12\x16\n" +
	"\x05exact\x18\x01 \x01(\tH\x00R\x05exact\x12!\n" +
	"\x06prefix\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\x06prefix\x12!\n" +
	"\x06suffix\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01H\x00R\x06suffix\x12(\n" +
	"\x05regex\x18\x04 \x01(\tB\x10\xfaB\x05r\x03(\x80\b\xb8\xee\xf2\xd2\x05\x01\x18\x01H\x00R\x05regex\x12K\n" +
	"\n" +
	"safe_regex\x18\x05 \x01(\v2 .envoy.type.matcher.RegexMatcherB\b\xfaB\x05\x8a\x01\x02\x10\x01H\x00R\tsafeRegex\x12\x1f\n" +
	"\vignore_case\x18\x06 \x01(\bR\n" +
	"ignoreCaseB\x14\n" +
	"\rmatch_pattern\x12\x03\xf8B\x01\"\\\n" +
	"\x11ListStringMatcher\x12G\n" +
	"\bpatterns\x18\x01 \x03(\v2!.envoy.type.matcher.StringMatcherB\b\xfaB\x05\x92\x01\x02\b\x01R\bpatternsBt\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	" io.envoyproxy.envoy.type.matcherB\vStringProtoP\x01Z9github.com/envoyproxy/go-control-plane/envoy/type/matcherb\x06proto3"

var (
	file_envoy_type_matcher_string_proto_rawDescOnce sync.Once
	file_envoy_type_matcher_string_proto_rawDescData []byte
)

func file_envoy_type_matcher_string_proto_rawDescGZIP() []byte {
	file_envoy_type_matcher_string_proto_rawDescOnce.Do(func() {
		file_envoy_type_matcher_string_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_string_proto_rawDesc), len(file_envoy_type_matcher_string_proto_rawDesc)))
	})
	return file_envoy_type_matcher_string_proto_rawDescData
}

var file_envoy_type_matcher_string_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_type_matcher_string_proto_goTypes = []any{
	(*StringMatcher)(nil),     // 0: envoy.type.matcher.StringMatcher
	(*ListStringMatcher)(nil), // 1: envoy.type.matcher.ListStringMatcher
	(*RegexMatcher)(nil),      // 2: envoy.type.matcher.RegexMatcher
}
var file_envoy_type_matcher_string_proto_depIdxs = []int32{
	2, // 0: envoy.type.matcher.StringMatcher.safe_regex:type_name -> envoy.type.matcher.RegexMatcher
	0, // 1: envoy.type.matcher.ListStringMatcher.patterns:type_name -> envoy.type.matcher.StringMatcher
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_type_matcher_string_proto_init() }
func file_envoy_type_matcher_string_proto_init() {
	if File_envoy_type_matcher_string_proto != nil {
		return
	}
	file_envoy_type_matcher_regex_proto_init()
	file_envoy_type_matcher_string_proto_msgTypes[0].OneofWrappers = []any{
		(*StringMatcher_Exact)(nil),
		(*StringMatcher_Prefix)(nil),
		(*StringMatcher_Suffix)(nil),
		(*StringMatcher_Regex)(nil),
		(*StringMatcher_SafeRegex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_type_matcher_string_proto_rawDesc), len(file_envoy_type_matcher_string_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_type_matcher_string_proto_goTypes,
		DependencyIndexes: file_envoy_type_matcher_string_proto_depIdxs,
		MessageInfos:      file_envoy_type_matcher_string_proto_msgTypes,
	}.Build()
	File_envoy_type_matcher_string_proto = out.File
	file_envoy_type_matcher_string_proto_goTypes = nil
	file_envoy_type_matcher_string_proto_depIdxs = nil
}
