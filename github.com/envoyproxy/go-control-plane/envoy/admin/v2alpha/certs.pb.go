// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/admin/v2alpha/certs.proto

package v2alpha

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Proto representation of certificate details. Admin endpoint uses this wrapper for `/certs` to
// display certificate information. See :ref:`/certs <operations_admin_interface_certs>` for more
// information.
type Certificates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of certificates known to an Envoy.
	Certificates  []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificates) Reset() {
	*x = Certificates{}
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificates) ProtoMessage() {}

func (x *Certificates) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificates.ProtoReflect.Descriptor instead.
func (*Certificates) Descriptor() ([]byte, []int) {
	return file_envoy_admin_v2alpha_certs_proto_rawDescGZIP(), []int{0}
}

func (x *Certificates) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details of CA certificate.
	CaCert []*CertificateDetails `protobuf:"bytes,1,rep,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Details of Certificate Chain
	CertChain     []*CertificateDetails `protobuf:"bytes,2,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_envoy_admin_v2alpha_certs_proto_rawDescGZIP(), []int{1}
}

func (x *Certificate) GetCaCert() []*CertificateDetails {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *Certificate) GetCertChain() []*CertificateDetails {
	if x != nil {
		return x.CertChain
	}
	return nil
}

// [#next-free-field: 7]
type CertificateDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path of the certificate.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Certificate Serial Number.
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// List of Subject Alternate names.
	SubjectAltNames []*SubjectAlternateName `protobuf:"bytes,3,rep,name=subject_alt_names,json=subjectAltNames,proto3" json:"subject_alt_names,omitempty"`
	// Minimum of days until expiration of certificate and it's chain.
	DaysUntilExpiration uint64 `protobuf:"varint,4,opt,name=days_until_expiration,json=daysUntilExpiration,proto3" json:"days_until_expiration,omitempty"`
	// Indicates the time from which the certificate is valid.
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	// Indicates the time at which the certificate expires.
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertificateDetails) Reset() {
	*x = CertificateDetails{}
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDetails) ProtoMessage() {}

func (x *CertificateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDetails.ProtoReflect.Descriptor instead.
func (*CertificateDetails) Descriptor() ([]byte, []int) {
	return file_envoy_admin_v2alpha_certs_proto_rawDescGZIP(), []int{2}
}

func (x *CertificateDetails) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CertificateDetails) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CertificateDetails) GetSubjectAltNames() []*SubjectAlternateName {
	if x != nil {
		return x.SubjectAltNames
	}
	return nil
}

func (x *CertificateDetails) GetDaysUntilExpiration() uint64 {
	if x != nil {
		return x.DaysUntilExpiration
	}
	return 0
}

func (x *CertificateDetails) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *CertificateDetails) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

type SubjectAlternateName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subject Alternate Name.
	//
	// Types that are valid to be assigned to Name:
	//
	//	*SubjectAlternateName_Dns
	//	*SubjectAlternateName_Uri
	//	*SubjectAlternateName_IpAddress
	Name          isSubjectAlternateName_Name `protobuf_oneof:"name"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubjectAlternateName) Reset() {
	*x = SubjectAlternateName{}
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubjectAlternateName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectAlternateName) ProtoMessage() {}

func (x *SubjectAlternateName) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_admin_v2alpha_certs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectAlternateName.ProtoReflect.Descriptor instead.
func (*SubjectAlternateName) Descriptor() ([]byte, []int) {
	return file_envoy_admin_v2alpha_certs_proto_rawDescGZIP(), []int{3}
}

func (x *SubjectAlternateName) GetName() isSubjectAlternateName_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SubjectAlternateName) GetDns() string {
	if x != nil {
		if x, ok := x.Name.(*SubjectAlternateName_Dns); ok {
			return x.Dns
		}
	}
	return ""
}

func (x *SubjectAlternateName) GetUri() string {
	if x != nil {
		if x, ok := x.Name.(*SubjectAlternateName_Uri); ok {
			return x.Uri
		}
	}
	return ""
}

func (x *SubjectAlternateName) GetIpAddress() string {
	if x != nil {
		if x, ok := x.Name.(*SubjectAlternateName_IpAddress); ok {
			return x.IpAddress
		}
	}
	return ""
}

type isSubjectAlternateName_Name interface {
	isSubjectAlternateName_Name()
}

type SubjectAlternateName_Dns struct {
	Dns string `protobuf:"bytes,1,opt,name=dns,proto3,oneof"`
}

type SubjectAlternateName_Uri struct {
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

type SubjectAlternateName_IpAddress struct {
	IpAddress string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof"`
}

func (*SubjectAlternateName_Dns) isSubjectAlternateName_Name() {}

func (*SubjectAlternateName_Uri) isSubjectAlternateName_Name() {}

func (*SubjectAlternateName_IpAddress) isSubjectAlternateName_Name() {}

var File_envoy_admin_v2alpha_certs_proto protoreflect.FileDescriptor

const file_envoy_admin_v2alpha_certs_proto_rawDesc = "" +
	"\n" +
	"\x1fenvoy/admin/v2alpha/certs.proto\x12\x13envoy.admin.v2alpha\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dudpa/annotations/status.proto\"T\n" +
	"\fCertificates\x12D\n" +
	"\fcertificates\x18\x01 \x03(\v2 .envoy.admin.v2alpha.CertificateR\fcertificates\"\x97\x01\n" +
	"\vCertificate\x12@\n" +
	"\aca_cert\x18\x01 \x03(\v2'.envoy.admin.v2alpha.CertificateDetailsR\x06caCert\x12F\n" +
	"\n" +
	"cert_chain\x18\x02 \x03(\v2'.envoy.admin.v2alpha.CertificateDetailsR\tcertChain\"\xd8\x02\n" +
	"\x12CertificateDetails\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12#\n" +
	"\rserial_number\x18\x02 \x01(\tR\fserialNumber\x12U\n" +
	"\x11subject_alt_names\x18\x03 \x03(\v2).envoy.admin.v2alpha.SubjectAlternateNameR\x0fsubjectAltNames\x122\n" +
	"\x15days_until_expiration\x18\x04 \x01(\x04R\x13daysUntilExpiration\x129\n" +
	"\n" +
	"valid_from\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tvalidFrom\x12C\n" +
	"\x0fexpiration_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationTime\"g\n" +
	"\x14SubjectAlternateName\x12\x12\n" +
	"\x03dns\x18\x01 \x01(\tH\x00R\x03dns\x12\x12\n" +
	"\x03uri\x18\x02 \x01(\tH\x00R\x03uri\x12\x1f\n" +
	"\n" +
	"ip_address\x18\x03 \x01(\tH\x00R\tipAddressB\x06\n" +
	"\x04nameBu\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"!io.envoyproxy.envoy.admin.v2alphaB\n" +
	"CertsProtoP\x01Z:github.com/envoyproxy/go-control-plane/envoy/admin/v2alphab\x06proto3"

var (
	file_envoy_admin_v2alpha_certs_proto_rawDescOnce sync.Once
	file_envoy_admin_v2alpha_certs_proto_rawDescData []byte
)

func file_envoy_admin_v2alpha_certs_proto_rawDescGZIP() []byte {
	file_envoy_admin_v2alpha_certs_proto_rawDescOnce.Do(func() {
		file_envoy_admin_v2alpha_certs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_admin_v2alpha_certs_proto_rawDesc), len(file_envoy_admin_v2alpha_certs_proto_rawDesc)))
	})
	return file_envoy_admin_v2alpha_certs_proto_rawDescData
}

var file_envoy_admin_v2alpha_certs_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_admin_v2alpha_certs_proto_goTypes = []any{
	(*Certificates)(nil),          // 0: envoy.admin.v2alpha.Certificates
	(*Certificate)(nil),           // 1: envoy.admin.v2alpha.Certificate
	(*CertificateDetails)(nil),    // 2: envoy.admin.v2alpha.CertificateDetails
	(*SubjectAlternateName)(nil),  // 3: envoy.admin.v2alpha.SubjectAlternateName
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_envoy_admin_v2alpha_certs_proto_depIdxs = []int32{
	1, // 0: envoy.admin.v2alpha.Certificates.certificates:type_name -> envoy.admin.v2alpha.Certificate
	2, // 1: envoy.admin.v2alpha.Certificate.ca_cert:type_name -> envoy.admin.v2alpha.CertificateDetails
	2, // 2: envoy.admin.v2alpha.Certificate.cert_chain:type_name -> envoy.admin.v2alpha.CertificateDetails
	3, // 3: envoy.admin.v2alpha.CertificateDetails.subject_alt_names:type_name -> envoy.admin.v2alpha.SubjectAlternateName
	4, // 4: envoy.admin.v2alpha.CertificateDetails.valid_from:type_name -> google.protobuf.Timestamp
	4, // 5: envoy.admin.v2alpha.CertificateDetails.expiration_time:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_envoy_admin_v2alpha_certs_proto_init() }
func file_envoy_admin_v2alpha_certs_proto_init() {
	if File_envoy_admin_v2alpha_certs_proto != nil {
		return
	}
	file_envoy_admin_v2alpha_certs_proto_msgTypes[3].OneofWrappers = []any{
		(*SubjectAlternateName_Dns)(nil),
		(*SubjectAlternateName_Uri)(nil),
		(*SubjectAlternateName_IpAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_admin_v2alpha_certs_proto_rawDesc), len(file_envoy_admin_v2alpha_certs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_admin_v2alpha_certs_proto_goTypes,
		DependencyIndexes: file_envoy_admin_v2alpha_certs_proto_depIdxs,
		MessageInfos:      file_envoy_admin_v2alpha_certs_proto_msgTypes,
	}.Build()
	File_envoy_admin_v2alpha_certs_proto = out.File
	file_envoy_admin_v2alpha_certs_proto_goTypes = nil
	file_envoy_admin_v2alpha_certs_proto_depIdxs = nil
}
