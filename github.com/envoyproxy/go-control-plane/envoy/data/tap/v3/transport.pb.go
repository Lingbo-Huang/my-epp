// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/data/tap/v3/transport.proto

package tapv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event in a socket trace.
// [#next-free-field: 6]
type SocketEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp for event.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Read or write with content as bytes string.
	//
	// Types that are valid to be assigned to EventSelector:
	//
	//	*SocketEvent_Read_
	//	*SocketEvent_Write_
	//	*SocketEvent_Closed_
	EventSelector isSocketEvent_EventSelector `protobuf_oneof:"event_selector"`
	// Connection information per event
	Connection    *Connection `protobuf:"bytes,5,opt,name=connection,proto3" json:"connection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketEvent) Reset() {
	*x = SocketEvent{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvent) ProtoMessage() {}

func (x *SocketEvent) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvent.ProtoReflect.Descriptor instead.
func (*SocketEvent) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{0}
}

func (x *SocketEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SocketEvent) GetEventSelector() isSocketEvent_EventSelector {
	if x != nil {
		return x.EventSelector
	}
	return nil
}

func (x *SocketEvent) GetRead() *SocketEvent_Read {
	if x != nil {
		if x, ok := x.EventSelector.(*SocketEvent_Read_); ok {
			return x.Read
		}
	}
	return nil
}

func (x *SocketEvent) GetWrite() *SocketEvent_Write {
	if x != nil {
		if x, ok := x.EventSelector.(*SocketEvent_Write_); ok {
			return x.Write
		}
	}
	return nil
}

func (x *SocketEvent) GetClosed() *SocketEvent_Closed {
	if x != nil {
		if x, ok := x.EventSelector.(*SocketEvent_Closed_); ok {
			return x.Closed
		}
	}
	return nil
}

func (x *SocketEvent) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type isSocketEvent_EventSelector interface {
	isSocketEvent_EventSelector()
}

type SocketEvent_Read_ struct {
	Read *SocketEvent_Read `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

type SocketEvent_Write_ struct {
	Write *SocketEvent_Write `protobuf:"bytes,3,opt,name=write,proto3,oneof"`
}

type SocketEvent_Closed_ struct {
	Closed *SocketEvent_Closed `protobuf:"bytes,4,opt,name=closed,proto3,oneof"`
}

func (*SocketEvent_Read_) isSocketEvent_EventSelector() {}

func (*SocketEvent_Write_) isSocketEvent_EventSelector() {}

func (*SocketEvent_Closed_) isSocketEvent_EventSelector() {}

// Sequence of read/write events that constitute a buffered trace on a socket.
// [#next-free-field: 6]
type SocketBufferedTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
	// for long term stable uniqueness. Matches connection IDs used in Envoy logs.
	TraceId uint64 `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// Connection properties.
	Connection *Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	// Sequence of observed events.
	Events []*SocketEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	// Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes
	// <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_rx_bytes>` setting.
	ReadTruncated bool `protobuf:"varint,4,opt,name=read_truncated,json=readTruncated,proto3" json:"read_truncated,omitempty"`
	// Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes
	// <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_tx_bytes>` setting.
	WriteTruncated bool `protobuf:"varint,5,opt,name=write_truncated,json=writeTruncated,proto3" json:"write_truncated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SocketBufferedTrace) Reset() {
	*x = SocketBufferedTrace{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketBufferedTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketBufferedTrace) ProtoMessage() {}

func (x *SocketBufferedTrace) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketBufferedTrace.ProtoReflect.Descriptor instead.
func (*SocketBufferedTrace) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{1}
}

func (x *SocketBufferedTrace) GetTraceId() uint64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *SocketBufferedTrace) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *SocketBufferedTrace) GetEvents() []*SocketEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SocketBufferedTrace) GetReadTruncated() bool {
	if x != nil {
		return x.ReadTruncated
	}
	return false
}

func (x *SocketBufferedTrace) GetWriteTruncated() bool {
	if x != nil {
		return x.WriteTruncated
	}
	return false
}

// A message for the sequence of observed events
type SocketEvents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*SocketEvent         `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketEvents) Reset() {
	*x = SocketEvents{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvents) ProtoMessage() {}

func (x *SocketEvents) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvents.ProtoReflect.Descriptor instead.
func (*SocketEvents) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{2}
}

func (x *SocketEvents) GetEvents() []*SocketEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// A streamed socket trace segment. Multiple segments make up a full trace.
type SocketStreamedTraceSegment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
	// for long term stable uniqueness. Matches connection IDs used in Envoy logs.
	TraceId uint64 `protobuf:"varint,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// Types that are valid to be assigned to MessagePiece:
	//
	//	*SocketStreamedTraceSegment_Connection
	//	*SocketStreamedTraceSegment_Event
	//	*SocketStreamedTraceSegment_Events
	MessagePiece  isSocketStreamedTraceSegment_MessagePiece `protobuf_oneof:"message_piece"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketStreamedTraceSegment) Reset() {
	*x = SocketStreamedTraceSegment{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketStreamedTraceSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketStreamedTraceSegment) ProtoMessage() {}

func (x *SocketStreamedTraceSegment) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketStreamedTraceSegment.ProtoReflect.Descriptor instead.
func (*SocketStreamedTraceSegment) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{3}
}

func (x *SocketStreamedTraceSegment) GetTraceId() uint64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *SocketStreamedTraceSegment) GetMessagePiece() isSocketStreamedTraceSegment_MessagePiece {
	if x != nil {
		return x.MessagePiece
	}
	return nil
}

func (x *SocketStreamedTraceSegment) GetConnection() *Connection {
	if x != nil {
		if x, ok := x.MessagePiece.(*SocketStreamedTraceSegment_Connection); ok {
			return x.Connection
		}
	}
	return nil
}

func (x *SocketStreamedTraceSegment) GetEvent() *SocketEvent {
	if x != nil {
		if x, ok := x.MessagePiece.(*SocketStreamedTraceSegment_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *SocketStreamedTraceSegment) GetEvents() *SocketEvents {
	if x != nil {
		if x, ok := x.MessagePiece.(*SocketStreamedTraceSegment_Events); ok {
			return x.Events
		}
	}
	return nil
}

type isSocketStreamedTraceSegment_MessagePiece interface {
	isSocketStreamedTraceSegment_MessagePiece()
}

type SocketStreamedTraceSegment_Connection struct {
	// Connection properties.
	Connection *Connection `protobuf:"bytes,2,opt,name=connection,proto3,oneof"`
}

type SocketStreamedTraceSegment_Event struct {
	// Socket event.
	Event *SocketEvent `protobuf:"bytes,3,opt,name=event,proto3,oneof"`
}

type SocketStreamedTraceSegment_Events struct {
	// Sequence of observed events.
	Events *SocketEvents `protobuf:"bytes,4,opt,name=events,proto3,oneof"`
}

func (*SocketStreamedTraceSegment_Connection) isSocketStreamedTraceSegment_MessagePiece() {}

func (*SocketStreamedTraceSegment_Event) isSocketStreamedTraceSegment_MessagePiece() {}

func (*SocketStreamedTraceSegment_Events) isSocketStreamedTraceSegment_MessagePiece() {}

// Data read by Envoy from the transport socket.
type SocketEvent_Read struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Binary data read.
	Data          *Body `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketEvent_Read) Reset() {
	*x = SocketEvent_Read{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketEvent_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvent_Read) ProtoMessage() {}

func (x *SocketEvent_Read) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvent_Read.ProtoReflect.Descriptor instead.
func (*SocketEvent_Read) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SocketEvent_Read) GetData() *Body {
	if x != nil {
		return x.Data
	}
	return nil
}

// Data written by Envoy to the transport socket.
type SocketEvent_Write struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Binary data written.
	Data *Body `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Stream was half closed after this write.
	EndStream     bool `protobuf:"varint,2,opt,name=end_stream,json=endStream,proto3" json:"end_stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketEvent_Write) Reset() {
	*x = SocketEvent_Write{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketEvent_Write) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvent_Write) ProtoMessage() {}

func (x *SocketEvent_Write) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvent_Write.ProtoReflect.Descriptor instead.
func (*SocketEvent_Write) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SocketEvent_Write) GetData() *Body {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SocketEvent_Write) GetEndStream() bool {
	if x != nil {
		return x.EndStream
	}
	return false
}

// The connection was closed.
type SocketEvent_Closed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketEvent_Closed) Reset() {
	*x = SocketEvent_Closed{}
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketEvent_Closed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketEvent_Closed) ProtoMessage() {}

func (x *SocketEvent_Closed) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_tap_v3_transport_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketEvent_Closed.ProtoReflect.Descriptor instead.
func (*SocketEvent_Closed) Descriptor() ([]byte, []int) {
	return file_envoy_data_tap_v3_transport_proto_rawDescGZIP(), []int{0, 2}
}

var File_envoy_data_tap_v3_transport_proto protoreflect.FileDescriptor

const file_envoy_data_tap_v3_transport_proto_rawDesc = "" +
	"\n" +
	"!envoy/data/tap/v3/transport.proto\x12\x11envoy.data.tap.v3\x1a\x1eenvoy/data/tap/v3/common.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\"\xa5\x05\n" +
	"\vSocketEvent\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x129\n" +
	"\x04read\x18\x02 \x01(\v2#.envoy.data.tap.v3.SocketEvent.ReadH\x00R\x04read\x12<\n" +
	"\x05write\x18\x03 \x01(\v2$.envoy.data.tap.v3.SocketEvent.WriteH\x00R\x05write\x12?\n" +
	"\x06closed\x18\x04 \x01(\v2%.envoy.data.tap.v3.SocketEvent.ClosedH\x00R\x06closed\x12=\n" +
	"\n" +
	"connection\x18\x05 \x01(\v2\x1d.envoy.data.tap.v3.ConnectionR\n" +
	"connection\x1ac\n" +
	"\x04Read\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.envoy.data.tap.v3.BodyR\x04data:.\x9aň\x1e)\n" +
	"'envoy.data.tap.v2alpha.SocketEvent.Read\x1a\x84\x01\n" +
	"\x05Write\x12+\n" +
	"\x04data\x18\x01 \x01(\v2\x17.envoy.data.tap.v3.BodyR\x04data\x12\x1d\n" +
	"\n" +
	"end_stream\x18\x02 \x01(\bR\tendStream:/\x9aň\x1e*\n" +
	"(envoy.data.tap.v2alpha.SocketEvent.Write\x1a:\n" +
	"\x06Closed:0\x9aň\x1e+\n" +
	")envoy.data.tap.v2alpha.SocketEvent.Closed:)\x9aň\x1e$\n" +
	"\"envoy.data.tap.v2alpha.SocketEventB\x10\n" +
	"\x0eevent_selector\"\xaa\x02\n" +
	"\x13SocketBufferedTrace\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\x04R\atraceId\x12=\n" +
	"\n" +
	"connection\x18\x02 \x01(\v2\x1d.envoy.data.tap.v3.ConnectionR\n" +
	"connection\x126\n" +
	"\x06events\x18\x03 \x03(\v2\x1e.envoy.data.tap.v3.SocketEventR\x06events\x12%\n" +
	"\x0eread_truncated\x18\x04 \x01(\bR\rreadTruncated\x12'\n" +
	"\x0fwrite_truncated\x18\x05 \x01(\bR\x0ewriteTruncated:1\x9aň\x1e,\n" +
	"*envoy.data.tap.v2alpha.SocketBufferedTrace\"F\n" +
	"\fSocketEvents\x126\n" +
	"\x06events\x18\x01 \x03(\v2\x1e.envoy.data.tap.v3.SocketEventR\x06events\"\xb6\x02\n" +
	"\x1aSocketStreamedTraceSegment\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\x04R\atraceId\x12?\n" +
	"\n" +
	"connection\x18\x02 \x01(\v2\x1d.envoy.data.tap.v3.ConnectionH\x00R\n" +
	"connection\x126\n" +
	"\x05event\x18\x03 \x01(\v2\x1e.envoy.data.tap.v3.SocketEventH\x00R\x05event\x129\n" +
	"\x06events\x18\x04 \x01(\v2\x1f.envoy.data.tap.v3.SocketEventsH\x00R\x06events:8\x9aň\x1e3\n" +
	"1envoy.data.tap.v2alpha.SocketStreamedTraceSegmentB\x0f\n" +
	"\rmessage_pieceB{\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"\x1fio.envoyproxy.envoy.data.tap.v3B\x0eTransportProtoP\x01Z>github.com/envoyproxy/go-control-plane/envoy/data/tap/v3;tapv3b\x06proto3"

var (
	file_envoy_data_tap_v3_transport_proto_rawDescOnce sync.Once
	file_envoy_data_tap_v3_transport_proto_rawDescData []byte
)

func file_envoy_data_tap_v3_transport_proto_rawDescGZIP() []byte {
	file_envoy_data_tap_v3_transport_proto_rawDescOnce.Do(func() {
		file_envoy_data_tap_v3_transport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_data_tap_v3_transport_proto_rawDesc), len(file_envoy_data_tap_v3_transport_proto_rawDesc)))
	})
	return file_envoy_data_tap_v3_transport_proto_rawDescData
}

var file_envoy_data_tap_v3_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_envoy_data_tap_v3_transport_proto_goTypes = []any{
	(*SocketEvent)(nil),                // 0: envoy.data.tap.v3.SocketEvent
	(*SocketBufferedTrace)(nil),        // 1: envoy.data.tap.v3.SocketBufferedTrace
	(*SocketEvents)(nil),               // 2: envoy.data.tap.v3.SocketEvents
	(*SocketStreamedTraceSegment)(nil), // 3: envoy.data.tap.v3.SocketStreamedTraceSegment
	(*SocketEvent_Read)(nil),           // 4: envoy.data.tap.v3.SocketEvent.Read
	(*SocketEvent_Write)(nil),          // 5: envoy.data.tap.v3.SocketEvent.Write
	(*SocketEvent_Closed)(nil),         // 6: envoy.data.tap.v3.SocketEvent.Closed
	(*timestamppb.Timestamp)(nil),      // 7: google.protobuf.Timestamp
	(*Connection)(nil),                 // 8: envoy.data.tap.v3.Connection
	(*Body)(nil),                       // 9: envoy.data.tap.v3.Body
}
var file_envoy_data_tap_v3_transport_proto_depIdxs = []int32{
	7,  // 0: envoy.data.tap.v3.SocketEvent.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 1: envoy.data.tap.v3.SocketEvent.read:type_name -> envoy.data.tap.v3.SocketEvent.Read
	5,  // 2: envoy.data.tap.v3.SocketEvent.write:type_name -> envoy.data.tap.v3.SocketEvent.Write
	6,  // 3: envoy.data.tap.v3.SocketEvent.closed:type_name -> envoy.data.tap.v3.SocketEvent.Closed
	8,  // 4: envoy.data.tap.v3.SocketEvent.connection:type_name -> envoy.data.tap.v3.Connection
	8,  // 5: envoy.data.tap.v3.SocketBufferedTrace.connection:type_name -> envoy.data.tap.v3.Connection
	0,  // 6: envoy.data.tap.v3.SocketBufferedTrace.events:type_name -> envoy.data.tap.v3.SocketEvent
	0,  // 7: envoy.data.tap.v3.SocketEvents.events:type_name -> envoy.data.tap.v3.SocketEvent
	8,  // 8: envoy.data.tap.v3.SocketStreamedTraceSegment.connection:type_name -> envoy.data.tap.v3.Connection
	0,  // 9: envoy.data.tap.v3.SocketStreamedTraceSegment.event:type_name -> envoy.data.tap.v3.SocketEvent
	2,  // 10: envoy.data.tap.v3.SocketStreamedTraceSegment.events:type_name -> envoy.data.tap.v3.SocketEvents
	9,  // 11: envoy.data.tap.v3.SocketEvent.Read.data:type_name -> envoy.data.tap.v3.Body
	9,  // 12: envoy.data.tap.v3.SocketEvent.Write.data:type_name -> envoy.data.tap.v3.Body
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_envoy_data_tap_v3_transport_proto_init() }
func file_envoy_data_tap_v3_transport_proto_init() {
	if File_envoy_data_tap_v3_transport_proto != nil {
		return
	}
	file_envoy_data_tap_v3_common_proto_init()
	file_envoy_data_tap_v3_transport_proto_msgTypes[0].OneofWrappers = []any{
		(*SocketEvent_Read_)(nil),
		(*SocketEvent_Write_)(nil),
		(*SocketEvent_Closed_)(nil),
	}
	file_envoy_data_tap_v3_transport_proto_msgTypes[3].OneofWrappers = []any{
		(*SocketStreamedTraceSegment_Connection)(nil),
		(*SocketStreamedTraceSegment_Event)(nil),
		(*SocketStreamedTraceSegment_Events)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_data_tap_v3_transport_proto_rawDesc), len(file_envoy_data_tap_v3_transport_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_data_tap_v3_transport_proto_goTypes,
		DependencyIndexes: file_envoy_data_tap_v3_transport_proto_depIdxs,
		MessageInfos:      file_envoy_data_tap_v3_transport_proto_msgTypes,
	}.Build()
	File_envoy_data_tap_v3_transport_proto = out.File
	file_envoy_data_tap_v3_transport_proto_goTypes = nil
	file_envoy_data_tap_v3_transport_proto_depIdxs = nil
}
