// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/data/accesslog/v2/accesslog.proto

package accesslogv2

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HTTP version
type HTTPAccessLogEntry_HTTPVersion int32

const (
	HTTPAccessLogEntry_PROTOCOL_UNSPECIFIED HTTPAccessLogEntry_HTTPVersion = 0
	HTTPAccessLogEntry_HTTP10               HTTPAccessLogEntry_HTTPVersion = 1
	HTTPAccessLogEntry_HTTP11               HTTPAccessLogEntry_HTTPVersion = 2
	HTTPAccessLogEntry_HTTP2                HTTPAccessLogEntry_HTTPVersion = 3
	HTTPAccessLogEntry_HTTP3                HTTPAccessLogEntry_HTTPVersion = 4
)

// Enum value maps for HTTPAccessLogEntry_HTTPVersion.
var (
	HTTPAccessLogEntry_HTTPVersion_name = map[int32]string{
		0: "PROTOCOL_UNSPECIFIED",
		1: "HTTP10",
		2: "HTTP11",
		3: "HTTP2",
		4: "HTTP3",
	}
	HTTPAccessLogEntry_HTTPVersion_value = map[string]int32{
		"PROTOCOL_UNSPECIFIED": 0,
		"HTTP10":               1,
		"HTTP11":               2,
		"HTTP2":                3,
		"HTTP3":                4,
	}
)

func (x HTTPAccessLogEntry_HTTPVersion) Enum() *HTTPAccessLogEntry_HTTPVersion {
	p := new(HTTPAccessLogEntry_HTTPVersion)
	*p = x
	return p
}

func (x HTTPAccessLogEntry_HTTPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPAccessLogEntry_HTTPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[0].Descriptor()
}

func (HTTPAccessLogEntry_HTTPVersion) Type() protoreflect.EnumType {
	return &file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[0]
}

func (x HTTPAccessLogEntry_HTTPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPAccessLogEntry_HTTPVersion.Descriptor instead.
func (HTTPAccessLogEntry_HTTPVersion) EnumDescriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{1, 0}
}

// Reasons why the request was unauthorized
type ResponseFlags_Unauthorized_Reason int32

const (
	ResponseFlags_Unauthorized_REASON_UNSPECIFIED ResponseFlags_Unauthorized_Reason = 0
	// The request was denied by the external authorization service.
	ResponseFlags_Unauthorized_EXTERNAL_SERVICE ResponseFlags_Unauthorized_Reason = 1
)

// Enum value maps for ResponseFlags_Unauthorized_Reason.
var (
	ResponseFlags_Unauthorized_Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "EXTERNAL_SERVICE",
	}
	ResponseFlags_Unauthorized_Reason_value = map[string]int32{
		"REASON_UNSPECIFIED": 0,
		"EXTERNAL_SERVICE":   1,
	}
)

func (x ResponseFlags_Unauthorized_Reason) Enum() *ResponseFlags_Unauthorized_Reason {
	p := new(ResponseFlags_Unauthorized_Reason)
	*p = x
	return p
}

func (x ResponseFlags_Unauthorized_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseFlags_Unauthorized_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[1].Descriptor()
}

func (ResponseFlags_Unauthorized_Reason) Type() protoreflect.EnumType {
	return &file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[1]
}

func (x ResponseFlags_Unauthorized_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseFlags_Unauthorized_Reason.Descriptor instead.
func (ResponseFlags_Unauthorized_Reason) EnumDescriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{4, 0, 0}
}

type TLSProperties_TLSVersion int32

const (
	TLSProperties_VERSION_UNSPECIFIED TLSProperties_TLSVersion = 0
	TLSProperties_TLSv1               TLSProperties_TLSVersion = 1
	TLSProperties_TLSv1_1             TLSProperties_TLSVersion = 2
	TLSProperties_TLSv1_2             TLSProperties_TLSVersion = 3
	TLSProperties_TLSv1_3             TLSProperties_TLSVersion = 4
)

// Enum value maps for TLSProperties_TLSVersion.
var (
	TLSProperties_TLSVersion_name = map[int32]string{
		0: "VERSION_UNSPECIFIED",
		1: "TLSv1",
		2: "TLSv1_1",
		3: "TLSv1_2",
		4: "TLSv1_3",
	}
	TLSProperties_TLSVersion_value = map[string]int32{
		"VERSION_UNSPECIFIED": 0,
		"TLSv1":               1,
		"TLSv1_1":             2,
		"TLSv1_2":             3,
		"TLSv1_3":             4,
	}
)

func (x TLSProperties_TLSVersion) Enum() *TLSProperties_TLSVersion {
	p := new(TLSProperties_TLSVersion)
	*p = x
	return p
}

func (x TLSProperties_TLSVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSProperties_TLSVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[2].Descriptor()
}

func (TLSProperties_TLSVersion) Type() protoreflect.EnumType {
	return &file_envoy_data_accesslog_v2_accesslog_proto_enumTypes[2]
}

func (x TLSProperties_TLSVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSProperties_TLSVersion.Descriptor instead.
func (TLSProperties_TLSVersion) EnumDescriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{5, 0}
}

type TCPAccessLogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Common properties shared by all Envoy access logs.
	CommonProperties *AccessLogCommon `protobuf:"bytes,1,opt,name=common_properties,json=commonProperties,proto3" json:"common_properties,omitempty"`
	// Properties of the TCP connection.
	ConnectionProperties *ConnectionProperties `protobuf:"bytes,2,opt,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TCPAccessLogEntry) Reset() {
	*x = TCPAccessLogEntry{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPAccessLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPAccessLogEntry) ProtoMessage() {}

func (x *TCPAccessLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPAccessLogEntry.ProtoReflect.Descriptor instead.
func (*TCPAccessLogEntry) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{0}
}

func (x *TCPAccessLogEntry) GetCommonProperties() *AccessLogCommon {
	if x != nil {
		return x.CommonProperties
	}
	return nil
}

func (x *TCPAccessLogEntry) GetConnectionProperties() *ConnectionProperties {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

type HTTPAccessLogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Common properties shared by all Envoy access logs.
	CommonProperties *AccessLogCommon               `protobuf:"bytes,1,opt,name=common_properties,json=commonProperties,proto3" json:"common_properties,omitempty"`
	ProtocolVersion  HTTPAccessLogEntry_HTTPVersion `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3,enum=envoy.data.accesslog.v2.HTTPAccessLogEntry_HTTPVersion" json:"protocol_version,omitempty"`
	// Description of the incoming HTTP request.
	Request *HTTPRequestProperties `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Description of the outgoing HTTP response.
	Response      *HTTPResponseProperties `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPAccessLogEntry) Reset() {
	*x = HTTPAccessLogEntry{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPAccessLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPAccessLogEntry) ProtoMessage() {}

func (x *HTTPAccessLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPAccessLogEntry.ProtoReflect.Descriptor instead.
func (*HTTPAccessLogEntry) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPAccessLogEntry) GetCommonProperties() *AccessLogCommon {
	if x != nil {
		return x.CommonProperties
	}
	return nil
}

func (x *HTTPAccessLogEntry) GetProtocolVersion() HTTPAccessLogEntry_HTTPVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return HTTPAccessLogEntry_PROTOCOL_UNSPECIFIED
}

func (x *HTTPAccessLogEntry) GetRequest() *HTTPRequestProperties {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *HTTPAccessLogEntry) GetResponse() *HTTPResponseProperties {
	if x != nil {
		return x.Response
	}
	return nil
}

// Defines fields for a connection
type ConnectionProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of bytes received from downstream.
	ReceivedBytes uint64 `protobuf:"varint,1,opt,name=received_bytes,json=receivedBytes,proto3" json:"received_bytes,omitempty"`
	// Number of bytes sent to downstream.
	SentBytes     uint64 `protobuf:"varint,2,opt,name=sent_bytes,json=sentBytes,proto3" json:"sent_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionProperties) Reset() {
	*x = ConnectionProperties{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionProperties) ProtoMessage() {}

func (x *ConnectionProperties) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionProperties.ProtoReflect.Descriptor instead.
func (*ConnectionProperties) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectionProperties) GetReceivedBytes() uint64 {
	if x != nil {
		return x.ReceivedBytes
	}
	return 0
}

func (x *ConnectionProperties) GetSentBytes() uint64 {
	if x != nil {
		return x.SentBytes
	}
	return 0
}

// Defines fields that are shared by all Envoy access logs.
// [#next-free-field: 22]
type AccessLogCommon struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [#not-implemented-hide:]
	// This field indicates the rate at which this log entry was sampled.
	// Valid range is (0.0, 1.0].
	SampleRate float64 `protobuf:"fixed64,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	// This field is the remote/origin address on which the request from the user was received.
	// Note: This may not be the physical peer. E.g, if the remote address is inferred from for
	// example the x-forwarder-for header, proxy protocol, etc.
	DownstreamRemoteAddress *core.Address `protobuf:"bytes,2,opt,name=downstream_remote_address,json=downstreamRemoteAddress,proto3" json:"downstream_remote_address,omitempty"`
	// This field is the local/destination address on which the request from the user was received.
	DownstreamLocalAddress *core.Address `protobuf:"bytes,3,opt,name=downstream_local_address,json=downstreamLocalAddress,proto3" json:"downstream_local_address,omitempty"`
	// If the connection is secure,S this field will contain TLS properties.
	TlsProperties *TLSProperties `protobuf:"bytes,4,opt,name=tls_properties,json=tlsProperties,proto3" json:"tls_properties,omitempty"`
	// The time that Envoy started servicing this request. This is effectively the time that the first
	// downstream byte is received.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Interval between the first downstream byte received and the last
	// downstream byte received (i.e. time it takes to receive a request).
	TimeToLastRxByte *durationpb.Duration `protobuf:"bytes,6,opt,name=time_to_last_rx_byte,json=timeToLastRxByte,proto3" json:"time_to_last_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the first upstream byte sent. There may
	// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
	// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
	// not accounting for kernel socket buffer time, etc.
	TimeToFirstUpstreamTxByte *durationpb.Duration `protobuf:"bytes,7,opt,name=time_to_first_upstream_tx_byte,json=timeToFirstUpstreamTxByte,proto3" json:"time_to_first_upstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the last upstream byte sent. There may
	// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
	// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
	// not accounting for kernel socket buffer time, etc.
	TimeToLastUpstreamTxByte *durationpb.Duration `protobuf:"bytes,8,opt,name=time_to_last_upstream_tx_byte,json=timeToLastUpstreamTxByte,proto3" json:"time_to_last_upstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the first upstream
	// byte received (i.e. time it takes to start receiving a response).
	TimeToFirstUpstreamRxByte *durationpb.Duration `protobuf:"bytes,9,opt,name=time_to_first_upstream_rx_byte,json=timeToFirstUpstreamRxByte,proto3" json:"time_to_first_upstream_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the last upstream
	// byte received (i.e. time it takes to receive a complete response).
	TimeToLastUpstreamRxByte *durationpb.Duration `protobuf:"bytes,10,opt,name=time_to_last_upstream_rx_byte,json=timeToLastUpstreamRxByte,proto3" json:"time_to_last_upstream_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the first downstream byte sent.
	// There may be a considerable delta between the *time_to_first_upstream_rx_byte* and this field
	// due to filters. Additionally, the same caveats apply as documented in
	// *time_to_last_downstream_tx_byte* about not accounting for kernel socket buffer time, etc.
	TimeToFirstDownstreamTxByte *durationpb.Duration `protobuf:"bytes,11,opt,name=time_to_first_downstream_tx_byte,json=timeToFirstDownstreamTxByte,proto3" json:"time_to_first_downstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the last downstream byte sent.
	// Depending on protocol, buffering, windowing, filters, etc. there may be a considerable delta
	// between *time_to_last_upstream_rx_byte* and this field. Note also that this is an approximate
	// time. In the current implementation it does not include kernel socket buffer time. In the
	// current implementation it also does not include send window buffering inside the HTTP/2 codec.
	// In the future it is likely that work will be done to make this duration more accurate.
	TimeToLastDownstreamTxByte *durationpb.Duration `protobuf:"bytes,12,opt,name=time_to_last_downstream_tx_byte,json=timeToLastDownstreamTxByte,proto3" json:"time_to_last_downstream_tx_byte,omitempty"`
	// The upstream remote/destination address that handles this exchange. This does not include
	// retries.
	UpstreamRemoteAddress *core.Address `protobuf:"bytes,13,opt,name=upstream_remote_address,json=upstreamRemoteAddress,proto3" json:"upstream_remote_address,omitempty"`
	// The upstream local/origin address that handles this exchange. This does not include retries.
	UpstreamLocalAddress *core.Address `protobuf:"bytes,14,opt,name=upstream_local_address,json=upstreamLocalAddress,proto3" json:"upstream_local_address,omitempty"`
	// The upstream cluster that *upstream_remote_address* belongs to.
	UpstreamCluster string `protobuf:"bytes,15,opt,name=upstream_cluster,json=upstreamCluster,proto3" json:"upstream_cluster,omitempty"`
	// Flags indicating occurrences during request/response processing.
	ResponseFlags *ResponseFlags `protobuf:"bytes,16,opt,name=response_flags,json=responseFlags,proto3" json:"response_flags,omitempty"`
	// All metadata encountered during request processing, including endpoint
	// selection.
	//
	// This can be used to associate IDs attached to the various configurations
	// used to process this request with the access log entry. For example, a
	// route created from a higher level forwarding rule with some ID can place
	// that ID in this field and cross reference later. It can also be used to
	// determine if a canary endpoint was used or not.
	Metadata *core.Metadata `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If upstream connection failed due to transport socket (e.g. TLS handshake), provides the
	// failure reason from the transport socket. The format of this field depends on the configured
	// upstream transport socket. Common TLS failures are in
	// :ref:`TLS trouble shooting <arch_overview_ssl_trouble_shooting>`.
	UpstreamTransportFailureReason string `protobuf:"bytes,18,opt,name=upstream_transport_failure_reason,json=upstreamTransportFailureReason,proto3" json:"upstream_transport_failure_reason,omitempty"`
	// The name of the route
	RouteName string `protobuf:"bytes,19,opt,name=route_name,json=routeName,proto3" json:"route_name,omitempty"`
	// This field is the downstream direct remote address on which the request from the user was
	// received. Note: This is always the physical peer, even if the remote address is inferred from
	// for example the x-forwarder-for header, proxy protocol, etc.
	DownstreamDirectRemoteAddress *core.Address `protobuf:"bytes,20,opt,name=downstream_direct_remote_address,json=downstreamDirectRemoteAddress,proto3" json:"downstream_direct_remote_address,omitempty"`
	// Map of filter state in stream info that have been configured to be logged. If the filter
	// state serialized to any message other than `google.protobuf.Any` it will be packed into
	// `google.protobuf.Any`.
	FilterStateObjects map[string]*anypb.Any `protobuf:"bytes,21,rep,name=filter_state_objects,json=filterStateObjects,proto3" json:"filter_state_objects,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AccessLogCommon) Reset() {
	*x = AccessLogCommon{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLogCommon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLogCommon) ProtoMessage() {}

func (x *AccessLogCommon) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLogCommon.ProtoReflect.Descriptor instead.
func (*AccessLogCommon) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{3}
}

func (x *AccessLogCommon) GetSampleRate() float64 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AccessLogCommon) GetDownstreamRemoteAddress() *core.Address {
	if x != nil {
		return x.DownstreamRemoteAddress
	}
	return nil
}

func (x *AccessLogCommon) GetDownstreamLocalAddress() *core.Address {
	if x != nil {
		return x.DownstreamLocalAddress
	}
	return nil
}

func (x *AccessLogCommon) GetTlsProperties() *TLSProperties {
	if x != nil {
		return x.TlsProperties
	}
	return nil
}

func (x *AccessLogCommon) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToLastRxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToLastRxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToFirstUpstreamTxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToFirstUpstreamTxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToLastUpstreamTxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToLastUpstreamTxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToFirstUpstreamRxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToFirstUpstreamRxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToLastUpstreamRxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToLastUpstreamRxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToFirstDownstreamTxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToFirstDownstreamTxByte
	}
	return nil
}

func (x *AccessLogCommon) GetTimeToLastDownstreamTxByte() *durationpb.Duration {
	if x != nil {
		return x.TimeToLastDownstreamTxByte
	}
	return nil
}

func (x *AccessLogCommon) GetUpstreamRemoteAddress() *core.Address {
	if x != nil {
		return x.UpstreamRemoteAddress
	}
	return nil
}

func (x *AccessLogCommon) GetUpstreamLocalAddress() *core.Address {
	if x != nil {
		return x.UpstreamLocalAddress
	}
	return nil
}

func (x *AccessLogCommon) GetUpstreamCluster() string {
	if x != nil {
		return x.UpstreamCluster
	}
	return ""
}

func (x *AccessLogCommon) GetResponseFlags() *ResponseFlags {
	if x != nil {
		return x.ResponseFlags
	}
	return nil
}

func (x *AccessLogCommon) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccessLogCommon) GetUpstreamTransportFailureReason() string {
	if x != nil {
		return x.UpstreamTransportFailureReason
	}
	return ""
}

func (x *AccessLogCommon) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *AccessLogCommon) GetDownstreamDirectRemoteAddress() *core.Address {
	if x != nil {
		return x.DownstreamDirectRemoteAddress
	}
	return nil
}

func (x *AccessLogCommon) GetFilterStateObjects() map[string]*anypb.Any {
	if x != nil {
		return x.FilterStateObjects
	}
	return nil
}

// Flags indicating occurrences during request/response processing.
// [#next-free-field: 20]
type ResponseFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates local server healthcheck failed.
	FailedLocalHealthcheck bool `protobuf:"varint,1,opt,name=failed_local_healthcheck,json=failedLocalHealthcheck,proto3" json:"failed_local_healthcheck,omitempty"`
	// Indicates there was no healthy upstream.
	NoHealthyUpstream bool `protobuf:"varint,2,opt,name=no_healthy_upstream,json=noHealthyUpstream,proto3" json:"no_healthy_upstream,omitempty"`
	// Indicates an there was an upstream request timeout.
	UpstreamRequestTimeout bool `protobuf:"varint,3,opt,name=upstream_request_timeout,json=upstreamRequestTimeout,proto3" json:"upstream_request_timeout,omitempty"`
	// Indicates local codec level reset was sent on the stream.
	LocalReset bool `protobuf:"varint,4,opt,name=local_reset,json=localReset,proto3" json:"local_reset,omitempty"`
	// Indicates remote codec level reset was received on the stream.
	UpstreamRemoteReset bool `protobuf:"varint,5,opt,name=upstream_remote_reset,json=upstreamRemoteReset,proto3" json:"upstream_remote_reset,omitempty"`
	// Indicates there was a local reset by a connection pool due to an initial connection failure.
	UpstreamConnectionFailure bool `protobuf:"varint,6,opt,name=upstream_connection_failure,json=upstreamConnectionFailure,proto3" json:"upstream_connection_failure,omitempty"`
	// Indicates the stream was reset due to an upstream connection termination.
	UpstreamConnectionTermination bool `protobuf:"varint,7,opt,name=upstream_connection_termination,json=upstreamConnectionTermination,proto3" json:"upstream_connection_termination,omitempty"`
	// Indicates the stream was reset because of a resource overflow.
	UpstreamOverflow bool `protobuf:"varint,8,opt,name=upstream_overflow,json=upstreamOverflow,proto3" json:"upstream_overflow,omitempty"`
	// Indicates no route was found for the request.
	NoRouteFound bool `protobuf:"varint,9,opt,name=no_route_found,json=noRouteFound,proto3" json:"no_route_found,omitempty"`
	// Indicates that the request was delayed before proxying.
	DelayInjected bool `protobuf:"varint,10,opt,name=delay_injected,json=delayInjected,proto3" json:"delay_injected,omitempty"`
	// Indicates that the request was aborted with an injected error code.
	FaultInjected bool `protobuf:"varint,11,opt,name=fault_injected,json=faultInjected,proto3" json:"fault_injected,omitempty"`
	// Indicates that the request was rate-limited locally.
	RateLimited bool `protobuf:"varint,12,opt,name=rate_limited,json=rateLimited,proto3" json:"rate_limited,omitempty"`
	// Indicates if the request was deemed unauthorized and the reason for it.
	UnauthorizedDetails *ResponseFlags_Unauthorized `protobuf:"bytes,13,opt,name=unauthorized_details,json=unauthorizedDetails,proto3" json:"unauthorized_details,omitempty"`
	// Indicates that the request was rejected because there was an error in rate limit service.
	RateLimitServiceError bool `protobuf:"varint,14,opt,name=rate_limit_service_error,json=rateLimitServiceError,proto3" json:"rate_limit_service_error,omitempty"`
	// Indicates the stream was reset due to a downstream connection termination.
	DownstreamConnectionTermination bool `protobuf:"varint,15,opt,name=downstream_connection_termination,json=downstreamConnectionTermination,proto3" json:"downstream_connection_termination,omitempty"`
	// Indicates that the upstream retry limit was exceeded, resulting in a downstream error.
	UpstreamRetryLimitExceeded bool `protobuf:"varint,16,opt,name=upstream_retry_limit_exceeded,json=upstreamRetryLimitExceeded,proto3" json:"upstream_retry_limit_exceeded,omitempty"`
	// Indicates that the stream idle timeout was hit, resulting in a downstream 408.
	StreamIdleTimeout bool `protobuf:"varint,17,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3" json:"stream_idle_timeout,omitempty"`
	// Indicates that the request was rejected because an envoy request header failed strict
	// validation.
	InvalidEnvoyRequestHeaders bool `protobuf:"varint,18,opt,name=invalid_envoy_request_headers,json=invalidEnvoyRequestHeaders,proto3" json:"invalid_envoy_request_headers,omitempty"`
	// Indicates there was an HTTP protocol error on the downstream request.
	DownstreamProtocolError bool `protobuf:"varint,19,opt,name=downstream_protocol_error,json=downstreamProtocolError,proto3" json:"downstream_protocol_error,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ResponseFlags) Reset() {
	*x = ResponseFlags{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlags) ProtoMessage() {}

func (x *ResponseFlags) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlags.ProtoReflect.Descriptor instead.
func (*ResponseFlags) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseFlags) GetFailedLocalHealthcheck() bool {
	if x != nil {
		return x.FailedLocalHealthcheck
	}
	return false
}

func (x *ResponseFlags) GetNoHealthyUpstream() bool {
	if x != nil {
		return x.NoHealthyUpstream
	}
	return false
}

func (x *ResponseFlags) GetUpstreamRequestTimeout() bool {
	if x != nil {
		return x.UpstreamRequestTimeout
	}
	return false
}

func (x *ResponseFlags) GetLocalReset() bool {
	if x != nil {
		return x.LocalReset
	}
	return false
}

func (x *ResponseFlags) GetUpstreamRemoteReset() bool {
	if x != nil {
		return x.UpstreamRemoteReset
	}
	return false
}

func (x *ResponseFlags) GetUpstreamConnectionFailure() bool {
	if x != nil {
		return x.UpstreamConnectionFailure
	}
	return false
}

func (x *ResponseFlags) GetUpstreamConnectionTermination() bool {
	if x != nil {
		return x.UpstreamConnectionTermination
	}
	return false
}

func (x *ResponseFlags) GetUpstreamOverflow() bool {
	if x != nil {
		return x.UpstreamOverflow
	}
	return false
}

func (x *ResponseFlags) GetNoRouteFound() bool {
	if x != nil {
		return x.NoRouteFound
	}
	return false
}

func (x *ResponseFlags) GetDelayInjected() bool {
	if x != nil {
		return x.DelayInjected
	}
	return false
}

func (x *ResponseFlags) GetFaultInjected() bool {
	if x != nil {
		return x.FaultInjected
	}
	return false
}

func (x *ResponseFlags) GetRateLimited() bool {
	if x != nil {
		return x.RateLimited
	}
	return false
}

func (x *ResponseFlags) GetUnauthorizedDetails() *ResponseFlags_Unauthorized {
	if x != nil {
		return x.UnauthorizedDetails
	}
	return nil
}

func (x *ResponseFlags) GetRateLimitServiceError() bool {
	if x != nil {
		return x.RateLimitServiceError
	}
	return false
}

func (x *ResponseFlags) GetDownstreamConnectionTermination() bool {
	if x != nil {
		return x.DownstreamConnectionTermination
	}
	return false
}

func (x *ResponseFlags) GetUpstreamRetryLimitExceeded() bool {
	if x != nil {
		return x.UpstreamRetryLimitExceeded
	}
	return false
}

func (x *ResponseFlags) GetStreamIdleTimeout() bool {
	if x != nil {
		return x.StreamIdleTimeout
	}
	return false
}

func (x *ResponseFlags) GetInvalidEnvoyRequestHeaders() bool {
	if x != nil {
		return x.InvalidEnvoyRequestHeaders
	}
	return false
}

func (x *ResponseFlags) GetDownstreamProtocolError() bool {
	if x != nil {
		return x.DownstreamProtocolError
	}
	return false
}

// Properties of a negotiated TLS connection.
// [#next-free-field: 7]
type TLSProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of TLS that was negotiated.
	TlsVersion TLSProperties_TLSVersion `protobuf:"varint,1,opt,name=tls_version,json=tlsVersion,proto3,enum=envoy.data.accesslog.v2.TLSProperties_TLSVersion" json:"tls_version,omitempty"`
	// TLS cipher suite negotiated during handshake. The value is a
	// four-digit hex code defined by the IANA TLS Cipher Suite Registry
	// (e.g. “009C“ for “TLS_RSA_WITH_AES_128_GCM_SHA256“).
	//
	// Here it is expressed as an integer.
	TlsCipherSuite *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=tls_cipher_suite,json=tlsCipherSuite,proto3" json:"tls_cipher_suite,omitempty"`
	// SNI hostname from handshake.
	TlsSniHostname string `protobuf:"bytes,3,opt,name=tls_sni_hostname,json=tlsSniHostname,proto3" json:"tls_sni_hostname,omitempty"`
	// Properties of the local certificate used to negotiate TLS.
	LocalCertificateProperties *TLSProperties_CertificateProperties `protobuf:"bytes,4,opt,name=local_certificate_properties,json=localCertificateProperties,proto3" json:"local_certificate_properties,omitempty"`
	// Properties of the peer certificate used to negotiate TLS.
	PeerCertificateProperties *TLSProperties_CertificateProperties `protobuf:"bytes,5,opt,name=peer_certificate_properties,json=peerCertificateProperties,proto3" json:"peer_certificate_properties,omitempty"`
	// The TLS session ID.
	TlsSessionId  string `protobuf:"bytes,6,opt,name=tls_session_id,json=tlsSessionId,proto3" json:"tls_session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSProperties) Reset() {
	*x = TLSProperties{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSProperties) ProtoMessage() {}

func (x *TLSProperties) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSProperties.ProtoReflect.Descriptor instead.
func (*TLSProperties) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{5}
}

func (x *TLSProperties) GetTlsVersion() TLSProperties_TLSVersion {
	if x != nil {
		return x.TlsVersion
	}
	return TLSProperties_VERSION_UNSPECIFIED
}

func (x *TLSProperties) GetTlsCipherSuite() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TlsCipherSuite
	}
	return nil
}

func (x *TLSProperties) GetTlsSniHostname() string {
	if x != nil {
		return x.TlsSniHostname
	}
	return ""
}

func (x *TLSProperties) GetLocalCertificateProperties() *TLSProperties_CertificateProperties {
	if x != nil {
		return x.LocalCertificateProperties
	}
	return nil
}

func (x *TLSProperties) GetPeerCertificateProperties() *TLSProperties_CertificateProperties {
	if x != nil {
		return x.PeerCertificateProperties
	}
	return nil
}

func (x *TLSProperties) GetTlsSessionId() string {
	if x != nil {
		return x.TlsSessionId
	}
	return ""
}

// [#next-free-field: 14]
type HTTPRequestProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The request method (RFC 7231/2616).
	RequestMethod core.RequestMethod `protobuf:"varint,1,opt,name=request_method,json=requestMethod,proto3,enum=envoy.api.v2.core.RequestMethod" json:"request_method,omitempty"`
	// The scheme portion of the incoming request URI.
	Scheme string `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// HTTP/2 “:authority“ or HTTP/1.1 “Host“ header value.
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	// The port of the incoming request URI
	// (unused currently, as port is composed onto authority).
	Port *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// The path portion from the incoming request URI.
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// Value of the “User-Agent“ request header.
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// Value of the “Referer“ request header.
	Referer string `protobuf:"bytes,7,opt,name=referer,proto3" json:"referer,omitempty"`
	// Value of the “X-Forwarded-For“ request header.
	ForwardedFor string `protobuf:"bytes,8,opt,name=forwarded_for,json=forwardedFor,proto3" json:"forwarded_for,omitempty"`
	// Value of the “X-Request-Id“ request header
	//
	// This header is used by Envoy to uniquely identify a request.
	// It will be generated for all external requests and internal requests that
	// do not already have a request ID.
	RequestId string `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Value of the “X-Envoy-Original-Path“ request header.
	OriginalPath string `protobuf:"bytes,10,opt,name=original_path,json=originalPath,proto3" json:"original_path,omitempty"`
	// Size of the HTTP request headers in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	RequestHeadersBytes uint64 `protobuf:"varint,11,opt,name=request_headers_bytes,json=requestHeadersBytes,proto3" json:"request_headers_bytes,omitempty"`
	// Size of the HTTP request body in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	RequestBodyBytes uint64 `protobuf:"varint,12,opt,name=request_body_bytes,json=requestBodyBytes,proto3" json:"request_body_bytes,omitempty"`
	// Map of additional headers that have been configured to be logged.
	RequestHeaders map[string]string `protobuf:"bytes,13,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HTTPRequestProperties) Reset() {
	*x = HTTPRequestProperties{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequestProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequestProperties) ProtoMessage() {}

func (x *HTTPRequestProperties) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequestProperties.ProtoReflect.Descriptor instead.
func (*HTTPRequestProperties) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{6}
}

func (x *HTTPRequestProperties) GetRequestMethod() core.RequestMethod {
	if x != nil {
		return x.RequestMethod
	}
	return core.RequestMethod(0)
}

func (x *HTTPRequestProperties) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *HTTPRequestProperties) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *HTTPRequestProperties) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *HTTPRequestProperties) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPRequestProperties) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HTTPRequestProperties) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *HTTPRequestProperties) GetForwardedFor() string {
	if x != nil {
		return x.ForwardedFor
	}
	return ""
}

func (x *HTTPRequestProperties) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HTTPRequestProperties) GetOriginalPath() string {
	if x != nil {
		return x.OriginalPath
	}
	return ""
}

func (x *HTTPRequestProperties) GetRequestHeadersBytes() uint64 {
	if x != nil {
		return x.RequestHeadersBytes
	}
	return 0
}

func (x *HTTPRequestProperties) GetRequestBodyBytes() uint64 {
	if x != nil {
		return x.RequestBodyBytes
	}
	return 0
}

func (x *HTTPRequestProperties) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

// [#next-free-field: 7]
type HTTPResponseProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP response code returned by Envoy.
	ResponseCode *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Size of the HTTP response headers in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	ResponseHeadersBytes uint64 `protobuf:"varint,2,opt,name=response_headers_bytes,json=responseHeadersBytes,proto3" json:"response_headers_bytes,omitempty"`
	// Size of the HTTP response body in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	ResponseBodyBytes uint64 `protobuf:"varint,3,opt,name=response_body_bytes,json=responseBodyBytes,proto3" json:"response_body_bytes,omitempty"`
	// Map of additional headers configured to be logged.
	ResponseHeaders map[string]string `protobuf:"bytes,4,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map of trailers configured to be logged.
	ResponseTrailers map[string]string `protobuf:"bytes,5,rep,name=response_trailers,json=responseTrailers,proto3" json:"response_trailers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The HTTP response code details.
	ResponseCodeDetails string `protobuf:"bytes,6,opt,name=response_code_details,json=responseCodeDetails,proto3" json:"response_code_details,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HTTPResponseProperties) Reset() {
	*x = HTTPResponseProperties{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseProperties) ProtoMessage() {}

func (x *HTTPResponseProperties) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseProperties.ProtoReflect.Descriptor instead.
func (*HTTPResponseProperties) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{7}
}

func (x *HTTPResponseProperties) GetResponseCode() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ResponseCode
	}
	return nil
}

func (x *HTTPResponseProperties) GetResponseHeadersBytes() uint64 {
	if x != nil {
		return x.ResponseHeadersBytes
	}
	return 0
}

func (x *HTTPResponseProperties) GetResponseBodyBytes() uint64 {
	if x != nil {
		return x.ResponseBodyBytes
	}
	return 0
}

func (x *HTTPResponseProperties) GetResponseHeaders() map[string]string {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *HTTPResponseProperties) GetResponseTrailers() map[string]string {
	if x != nil {
		return x.ResponseTrailers
	}
	return nil
}

func (x *HTTPResponseProperties) GetResponseCodeDetails() string {
	if x != nil {
		return x.ResponseCodeDetails
	}
	return ""
}

type ResponseFlags_Unauthorized struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Reason        ResponseFlags_Unauthorized_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=envoy.data.accesslog.v2.ResponseFlags_Unauthorized_Reason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseFlags_Unauthorized) Reset() {
	*x = ResponseFlags_Unauthorized{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFlags_Unauthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlags_Unauthorized) ProtoMessage() {}

func (x *ResponseFlags_Unauthorized) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlags_Unauthorized.ProtoReflect.Descriptor instead.
func (*ResponseFlags_Unauthorized) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ResponseFlags_Unauthorized) GetReason() ResponseFlags_Unauthorized_Reason {
	if x != nil {
		return x.Reason
	}
	return ResponseFlags_Unauthorized_REASON_UNSPECIFIED
}

type TLSProperties_CertificateProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SANs present in the certificate.
	SubjectAltName []*TLSProperties_CertificateProperties_SubjectAltName `protobuf:"bytes,1,rep,name=subject_alt_name,json=subjectAltName,proto3" json:"subject_alt_name,omitempty"`
	// The subject field of the certificate.
	Subject       string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSProperties_CertificateProperties) Reset() {
	*x = TLSProperties_CertificateProperties{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSProperties_CertificateProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSProperties_CertificateProperties) ProtoMessage() {}

func (x *TLSProperties_CertificateProperties) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSProperties_CertificateProperties.ProtoReflect.Descriptor instead.
func (*TLSProperties_CertificateProperties) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TLSProperties_CertificateProperties) GetSubjectAltName() []*TLSProperties_CertificateProperties_SubjectAltName {
	if x != nil {
		return x.SubjectAltName
	}
	return nil
}

func (x *TLSProperties_CertificateProperties) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

type TLSProperties_CertificateProperties_SubjectAltName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to San:
	//
	//	*TLSProperties_CertificateProperties_SubjectAltName_Uri
	//	*TLSProperties_CertificateProperties_SubjectAltName_Dns
	San           isTLSProperties_CertificateProperties_SubjectAltName_San `protobuf_oneof:"san"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLSProperties_CertificateProperties_SubjectAltName) Reset() {
	*x = TLSProperties_CertificateProperties_SubjectAltName{}
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSProperties_CertificateProperties_SubjectAltName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSProperties_CertificateProperties_SubjectAltName) ProtoMessage() {}

func (x *TLSProperties_CertificateProperties_SubjectAltName) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSProperties_CertificateProperties_SubjectAltName.ProtoReflect.Descriptor instead.
func (*TLSProperties_CertificateProperties_SubjectAltName) Descriptor() ([]byte, []int) {
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *TLSProperties_CertificateProperties_SubjectAltName) GetSan() isTLSProperties_CertificateProperties_SubjectAltName_San {
	if x != nil {
		return x.San
	}
	return nil
}

func (x *TLSProperties_CertificateProperties_SubjectAltName) GetUri() string {
	if x != nil {
		if x, ok := x.San.(*TLSProperties_CertificateProperties_SubjectAltName_Uri); ok {
			return x.Uri
		}
	}
	return ""
}

func (x *TLSProperties_CertificateProperties_SubjectAltName) GetDns() string {
	if x != nil {
		if x, ok := x.San.(*TLSProperties_CertificateProperties_SubjectAltName_Dns); ok {
			return x.Dns
		}
	}
	return ""
}

type isTLSProperties_CertificateProperties_SubjectAltName_San interface {
	isTLSProperties_CertificateProperties_SubjectAltName_San()
}

type TLSProperties_CertificateProperties_SubjectAltName_Uri struct {
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type TLSProperties_CertificateProperties_SubjectAltName_Dns struct {
	// [#not-implemented-hide:]
	Dns string `protobuf:"bytes,2,opt,name=dns,proto3,oneof"`
}

func (*TLSProperties_CertificateProperties_SubjectAltName_Uri) isTLSProperties_CertificateProperties_SubjectAltName_San() {
}

func (*TLSProperties_CertificateProperties_SubjectAltName_Dns) isTLSProperties_CertificateProperties_SubjectAltName_San() {
}

var File_envoy_data_accesslog_v2_accesslog_proto protoreflect.FileDescriptor

const file_envoy_data_accesslog_v2_accesslog_proto_rawDesc = "" +
	"\n" +
	"'envoy/data/accesslog/v2/accesslog.proto\x12\x17envoy.data.accesslog.v2\x1a\x1fenvoy/api/v2/core/address.proto\x1a\x1cenvoy/api/v2/core/base.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xce\x01\n" +
	"\x11TCPAccessLogEntry\x12U\n" +
	"\x11common_properties\x18\x01 \x01(\v2(.envoy.data.accesslog.v2.AccessLogCommonR\x10commonProperties\x12b\n" +
	"\x15connection_properties\x18\x02 \x01(\v2-.envoy.data.accesslog.v2.ConnectionPropertiesR\x14connectionProperties\"\xbd\x03\n" +
	"\x12HTTPAccessLogEntry\x12U\n" +
	"\x11common_properties\x18\x01 \x01(\v2(.envoy.data.accesslog.v2.AccessLogCommonR\x10commonProperties\x12b\n" +
	"\x10protocol_version\x18\x02 \x01(\x0e27.envoy.data.accesslog.v2.HTTPAccessLogEntry.HTTPVersionR\x0fprotocolVersion\x12H\n" +
	"\arequest\x18\x03 \x01(\v2..envoy.data.accesslog.v2.HTTPRequestPropertiesR\arequest\x12K\n" +
	"\bresponse\x18\x04 \x01(\v2/.envoy.data.accesslog.v2.HTTPResponsePropertiesR\bresponse\"U\n" +
	"\vHTTPVersion\x12\x18\n" +
	"\x14PROTOCOL_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06HTTP10\x10\x01\x12\n" +
	"\n" +
	"\x06HTTP11\x10\x02\x12\t\n" +
	"\x05HTTP2\x10\x03\x12\t\n" +
	"\x05HTTP3\x10\x04\"\\\n" +
	"\x14ConnectionProperties\x12%\n" +
	"\x0ereceived_bytes\x18\x01 \x01(\x04R\rreceivedBytes\x12\x1d\n" +
	"\n" +
	"sent_bytes\x18\x02 \x01(\x04R\tsentBytes\"\xfd\r\n" +
	"\x0fAccessLogCommon\x128\n" +
	"\vsample_rate\x18\x01 \x01(\x01B\x17\xfaB\x14\x12\x12\x19\x00\x00\x00\x00\x00\x00\xf0?!\x00\x00\x00\x00\x00\x00\x00\x00R\n" +
	"sampleRate\x12V\n" +
	"\x19downstream_remote_address\x18\x02 \x01(\v2\x1a.envoy.api.v2.core.AddressR\x17downstreamRemoteAddress\x12T\n" +
	"\x18downstream_local_address\x18\x03 \x01(\v2\x1a.envoy.api.v2.core.AddressR\x16downstreamLocalAddress\x12M\n" +
	"\x0etls_properties\x18\x04 \x01(\v2&.envoy.data.accesslog.v2.TLSPropertiesR\rtlsProperties\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12I\n" +
	"\x14time_to_last_rx_byte\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x10timeToLastRxByte\x12\\\n" +
	"\x1etime_to_first_upstream_tx_byte\x18\a \x01(\v2\x19.google.protobuf.DurationR\x19timeToFirstUpstreamTxByte\x12Z\n" +
	"\x1dtime_to_last_upstream_tx_byte\x18\b \x01(\v2\x19.google.protobuf.DurationR\x18timeToLastUpstreamTxByte\x12\\\n" +
	"\x1etime_to_first_upstream_rx_byte\x18\t \x01(\v2\x19.google.protobuf.DurationR\x19timeToFirstUpstreamRxByte\x12Z\n" +
	"\x1dtime_to_last_upstream_rx_byte\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\x18timeToLastUpstreamRxByte\x12`\n" +
	" time_to_first_downstream_tx_byte\x18\v \x01(\v2\x19.google.protobuf.DurationR\x1btimeToFirstDownstreamTxByte\x12^\n" +
	"\x1ftime_to_last_downstream_tx_byte\x18\f \x01(\v2\x19.google.protobuf.DurationR\x1atimeToLastDownstreamTxByte\x12R\n" +
	"\x17upstream_remote_address\x18\r \x01(\v2\x1a.envoy.api.v2.core.AddressR\x15upstreamRemoteAddress\x12P\n" +
	"\x16upstream_local_address\x18\x0e \x01(\v2\x1a.envoy.api.v2.core.AddressR\x14upstreamLocalAddress\x12)\n" +
	"\x10upstream_cluster\x18\x0f \x01(\tR\x0fupstreamCluster\x12M\n" +
	"\x0eresponse_flags\x18\x10 \x01(\v2&.envoy.data.accesslog.v2.ResponseFlagsR\rresponseFlags\x127\n" +
	"\bmetadata\x18\x11 \x01(\v2\x1b.envoy.api.v2.core.MetadataR\bmetadata\x12I\n" +
	"!upstream_transport_failure_reason\x18\x12 \x01(\tR\x1eupstreamTransportFailureReason\x12\x1d\n" +
	"\n" +
	"route_name\x18\x13 \x01(\tR\trouteName\x12c\n" +
	" downstream_direct_remote_address\x18\x14 \x01(\v2\x1a.envoy.api.v2.core.AddressR\x1ddownstreamDirectRemoteAddress\x12r\n" +
	"\x14filter_state_objects\x18\x15 \x03(\v2@.envoy.data.accesslog.v2.AccessLogCommon.FilterStateObjectsEntryR\x12filterStateObjects\x1a[\n" +
	"\x17FilterStateObjectsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\"\xd0\t\n" +
	"\rResponseFlags\x128\n" +
	"\x18failed_local_healthcheck\x18\x01 \x01(\bR\x16failedLocalHealthcheck\x12.\n" +
	"\x13no_healthy_upstream\x18\x02 \x01(\bR\x11noHealthyUpstream\x128\n" +
	"\x18upstream_request_timeout\x18\x03 \x01(\bR\x16upstreamRequestTimeout\x12\x1f\n" +
	"\vlocal_reset\x18\x04 \x01(\bR\n" +
	"localReset\x122\n" +
	"\x15upstream_remote_reset\x18\x05 \x01(\bR\x13upstreamRemoteReset\x12>\n" +
	"\x1bupstream_connection_failure\x18\x06 \x01(\bR\x19upstreamConnectionFailure\x12F\n" +
	"\x1fupstream_connection_termination\x18\a \x01(\bR\x1dupstreamConnectionTermination\x12+\n" +
	"\x11upstream_overflow\x18\b \x01(\bR\x10upstreamOverflow\x12$\n" +
	"\x0eno_route_found\x18\t \x01(\bR\fnoRouteFound\x12%\n" +
	"\x0edelay_injected\x18\n" +
	" \x01(\bR\rdelayInjected\x12%\n" +
	"\x0efault_injected\x18\v \x01(\bR\rfaultInjected\x12!\n" +
	"\frate_limited\x18\f \x01(\bR\vrateLimited\x12f\n" +
	"\x14unauthorized_details\x18\r \x01(\v23.envoy.data.accesslog.v2.ResponseFlags.UnauthorizedR\x13unauthorizedDetails\x127\n" +
	"\x18rate_limit_service_error\x18\x0e \x01(\bR\x15rateLimitServiceError\x12J\n" +
	"!downstream_connection_termination\x18\x0f \x01(\bR\x1fdownstreamConnectionTermination\x12A\n" +
	"\x1dupstream_retry_limit_exceeded\x18\x10 \x01(\bR\x1aupstreamRetryLimitExceeded\x12.\n" +
	"\x13stream_idle_timeout\x18\x11 \x01(\bR\x11streamIdleTimeout\x12A\n" +
	"\x1dinvalid_envoy_request_headers\x18\x12 \x01(\bR\x1ainvalidEnvoyRequestHeaders\x12:\n" +
	"\x19downstream_protocol_error\x18\x13 \x01(\bR\x17downstreamProtocolError\x1a\x9a\x01\n" +
	"\fUnauthorized\x12R\n" +
	"\x06reason\x18\x01 \x01(\x0e2:.envoy.data.accesslog.v2.ResponseFlags.Unauthorized.ReasonR\x06reason\"6\n" +
	"\x06Reason\x12\x16\n" +
	"\x12REASON_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10EXTERNAL_SERVICE\x10\x01\"\xbe\x06\n" +
	"\rTLSProperties\x12R\n" +
	"\vtls_version\x18\x01 \x01(\x0e21.envoy.data.accesslog.v2.TLSProperties.TLSVersionR\n" +
	"tlsVersion\x12F\n" +
	"\x10tls_cipher_suite\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x0etlsCipherSuite\x12(\n" +
	"\x10tls_sni_hostname\x18\x03 \x01(\tR\x0etlsSniHostname\x12~\n" +
	"\x1clocal_certificate_properties\x18\x04 \x01(\v2<.envoy.data.accesslog.v2.TLSProperties.CertificatePropertiesR\x1alocalCertificateProperties\x12|\n" +
	"\x1bpeer_certificate_properties\x18\x05 \x01(\v2<.envoy.data.accesslog.v2.TLSProperties.CertificatePropertiesR\x19peerCertificateProperties\x12$\n" +
	"\x0etls_session_id\x18\x06 \x01(\tR\ftlsSessionId\x1a\xe9\x01\n" +
	"\x15CertificateProperties\x12u\n" +
	"\x10subject_alt_name\x18\x01 \x03(\v2K.envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltNameR\x0esubjectAltName\x12\x18\n" +
	"\asubject\x18\x02 \x01(\tR\asubject\x1a?\n" +
	"\x0eSubjectAltName\x12\x12\n" +
	"\x03uri\x18\x01 \x01(\tH\x00R\x03uri\x12\x12\n" +
	"\x03dns\x18\x02 \x01(\tH\x00R\x03dnsB\x05\n" +
	"\x03san\"W\n" +
	"\n" +
	"TLSVersion\x12\x17\n" +
	"\x13VERSION_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05TLSv1\x10\x01\x12\v\n" +
	"\aTLSv1_1\x10\x02\x12\v\n" +
	"\aTLSv1_2\x10\x03\x12\v\n" +
	"\aTLSv1_3\x10\x04\"\x9a\x05\n" +
	"\x15HTTPRequestProperties\x12Q\n" +
	"\x0erequest_method\x18\x01 \x01(\x0e2 .envoy.api.v2.core.RequestMethodB\b\xfaB\x05\x82\x01\x02\x10\x01R\rrequestMethod\x12\x16\n" +
	"\x06scheme\x18\x02 \x01(\tR\x06scheme\x12\x1c\n" +
	"\tauthority\x18\x03 \x01(\tR\tauthority\x120\n" +
	"\x04port\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x04port\x12\x12\n" +
	"\x04path\x18\x05 \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x06 \x01(\tR\tuserAgent\x12\x18\n" +
	"\areferer\x18\a \x01(\tR\areferer\x12#\n" +
	"\rforwarded_for\x18\b \x01(\tR\fforwardedFor\x12\x1d\n" +
	"\n" +
	"request_id\x18\t \x01(\tR\trequestId\x12#\n" +
	"\roriginal_path\x18\n" +
	" \x01(\tR\foriginalPath\x122\n" +
	"\x15request_headers_bytes\x18\v \x01(\x04R\x13requestHeadersBytes\x12,\n" +
	"\x12request_body_bytes\x18\f \x01(\x04R\x10requestBodyBytes\x12k\n" +
	"\x0frequest_headers\x18\r \x03(\v2B.envoy.data.accesslog.v2.HTTPRequestProperties.RequestHeadersEntryR\x0erequestHeaders\x1aA\n" +
	"\x13RequestHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe3\x04\n" +
	"\x16HTTPResponseProperties\x12A\n" +
	"\rresponse_code\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\fresponseCode\x124\n" +
	"\x16response_headers_bytes\x18\x02 \x01(\x04R\x14responseHeadersBytes\x12.\n" +
	"\x13response_body_bytes\x18\x03 \x01(\x04R\x11responseBodyBytes\x12o\n" +
	"\x10response_headers\x18\x04 \x03(\v2D.envoy.data.accesslog.v2.HTTPResponseProperties.ResponseHeadersEntryR\x0fresponseHeaders\x12r\n" +
	"\x11response_trailers\x18\x05 \x03(\v2E.envoy.data.accesslog.v2.HTTPResponseProperties.ResponseTrailersEntryR\x10responseTrailers\x122\n" +
	"\x15response_code_details\x18\x06 \x01(\tR\x13responseCodeDetails\x1aB\n" +
	"\x14ResponseHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aC\n" +
	"\x15ResponseTrailersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x8d\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"%io.envoyproxy.envoy.data.accesslog.v2B\x0eAccesslogProtoP\x01ZJgithub.com/envoyproxy/go-control-plane/envoy/data/accesslog/v2;accesslogv2b\x06proto3"

var (
	file_envoy_data_accesslog_v2_accesslog_proto_rawDescOnce sync.Once
	file_envoy_data_accesslog_v2_accesslog_proto_rawDescData []byte
)

func file_envoy_data_accesslog_v2_accesslog_proto_rawDescGZIP() []byte {
	file_envoy_data_accesslog_v2_accesslog_proto_rawDescOnce.Do(func() {
		file_envoy_data_accesslog_v2_accesslog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_data_accesslog_v2_accesslog_proto_rawDesc), len(file_envoy_data_accesslog_v2_accesslog_proto_rawDesc)))
	})
	return file_envoy_data_accesslog_v2_accesslog_proto_rawDescData
}

var file_envoy_data_accesslog_v2_accesslog_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_envoy_data_accesslog_v2_accesslog_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_envoy_data_accesslog_v2_accesslog_proto_goTypes = []any{
	(HTTPAccessLogEntry_HTTPVersion)(0),                        // 0: envoy.data.accesslog.v2.HTTPAccessLogEntry.HTTPVersion
	(ResponseFlags_Unauthorized_Reason)(0),                     // 1: envoy.data.accesslog.v2.ResponseFlags.Unauthorized.Reason
	(TLSProperties_TLSVersion)(0),                              // 2: envoy.data.accesslog.v2.TLSProperties.TLSVersion
	(*TCPAccessLogEntry)(nil),                                  // 3: envoy.data.accesslog.v2.TCPAccessLogEntry
	(*HTTPAccessLogEntry)(nil),                                 // 4: envoy.data.accesslog.v2.HTTPAccessLogEntry
	(*ConnectionProperties)(nil),                               // 5: envoy.data.accesslog.v2.ConnectionProperties
	(*AccessLogCommon)(nil),                                    // 6: envoy.data.accesslog.v2.AccessLogCommon
	(*ResponseFlags)(nil),                                      // 7: envoy.data.accesslog.v2.ResponseFlags
	(*TLSProperties)(nil),                                      // 8: envoy.data.accesslog.v2.TLSProperties
	(*HTTPRequestProperties)(nil),                              // 9: envoy.data.accesslog.v2.HTTPRequestProperties
	(*HTTPResponseProperties)(nil),                             // 10: envoy.data.accesslog.v2.HTTPResponseProperties
	nil,                                                        // 11: envoy.data.accesslog.v2.AccessLogCommon.FilterStateObjectsEntry
	(*ResponseFlags_Unauthorized)(nil),                         // 12: envoy.data.accesslog.v2.ResponseFlags.Unauthorized
	(*TLSProperties_CertificateProperties)(nil),                // 13: envoy.data.accesslog.v2.TLSProperties.CertificateProperties
	(*TLSProperties_CertificateProperties_SubjectAltName)(nil), // 14: envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName
	nil,                            // 15: envoy.data.accesslog.v2.HTTPRequestProperties.RequestHeadersEntry
	nil,                            // 16: envoy.data.accesslog.v2.HTTPResponseProperties.ResponseHeadersEntry
	nil,                            // 17: envoy.data.accesslog.v2.HTTPResponseProperties.ResponseTrailersEntry
	(*core.Address)(nil),           // 18: envoy.api.v2.core.Address
	(*timestamppb.Timestamp)(nil),  // 19: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 20: google.protobuf.Duration
	(*core.Metadata)(nil),          // 21: envoy.api.v2.core.Metadata
	(*wrapperspb.UInt32Value)(nil), // 22: google.protobuf.UInt32Value
	(core.RequestMethod)(0),        // 23: envoy.api.v2.core.RequestMethod
	(*anypb.Any)(nil),              // 24: google.protobuf.Any
}
var file_envoy_data_accesslog_v2_accesslog_proto_depIdxs = []int32{
	6,  // 0: envoy.data.accesslog.v2.TCPAccessLogEntry.common_properties:type_name -> envoy.data.accesslog.v2.AccessLogCommon
	5,  // 1: envoy.data.accesslog.v2.TCPAccessLogEntry.connection_properties:type_name -> envoy.data.accesslog.v2.ConnectionProperties
	6,  // 2: envoy.data.accesslog.v2.HTTPAccessLogEntry.common_properties:type_name -> envoy.data.accesslog.v2.AccessLogCommon
	0,  // 3: envoy.data.accesslog.v2.HTTPAccessLogEntry.protocol_version:type_name -> envoy.data.accesslog.v2.HTTPAccessLogEntry.HTTPVersion
	9,  // 4: envoy.data.accesslog.v2.HTTPAccessLogEntry.request:type_name -> envoy.data.accesslog.v2.HTTPRequestProperties
	10, // 5: envoy.data.accesslog.v2.HTTPAccessLogEntry.response:type_name -> envoy.data.accesslog.v2.HTTPResponseProperties
	18, // 6: envoy.data.accesslog.v2.AccessLogCommon.downstream_remote_address:type_name -> envoy.api.v2.core.Address
	18, // 7: envoy.data.accesslog.v2.AccessLogCommon.downstream_local_address:type_name -> envoy.api.v2.core.Address
	8,  // 8: envoy.data.accesslog.v2.AccessLogCommon.tls_properties:type_name -> envoy.data.accesslog.v2.TLSProperties
	19, // 9: envoy.data.accesslog.v2.AccessLogCommon.start_time:type_name -> google.protobuf.Timestamp
	20, // 10: envoy.data.accesslog.v2.AccessLogCommon.time_to_last_rx_byte:type_name -> google.protobuf.Duration
	20, // 11: envoy.data.accesslog.v2.AccessLogCommon.time_to_first_upstream_tx_byte:type_name -> google.protobuf.Duration
	20, // 12: envoy.data.accesslog.v2.AccessLogCommon.time_to_last_upstream_tx_byte:type_name -> google.protobuf.Duration
	20, // 13: envoy.data.accesslog.v2.AccessLogCommon.time_to_first_upstream_rx_byte:type_name -> google.protobuf.Duration
	20, // 14: envoy.data.accesslog.v2.AccessLogCommon.time_to_last_upstream_rx_byte:type_name -> google.protobuf.Duration
	20, // 15: envoy.data.accesslog.v2.AccessLogCommon.time_to_first_downstream_tx_byte:type_name -> google.protobuf.Duration
	20, // 16: envoy.data.accesslog.v2.AccessLogCommon.time_to_last_downstream_tx_byte:type_name -> google.protobuf.Duration
	18, // 17: envoy.data.accesslog.v2.AccessLogCommon.upstream_remote_address:type_name -> envoy.api.v2.core.Address
	18, // 18: envoy.data.accesslog.v2.AccessLogCommon.upstream_local_address:type_name -> envoy.api.v2.core.Address
	7,  // 19: envoy.data.accesslog.v2.AccessLogCommon.response_flags:type_name -> envoy.data.accesslog.v2.ResponseFlags
	21, // 20: envoy.data.accesslog.v2.AccessLogCommon.metadata:type_name -> envoy.api.v2.core.Metadata
	18, // 21: envoy.data.accesslog.v2.AccessLogCommon.downstream_direct_remote_address:type_name -> envoy.api.v2.core.Address
	11, // 22: envoy.data.accesslog.v2.AccessLogCommon.filter_state_objects:type_name -> envoy.data.accesslog.v2.AccessLogCommon.FilterStateObjectsEntry
	12, // 23: envoy.data.accesslog.v2.ResponseFlags.unauthorized_details:type_name -> envoy.data.accesslog.v2.ResponseFlags.Unauthorized
	2,  // 24: envoy.data.accesslog.v2.TLSProperties.tls_version:type_name -> envoy.data.accesslog.v2.TLSProperties.TLSVersion
	22, // 25: envoy.data.accesslog.v2.TLSProperties.tls_cipher_suite:type_name -> google.protobuf.UInt32Value
	13, // 26: envoy.data.accesslog.v2.TLSProperties.local_certificate_properties:type_name -> envoy.data.accesslog.v2.TLSProperties.CertificateProperties
	13, // 27: envoy.data.accesslog.v2.TLSProperties.peer_certificate_properties:type_name -> envoy.data.accesslog.v2.TLSProperties.CertificateProperties
	23, // 28: envoy.data.accesslog.v2.HTTPRequestProperties.request_method:type_name -> envoy.api.v2.core.RequestMethod
	22, // 29: envoy.data.accesslog.v2.HTTPRequestProperties.port:type_name -> google.protobuf.UInt32Value
	15, // 30: envoy.data.accesslog.v2.HTTPRequestProperties.request_headers:type_name -> envoy.data.accesslog.v2.HTTPRequestProperties.RequestHeadersEntry
	22, // 31: envoy.data.accesslog.v2.HTTPResponseProperties.response_code:type_name -> google.protobuf.UInt32Value
	16, // 32: envoy.data.accesslog.v2.HTTPResponseProperties.response_headers:type_name -> envoy.data.accesslog.v2.HTTPResponseProperties.ResponseHeadersEntry
	17, // 33: envoy.data.accesslog.v2.HTTPResponseProperties.response_trailers:type_name -> envoy.data.accesslog.v2.HTTPResponseProperties.ResponseTrailersEntry
	24, // 34: envoy.data.accesslog.v2.AccessLogCommon.FilterStateObjectsEntry.value:type_name -> google.protobuf.Any
	1,  // 35: envoy.data.accesslog.v2.ResponseFlags.Unauthorized.reason:type_name -> envoy.data.accesslog.v2.ResponseFlags.Unauthorized.Reason
	14, // 36: envoy.data.accesslog.v2.TLSProperties.CertificateProperties.subject_alt_name:type_name -> envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_envoy_data_accesslog_v2_accesslog_proto_init() }
func file_envoy_data_accesslog_v2_accesslog_proto_init() {
	if File_envoy_data_accesslog_v2_accesslog_proto != nil {
		return
	}
	file_envoy_data_accesslog_v2_accesslog_proto_msgTypes[11].OneofWrappers = []any{
		(*TLSProperties_CertificateProperties_SubjectAltName_Uri)(nil),
		(*TLSProperties_CertificateProperties_SubjectAltName_Dns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_data_accesslog_v2_accesslog_proto_rawDesc), len(file_envoy_data_accesslog_v2_accesslog_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_data_accesslog_v2_accesslog_proto_goTypes,
		DependencyIndexes: file_envoy_data_accesslog_v2_accesslog_proto_depIdxs,
		EnumInfos:         file_envoy_data_accesslog_v2_accesslog_proto_enumTypes,
		MessageInfos:      file_envoy_data_accesslog_v2_accesslog_proto_msgTypes,
	}.Build()
	File_envoy_data_accesslog_v2_accesslog_proto = out.File
	file_envoy_data_accesslog_v2_accesslog_proto_goTypes = nil
	file_envoy_data_accesslog_v2_accesslog_proto_depIdxs = nil
}
