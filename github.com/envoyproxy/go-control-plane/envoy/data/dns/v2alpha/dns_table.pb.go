// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/data/dns/v2alpha/dns_table.proto

package v2alpha

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	matcher "github.com/envoyproxy/go-control-plane/envoy/type/matcher"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This message contains the configuration for the DNS Filter if populated
// from the control plane
type DnsTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Control how many times envoy makes an attempt to forward a query to
	// an external server
	ExternalRetryCount uint32 `protobuf:"varint,1,opt,name=external_retry_count,json=externalRetryCount,proto3" json:"external_retry_count,omitempty"`
	// Fully qualified domain names for which Envoy will respond to queries
	VirtualDomains []*DnsTable_DnsVirtualDomain `protobuf:"bytes,2,rep,name=virtual_domains,json=virtualDomains,proto3" json:"virtual_domains,omitempty"`
	// This field serves to help Envoy determine whether it can authoritatively
	// answer a query for a name matching a suffix in this list. If the query
	// name does not match a suffix in this list, Envoy will forward
	// the query to an upstream DNS server
	KnownSuffixes []*matcher.StringMatcher `protobuf:"bytes,3,rep,name=known_suffixes,json=knownSuffixes,proto3" json:"known_suffixes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsTable) Reset() {
	*x = DnsTable{}
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTable) ProtoMessage() {}

func (x *DnsTable) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTable.ProtoReflect.Descriptor instead.
func (*DnsTable) Descriptor() ([]byte, []int) {
	return file_envoy_data_dns_v2alpha_dns_table_proto_rawDescGZIP(), []int{0}
}

func (x *DnsTable) GetExternalRetryCount() uint32 {
	if x != nil {
		return x.ExternalRetryCount
	}
	return 0
}

func (x *DnsTable) GetVirtualDomains() []*DnsTable_DnsVirtualDomain {
	if x != nil {
		return x.VirtualDomains
	}
	return nil
}

func (x *DnsTable) GetKnownSuffixes() []*matcher.StringMatcher {
	if x != nil {
		return x.KnownSuffixes
	}
	return nil
}

// This message contains a list of IP addresses returned for a query for a known name
type DnsTable_AddressList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field contains a well formed IP address that is returned
	// in the answer for a name query. The address field can be an
	// IPv4 or IPv6 address. Address family detection is done automatically
	// when Envoy parses the string. Since this field is repeated,
	// Envoy will return one randomly chosen entry from this list in the
	// DNS response. The random index will vary per query so that we prevent
	// clients pinning on a single address for a configured domain
	Address       []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsTable_AddressList) Reset() {
	*x = DnsTable_AddressList{}
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTable_AddressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTable_AddressList) ProtoMessage() {}

func (x *DnsTable_AddressList) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTable_AddressList.ProtoReflect.Descriptor instead.
func (*DnsTable_AddressList) Descriptor() ([]byte, []int) {
	return file_envoy_data_dns_v2alpha_dns_table_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DnsTable_AddressList) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

// This message type is extensible and can contain a list of addresses
// or dictate some other method for resolving the addresses for an
// endpoint
type DnsTable_DnsEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EndpointConfig:
	//
	//	*DnsTable_DnsEndpoint_AddressList
	EndpointConfig isDnsTable_DnsEndpoint_EndpointConfig `protobuf_oneof:"endpoint_config"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DnsTable_DnsEndpoint) Reset() {
	*x = DnsTable_DnsEndpoint{}
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTable_DnsEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTable_DnsEndpoint) ProtoMessage() {}

func (x *DnsTable_DnsEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTable_DnsEndpoint.ProtoReflect.Descriptor instead.
func (*DnsTable_DnsEndpoint) Descriptor() ([]byte, []int) {
	return file_envoy_data_dns_v2alpha_dns_table_proto_rawDescGZIP(), []int{0, 1}
}

func (x *DnsTable_DnsEndpoint) GetEndpointConfig() isDnsTable_DnsEndpoint_EndpointConfig {
	if x != nil {
		return x.EndpointConfig
	}
	return nil
}

func (x *DnsTable_DnsEndpoint) GetAddressList() *DnsTable_AddressList {
	if x != nil {
		if x, ok := x.EndpointConfig.(*DnsTable_DnsEndpoint_AddressList); ok {
			return x.AddressList
		}
	}
	return nil
}

type isDnsTable_DnsEndpoint_EndpointConfig interface {
	isDnsTable_DnsEndpoint_EndpointConfig()
}

type DnsTable_DnsEndpoint_AddressList struct {
	AddressList *DnsTable_AddressList `protobuf:"bytes,1,opt,name=address_list,json=addressList,proto3,oneof"`
}

func (*DnsTable_DnsEndpoint_AddressList) isDnsTable_DnsEndpoint_EndpointConfig() {}

type DnsTable_DnsVirtualDomain struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The domain name for which Envoy will respond to query requests
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The configuration containing the method to determine the address
	// of this endpoint
	Endpoint *DnsTable_DnsEndpoint `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Sets the TTL in dns answers from Envoy returned to the client
	AnswerTtl     *durationpb.Duration `protobuf:"bytes,3,opt,name=answer_ttl,json=answerTtl,proto3" json:"answer_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DnsTable_DnsVirtualDomain) Reset() {
	*x = DnsTable_DnsVirtualDomain{}
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsTable_DnsVirtualDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsTable_DnsVirtualDomain) ProtoMessage() {}

func (x *DnsTable_DnsVirtualDomain) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsTable_DnsVirtualDomain.ProtoReflect.Descriptor instead.
func (*DnsTable_DnsVirtualDomain) Descriptor() ([]byte, []int) {
	return file_envoy_data_dns_v2alpha_dns_table_proto_rawDescGZIP(), []int{0, 2}
}

func (x *DnsTable_DnsVirtualDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DnsTable_DnsVirtualDomain) GetEndpoint() *DnsTable_DnsEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *DnsTable_DnsVirtualDomain) GetAnswerTtl() *durationpb.Duration {
	if x != nil {
		return x.AnswerTtl
	}
	return nil
}

var File_envoy_data_dns_v2alpha_dns_table_proto protoreflect.FileDescriptor

const file_envoy_data_dns_v2alpha_dns_table_proto_rawDesc = "" +
	"\n" +
	"&envoy/data/dns/v2alpha/dns_table.proto\x12\x16envoy.data.dns.v2alpha\x1a\x1fenvoy/type/matcher/string.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xe2\x04\n" +
	"\bDnsTable\x120\n" +
	"\x14external_retry_count\x18\x01 \x01(\rR\x12externalRetryCount\x12d\n" +
	"\x0fvirtual_domains\x18\x02 \x03(\v21.envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomainB\b\xfaB\x05\x92\x01\x02\b\x01R\x0evirtualDomains\x12H\n" +
	"\x0eknown_suffixes\x18\x03 \x03(\v2!.envoy.type.matcher.StringMatcherR\rknownSuffixes\x1a7\n" +
	"\vAddressList\x12(\n" +
	"\aaddress\x18\x01 \x03(\tB\x0e\xfaB\v\x92\x01\b\b\x01\"\x04r\x02\x10\x03R\aaddress\x1ax\n" +
	"\vDnsEndpoint\x12Q\n" +
	"\faddress_list\x18\x01 \x01(\v2,.envoy.data.dns.v2alpha.DnsTable.AddressListH\x00R\vaddressListB\x16\n" +
	"\x0fendpoint_config\x12\x03\xf8B\x01\x1a\xc0\x01\n" +
	"\x10DnsVirtualDomain\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x02\xc0\x01\x01R\x04name\x12H\n" +
	"\bendpoint\x18\x02 \x01(\v2,.envoy.data.dns.v2alpha.DnsTable.DnsEndpointR\bendpoint\x12B\n" +
	"\n" +
	"answer_ttl\x18\x03 \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\tanswerTtlB\x80\x01\xba\x80\xc8\xd1\x06\x04\b\x01\x10\x01\n" +
	"$io.envoyproxy.envoy.data.dns.v2alphaB\rDnsTableProtoP\x01Z=github.com/envoyproxy/go-control-plane/envoy/data/dns/v2alphab\x06proto3"

var (
	file_envoy_data_dns_v2alpha_dns_table_proto_rawDescOnce sync.Once
	file_envoy_data_dns_v2alpha_dns_table_proto_rawDescData []byte
)

func file_envoy_data_dns_v2alpha_dns_table_proto_rawDescGZIP() []byte {
	file_envoy_data_dns_v2alpha_dns_table_proto_rawDescOnce.Do(func() {
		file_envoy_data_dns_v2alpha_dns_table_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_data_dns_v2alpha_dns_table_proto_rawDesc), len(file_envoy_data_dns_v2alpha_dns_table_proto_rawDesc)))
	})
	return file_envoy_data_dns_v2alpha_dns_table_proto_rawDescData
}

var file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_data_dns_v2alpha_dns_table_proto_goTypes = []any{
	(*DnsTable)(nil),                  // 0: envoy.data.dns.v2alpha.DnsTable
	(*DnsTable_AddressList)(nil),      // 1: envoy.data.dns.v2alpha.DnsTable.AddressList
	(*DnsTable_DnsEndpoint)(nil),      // 2: envoy.data.dns.v2alpha.DnsTable.DnsEndpoint
	(*DnsTable_DnsVirtualDomain)(nil), // 3: envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain
	(*matcher.StringMatcher)(nil),     // 4: envoy.type.matcher.StringMatcher
	(*durationpb.Duration)(nil),       // 5: google.protobuf.Duration
}
var file_envoy_data_dns_v2alpha_dns_table_proto_depIdxs = []int32{
	3, // 0: envoy.data.dns.v2alpha.DnsTable.virtual_domains:type_name -> envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain
	4, // 1: envoy.data.dns.v2alpha.DnsTable.known_suffixes:type_name -> envoy.type.matcher.StringMatcher
	1, // 2: envoy.data.dns.v2alpha.DnsTable.DnsEndpoint.address_list:type_name -> envoy.data.dns.v2alpha.DnsTable.AddressList
	2, // 3: envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain.endpoint:type_name -> envoy.data.dns.v2alpha.DnsTable.DnsEndpoint
	5, // 4: envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain.answer_ttl:type_name -> google.protobuf.Duration
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_envoy_data_dns_v2alpha_dns_table_proto_init() }
func file_envoy_data_dns_v2alpha_dns_table_proto_init() {
	if File_envoy_data_dns_v2alpha_dns_table_proto != nil {
		return
	}
	file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes[2].OneofWrappers = []any{
		(*DnsTable_DnsEndpoint_AddressList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_data_dns_v2alpha_dns_table_proto_rawDesc), len(file_envoy_data_dns_v2alpha_dns_table_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_data_dns_v2alpha_dns_table_proto_goTypes,
		DependencyIndexes: file_envoy_data_dns_v2alpha_dns_table_proto_depIdxs,
		MessageInfos:      file_envoy_data_dns_v2alpha_dns_table_proto_msgTypes,
	}.Build()
	File_envoy_data_dns_v2alpha_dns_table_proto = out.File
	file_envoy_data_dns_v2alpha_dns_table_proto_goTypes = nil
	file_envoy_data_dns_v2alpha_dns_table_proto_depIdxs = nil
}
