// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/matching/input_matchers/ip/v3/ip.proto

package ipv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This input matcher matches IPv4 or IPv6 addresses against a list of CIDR
// ranges. It returns true if and only if the input IP belongs to at least one
// of these CIDR ranges. Internally, it uses a Level-Compressed trie, as
// described in the paper `IP-address lookup using LC-tries
// <https://www.nada.kth.se/~snilsson/publications/IP-address-lookup-using-LC-tries/>`_
// by S. Nilsson and G. Karlsson. For "big" lists of IPs, this matcher is more
// efficient than multiple single IP matcher, that would have a linear cost.
type Ip struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Match if the IP belongs to any of these CIDR ranges.
	CidrRanges []*v3.CidrRange `protobuf:"bytes,1,rep,name=cidr_ranges,json=cidrRanges,proto3" json:"cidr_ranges,omitempty"`
	// The human readable prefix to use when emitting statistics for the IP input
	// matcher. Names in the table below are concatenated to this prefix.
	//
	// .. csv-table::
	//
	//	:header: Name, Type, Description
	//	:widths: 1, 1, 2
	//
	//	ip_parsing_failed, Counter, Total number of IP addresses the matcher was unable to parse
	StatPrefix    string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ip) Reset() {
	*x = Ip{}
	mi := &file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ip) ProtoMessage() {}

func (x *Ip) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ip.ProtoReflect.Descriptor instead.
func (*Ip) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescGZIP(), []int{0}
}

func (x *Ip) GetCidrRanges() []*v3.CidrRange {
	if x != nil {
		return x.CidrRanges
	}
	return nil
}

func (x *Ip) GetStatPrefix() string {
	if x != nil {
		return x.StatPrefix
	}
	return ""
}

var File_envoy_extensions_matching_input_matchers_ip_v3_ip_proto protoreflect.FileDescriptor

const file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDesc = "" +
	"\n" +
	"7envoy/extensions/matching/input_matchers/ip/v3/ip.proto\x12.envoy.extensions.matching.input_matchers.ip.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"z\n" +
	"\x02Ip\x12J\n" +
	"\vcidr_ranges\x18\x01 \x03(\v2\x1f.envoy.config.core.v3.CidrRangeB\b\xfaB\x05\x92\x01\x02\b\x01R\n" +
	"cidrRanges\x12(\n" +
	"\vstat_prefix\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"statPrefixB\xad\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"<io.envoyproxy.envoy.extensions.matching.input_matchers.ip.v3B\aIpProtoP\x01ZZgithub.com/envoyproxy/go-control-plane/envoy/extensions/matching/input_matchers/ip/v3;ipv3b\x06proto3"

var (
	file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescOnce sync.Once
	file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescData []byte
)

func file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescGZIP() []byte {
	file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDesc), len(file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDesc)))
	})
	return file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDescData
}

var file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_goTypes = []any{
	(*Ip)(nil),           // 0: envoy.extensions.matching.input_matchers.ip.v3.Ip
	(*v3.CidrRange)(nil), // 1: envoy.config.core.v3.CidrRange
}
var file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.matching.input_matchers.ip.v3.Ip.cidr_ranges:type_name -> envoy.config.core.v3.CidrRange
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_init() }
func file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_init() {
	if File_envoy_extensions_matching_input_matchers_ip_v3_ip_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDesc), len(file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_msgTypes,
	}.Build()
	File_envoy_extensions_matching_input_matchers_ip_v3_ip_proto = out.File
	file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_goTypes = nil
	file_envoy_extensions_matching_input_matchers_ip_v3_ip_proto_depIdxs = nil
}
