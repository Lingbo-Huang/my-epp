// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/geoip_providers/common/v3/common.proto

package commonv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonGeoipProviderConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for geolocation headers to add to request.
	GeoHeadersToAdd *CommonGeoipProviderConfig_GeolocationHeadersToAdd `protobuf:"bytes,1,opt,name=geo_headers_to_add,json=geoHeadersToAdd,proto3" json:"geo_headers_to_add,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CommonGeoipProviderConfig) Reset() {
	*x = CommonGeoipProviderConfig{}
	mi := &file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonGeoipProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGeoipProviderConfig) ProtoMessage() {}

func (x *CommonGeoipProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGeoipProviderConfig.ProtoReflect.Descriptor instead.
func (*CommonGeoipProviderConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescGZIP(), []int{0}
}

func (x *CommonGeoipProviderConfig) GetGeoHeadersToAdd() *CommonGeoipProviderConfig_GeolocationHeadersToAdd {
	if x != nil {
		return x.GeoHeadersToAdd
	}
	return nil
}

// The set of geolocation headers to add to request. If any of the configured headers is present
// in the incoming request, it will be overridden by the :ref:`Geoip filter <config_http_filters_geoip>`.
// [#next-free-field: 13]
type CommonGeoipProviderConfig_GeolocationHeadersToAdd struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, the header will be used to populate the country ISO code associated with the IP address.
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// If set, the header will be used to populate the city associated with the IP address.
	City string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	// If set, the header will be used to populate the region ISO code associated with the IP address.
	// The least specific subdivision will be selected as region value.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// If set, the header will be used to populate the ASN associated with the IP address.
	Asn string `protobuf:"bytes,4,opt,name=asn,proto3" json:"asn,omitempty"`
	// This field is being deprecated, use “anon“ instead.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/geoip_providers/common/v3/common.proto.
	IsAnon string `protobuf:"bytes,5,opt,name=is_anon,json=isAnon,proto3" json:"is_anon,omitempty"`
	// If set, the IP address will be checked if it belongs to any type of anonymization network (e.g. VPN, public proxy etc)
	// and header will be populated with the check result. Header value will be set to either "true" or "false" depending on the check result.
	Anon string `protobuf:"bytes,12,opt,name=anon,proto3" json:"anon,omitempty"`
	// If set, the IP address will be checked if it belongs to a VPN and header will be populated with the check result.
	// Header value will be set to either "true" or "false" depending on the check result.
	AnonVpn string `protobuf:"bytes,6,opt,name=anon_vpn,json=anonVpn,proto3" json:"anon_vpn,omitempty"`
	// If set, the IP address will be checked if it belongs to a hosting provider and header will be populated with the check result.
	// Header value will be set to either "true" or "false" depending on the check result.
	AnonHosting string `protobuf:"bytes,7,opt,name=anon_hosting,json=anonHosting,proto3" json:"anon_hosting,omitempty"`
	// If set, the IP address will be checked if it belongs to a TOR exit node and header will be populated with the check result.
	// Header value will be set to either "true" or "false" depending on the check result.
	AnonTor string `protobuf:"bytes,8,opt,name=anon_tor,json=anonTor,proto3" json:"anon_tor,omitempty"`
	// If set, the IP address will be checked if it belongs to a public proxy and header will be populated with the check result.
	// Header value will be set to either "true" or "false" depending on the check result.
	AnonProxy string `protobuf:"bytes,9,opt,name=anon_proxy,json=anonProxy,proto3" json:"anon_proxy,omitempty"`
	// If set, the header will be used to populate the ISP associated with the IP address.
	Isp string `protobuf:"bytes,10,opt,name=isp,proto3" json:"isp,omitempty"`
	// If set, the IP address will be checked if it belongs to the ISP named iCloud Private Relay and header will be populated with the check result.
	// Header value will be set to either "true" or "false" depending on the check result.
	ApplePrivateRelay string `protobuf:"bytes,11,opt,name=apple_private_relay,json=applePrivateRelay,proto3" json:"apple_private_relay,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) Reset() {
	*x = CommonGeoipProviderConfig_GeolocationHeadersToAdd{}
	mi := &file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGeoipProviderConfig_GeolocationHeadersToAdd) ProtoMessage() {}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGeoipProviderConfig_GeolocationHeadersToAdd.ProtoReflect.Descriptor instead.
func (*CommonGeoipProviderConfig_GeolocationHeadersToAdd) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

// Deprecated: Marked as deprecated in envoy/extensions/geoip_providers/common/v3/common.proto.
func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetIsAnon() string {
	if x != nil {
		return x.IsAnon
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAnon() string {
	if x != nil {
		return x.Anon
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAnonVpn() string {
	if x != nil {
		return x.AnonVpn
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAnonHosting() string {
	if x != nil {
		return x.AnonHosting
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAnonTor() string {
	if x != nil {
		return x.AnonTor
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetAnonProxy() string {
	if x != nil {
		return x.AnonProxy
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *CommonGeoipProviderConfig_GeolocationHeadersToAdd) GetApplePrivateRelay() string {
	if x != nil {
		return x.ApplePrivateRelay
	}
	return ""
}

var File_envoy_extensions_geoip_providers_common_v3_common_proto protoreflect.FileDescriptor

const file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDesc = "" +
	"\n" +
	"7envoy/extensions/geoip_providers/common/v3/common.proto\x12*envoy.extensions.geoip_providers.common.v3\x1a#envoy/annotations/deprecation.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xb4\x05\n" +
	"\x19CommonGeoipProviderConfig\x12\x94\x01\n" +
	"\x12geo_headers_to_add\x18\x01 \x01(\v2].envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAddB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x0fgeoHeadersToAdd\x1a\xff\x03\n" +
	"\x17GeolocationHeadersToAdd\x12%\n" +
	"\acountry\x18\x01 \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\acountry\x12\x1f\n" +
	"\x04city\x18\x02 \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x04city\x12#\n" +
	"\x06region\x18\x03 \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x06region\x12\x1d\n" +
	"\x03asn\x18\x04 \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x03asn\x12/\n" +
	"\ais_anon\x18\x05 \x01(\tB\x16\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01\x92ǆ\xd8\x04\x033.0\x18\x01R\x06isAnon\x12\x1f\n" +
	"\x04anon\x18\f \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x04anon\x12&\n" +
	"\banon_vpn\x18\x06 \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\aanonVpn\x12.\n" +
	"\fanon_hosting\x18\a \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\vanonHosting\x12&\n" +
	"\banon_tor\x18\b \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\aanonTor\x12*\n" +
	"\n" +
	"anon_proxy\x18\t \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\tanonProxy\x12\x1d\n" +
	"\x03isp\x18\n" +
	" \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x03isp\x12;\n" +
	"\x13apple_private_relay\x18\v \x01(\tB\v\xfaB\br\x06\xd0\x01\x01\xc0\x01\x01R\x11applePrivateRelayB\xad\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"8io.envoyproxy.envoy.extensions.geoip_providers.common.v3B\vCommonProtoP\x01ZZgithub.com/envoyproxy/go-control-plane/envoy/extensions/geoip_providers/common/v3;commonv3b\x06proto3"

var (
	file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescOnce sync.Once
	file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescData []byte
)

func file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescGZIP() []byte {
	file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDesc), len(file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDesc)))
	})
	return file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDescData
}

var file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_geoip_providers_common_v3_common_proto_goTypes = []any{
	(*CommonGeoipProviderConfig)(nil),                         // 0: envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig
	(*CommonGeoipProviderConfig_GeolocationHeadersToAdd)(nil), // 1: envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd
}
var file_envoy_extensions_geoip_providers_common_v3_common_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.geo_headers_to_add:type_name -> envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_geoip_providers_common_v3_common_proto_init() }
func file_envoy_extensions_geoip_providers_common_v3_common_proto_init() {
	if File_envoy_extensions_geoip_providers_common_v3_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDesc), len(file_envoy_extensions_geoip_providers_common_v3_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_geoip_providers_common_v3_common_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_geoip_providers_common_v3_common_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_geoip_providers_common_v3_common_proto_msgTypes,
	}.Build()
	File_envoy_extensions_geoip_providers_common_v3_common_proto = out.File
	file_envoy_extensions_geoip_providers_common_v3_common_proto_goTypes = nil
	file_envoy_extensions_geoip_providers_common_v3_common_proto_depIdxs = nil
}
