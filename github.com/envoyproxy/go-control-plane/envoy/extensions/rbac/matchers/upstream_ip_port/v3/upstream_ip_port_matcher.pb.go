// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto

package upstream_ip_portv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v31 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is configuration for matching upstream ip and port.
// Note that although both fields are optional, at least one of IP or port must be supplied. If only
// one is supplied the other is a wildcard match.
// This matcher requires a filter in the chain to have saved the upstream address in the
// filter state before the matcher is executed by RBAC filter. The state should be saved with key
// “envoy.stream.upstream_address“ (See
// :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
// Also, See :repo:`proxy_filter.cc<source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>`
// for an example of a filter which populates the FilterState.
type UpstreamIpPortMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A CIDR block that will be used to match the upstream IP.
	// Both Ipv4 and Ipv6 ranges can be matched.
	UpstreamIp *v3.CidrRange `protobuf:"bytes,1,opt,name=upstream_ip,json=upstreamIp,proto3" json:"upstream_ip,omitempty"`
	// A port range that will be used to match the upstream port.
	UpstreamPortRange *v31.Int64Range `protobuf:"bytes,2,opt,name=upstream_port_range,json=upstreamPortRange,proto3" json:"upstream_port_range,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpstreamIpPortMatcher) Reset() {
	*x = UpstreamIpPortMatcher{}
	mi := &file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamIpPortMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamIpPortMatcher) ProtoMessage() {}

func (x *UpstreamIpPortMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamIpPortMatcher.ProtoReflect.Descriptor instead.
func (*UpstreamIpPortMatcher) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescGZIP(), []int{0}
}

func (x *UpstreamIpPortMatcher) GetUpstreamIp() *v3.CidrRange {
	if x != nil {
		return x.UpstreamIp
	}
	return nil
}

func (x *UpstreamIpPortMatcher) GetUpstreamPortRange() *v31.Int64Range {
	if x != nil {
		return x.UpstreamPortRange
	}
	return nil
}

var File_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto protoreflect.FileDescriptor

const file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDesc = "" +
	"\n" +
	"Qenvoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto\x122envoy.extensions.rbac.matchers.upstream_ip_port.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x19envoy/type/v3/range.proto\x1a\x1dudpa/annotations/status.proto\"\xa4\x01\n" +
	"\x15UpstreamIpPortMatcher\x12@\n" +
	"\vupstream_ip\x18\x01 \x01(\v2\x1f.envoy.config.core.v3.CidrRangeR\n" +
	"upstreamIp\x12I\n" +
	"\x13upstream_port_range\x18\x02 \x01(\v2\x19.envoy.type.v3.Int64RangeR\x11upstreamPortRangeB\xd6\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"@io.envoyproxy.envoy.extensions.rbac.matchers.upstream_ip_port.v3B\x1aUpstreamIpPortMatcherProtoP\x01Zlgithub.com/envoyproxy/go-control-plane/envoy/extensions/rbac/matchers/upstream_ip_port/v3;upstream_ip_portv3b\x06proto3"

var (
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescOnce sync.Once
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescData []byte
)

func file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescGZIP() []byte {
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDesc), len(file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDesc)))
	})
	return file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDescData
}

var file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_goTypes = []any{
	(*UpstreamIpPortMatcher)(nil), // 0: envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher
	(*v3.CidrRange)(nil),          // 1: envoy.config.core.v3.CidrRange
	(*v31.Int64Range)(nil),        // 2: envoy.type.v3.Int64Range
}
var file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher.upstream_ip:type_name -> envoy.config.core.v3.CidrRange
	2, // 1: envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher.upstream_port_range:type_name -> envoy.type.v3.Int64Range
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_init()
}
func file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_init() {
	if File_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDesc), len(file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_msgTypes,
	}.Build()
	File_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto = out.File
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_goTypes = nil
	file_envoy_extensions_rbac_matchers_upstream_ip_port_v3_upstream_ip_port_matcher_proto_depIdxs = nil
}
