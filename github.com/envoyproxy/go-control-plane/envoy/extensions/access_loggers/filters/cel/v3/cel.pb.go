// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/access_loggers/filters/cel/v3/cel.proto

package celv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExpressionFilter is an access logging filter that evaluates configured
// symbolic Common Expression Language expressions to inform the decision
// to generate an access log.
type ExpressionFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expression that, when evaluated, will be used to filter access logs.
	// Expressions are based on the set of Envoy :ref:`attributes <arch_overview_attributes>`.
	// The provided expression must evaluate to true for logging (expression errors are considered false).
	// Examples:
	//
	// * “response.code >= 400“
	// * “(connection.mtls && request.headers['x-log-mtls'] == 'true') || request.url_path.contains('v1beta3')“
	Expression    string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpressionFilter) Reset() {
	*x = ExpressionFilter{}
	mi := &file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionFilter) ProtoMessage() {}

func (x *ExpressionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionFilter.ProtoReflect.Descriptor instead.
func (*ExpressionFilter) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescGZIP(), []int{0}
}

func (x *ExpressionFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

var File_envoy_extensions_access_loggers_filters_cel_v3_cel_proto protoreflect.FileDescriptor

const file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDesc = "" +
	"\n" +
	"8envoy/extensions/access_loggers/filters/cel/v3/cel.proto\x12.envoy.extensions.access_loggers.filters.cel.v3\x1a\x1dudpa/annotations/status.proto\"2\n" +
	"\x10ExpressionFilter\x12\x1e\n" +
	"\n" +
	"expression\x18\x01 \x01(\tR\n" +
	"expressionB\xaf\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"<io.envoyproxy.envoy.extensions.access_loggers.filters.cel.v3B\bCelProtoP\x01Z[github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/filters/cel/v3;celv3b\x06proto3"

var (
	file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescOnce sync.Once
	file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescData []byte
)

func file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescGZIP() []byte {
	file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDesc), len(file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDesc)))
	})
	return file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDescData
}

var file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_goTypes = []any{
	(*ExpressionFilter)(nil), // 0: envoy.extensions.access_loggers.filters.cel.v3.ExpressionFilter
}
var file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_init() }
func file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_init() {
	if File_envoy_extensions_access_loggers_filters_cel_v3_cel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDesc), len(file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_msgTypes,
	}.Build()
	File_envoy_extensions_access_loggers_filters_cel_v3_cel_proto = out.File
	file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_goTypes = nil
	file_envoy_extensions_access_loggers_filters_cel_v3_cel_proto_depIdxs = nil
}
