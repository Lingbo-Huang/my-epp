// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/access_loggers/fluentd/v3/fluentd.proto

package fluentdv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for the *envoy.access_loggers.fluentd* :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`.
// This access log extension will send the emitted access logs over a TCP connection to an upstream that is accepting
// the Fluentd Forward Protocol as described in: `Fluentd Forward Protocol Specification
// <https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1>`_.
// [#extension: envoy.access_loggers.fluentd]
// [#next-free-field: 9]
type FluentdAccessLogConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The upstream cluster to connect to for streaming the Fluentd messages.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// A tag is a string separated with '.' (e.g. log.type) to categorize events.
	// See: https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1#message-modes
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// The prefix to use when emitting :ref:`statistics <config_access_log_stats>`.
	StatPrefix string `protobuf:"bytes,3,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Interval for flushing access logs to the TCP stream. Logger will flush requests every time
	// this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
	// 1 second.
	BufferFlushInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=buffer_flush_interval,json=bufferFlushInterval,proto3" json:"buffer_flush_interval,omitempty"`
	// Soft size limit in bytes for access log entries buffer. The logger will buffer requests until
	// this limit it hit, or every time flush interval is elapsed, whichever comes first. When the buffer
	// limit is hit, the logger will immediately flush the buffer contents. Setting it to zero effectively
	// disables the batching. Defaults to 16384.
	BufferSizeBytes *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=buffer_size_bytes,json=bufferSizeBytes,proto3" json:"buffer_size_bytes,omitempty"`
	// A struct that represents the record that is sent for each log entry.
	// https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1#entry
	// Values are rendered as strings, numbers, or boolean values as appropriate.
	// Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
	// See :ref:`format string<config_access_log_format_strings>` documentation for a specific command operator details.
	//
	// .. validated-code-block:: yaml
	//
	//	:type-name: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig
	//
	//	record:
	//	  status: "%RESPONSE_CODE%"
	//	  message: "%LOCAL_REPLY_BODY%"
	//
	// The following msgpack record would be created:
	//
	// .. code-block:: json
	//
	//	{
	//	  "status": 500,
	//	  "message": "My error message"
	//	}
	Record *structpb.Struct `protobuf:"bytes,6,opt,name=record,proto3" json:"record,omitempty"`
	// Optional retry, in case upstream connection has failed. If this field is not set, the default values will be applied,
	// as specified in the :ref:`RetryOptions <envoy_v3_api_msg_extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptions>`
	// configuration.
	RetryOptions *FluentdAccessLogConfig_RetryOptions `protobuf:"bytes,7,opt,name=retry_options,json=retryOptions,proto3" json:"retry_options,omitempty"`
	// Specifies a collection of Formatter plugins that can be called from the access log configuration.
	// See the formatters extensions documentation for details.
	// [#extension-category: envoy.formatter]
	Formatters    []*v3.TypedExtensionConfig `protobuf:"bytes,8,rep,name=formatters,proto3" json:"formatters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FluentdAccessLogConfig) Reset() {
	*x = FluentdAccessLogConfig{}
	mi := &file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FluentdAccessLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentdAccessLogConfig) ProtoMessage() {}

func (x *FluentdAccessLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentdAccessLogConfig.ProtoReflect.Descriptor instead.
func (*FluentdAccessLogConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescGZIP(), []int{0}
}

func (x *FluentdAccessLogConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *FluentdAccessLogConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FluentdAccessLogConfig) GetStatPrefix() string {
	if x != nil {
		return x.StatPrefix
	}
	return ""
}

func (x *FluentdAccessLogConfig) GetBufferFlushInterval() *durationpb.Duration {
	if x != nil {
		return x.BufferFlushInterval
	}
	return nil
}

func (x *FluentdAccessLogConfig) GetBufferSizeBytes() *wrapperspb.UInt32Value {
	if x != nil {
		return x.BufferSizeBytes
	}
	return nil
}

func (x *FluentdAccessLogConfig) GetRecord() *structpb.Struct {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *FluentdAccessLogConfig) GetRetryOptions() *FluentdAccessLogConfig_RetryOptions {
	if x != nil {
		return x.RetryOptions
	}
	return nil
}

func (x *FluentdAccessLogConfig) GetFormatters() []*v3.TypedExtensionConfig {
	if x != nil {
		return x.Formatters
	}
	return nil
}

type FluentdAccessLogConfig_RetryOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of times the logger will attempt to connect to the upstream during reconnects.
	// By default, there is no limit. The logger will attempt to reconnect to the upstream each time
	// connecting to the upstream failed or the upstream connection had been closed for any reason.
	MaxConnectAttempts *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=max_connect_attempts,json=maxConnectAttempts,proto3" json:"max_connect_attempts,omitempty"`
	// Sets the backoff strategy. If this value is not set, the default base backoff interval is 500
	// milliseconds and the default max backoff interval is 5 seconds (10 times the base interval).
	BackoffOptions *v3.BackoffStrategy `protobuf:"bytes,2,opt,name=backoff_options,json=backoffOptions,proto3" json:"backoff_options,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FluentdAccessLogConfig_RetryOptions) Reset() {
	*x = FluentdAccessLogConfig_RetryOptions{}
	mi := &file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FluentdAccessLogConfig_RetryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentdAccessLogConfig_RetryOptions) ProtoMessage() {}

func (x *FluentdAccessLogConfig_RetryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentdAccessLogConfig_RetryOptions.ProtoReflect.Descriptor instead.
func (*FluentdAccessLogConfig_RetryOptions) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FluentdAccessLogConfig_RetryOptions) GetMaxConnectAttempts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConnectAttempts
	}
	return nil
}

func (x *FluentdAccessLogConfig_RetryOptions) GetBackoffOptions() *v3.BackoffStrategy {
	if x != nil {
		return x.BackoffOptions
	}
	return nil
}

var File_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto protoreflect.FileDescriptor

const file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDesc = "" +
	"\n" +
	"8envoy/extensions/access_loggers/fluentd/v3/fluentd.proto\x12*envoy.extensions.access_loggers.fluentd.v3\x1a\"envoy/config/core/v3/backoff.proto\x1a$envoy/config/core/v3/extension.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xd1\x05\n" +
	"\x16FluentdAccessLogConfig\x12!\n" +
	"\acluster\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\acluster\x12\x19\n" +
	"\x03tag\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x03tag\x12(\n" +
	"\vstat_prefix\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"statPrefix\x12W\n" +
	"\x15buffer_flush_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\x13bufferFlushInterval\x12H\n" +
	"\x11buffer_size_bytes\x18\x05 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x0fbufferSizeBytes\x129\n" +
	"\x06record\x18\x06 \x01(\v2\x17.google.protobuf.StructB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06record\x12t\n" +
	"\rretry_options\x18\a \x01(\v2O.envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptionsR\fretryOptions\x12J\n" +
	"\n" +
	"formatters\x18\b \x03(\v2*.envoy.config.core.v3.TypedExtensionConfigR\n" +
	"formatters\x1a\xae\x01\n" +
	"\fRetryOptions\x12N\n" +
	"\x14max_connect_attempts\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x12maxConnectAttempts\x12N\n" +
	"\x0fbackoff_options\x18\x02 \x01(\v2%.envoy.config.core.v3.BackoffStrategyR\x0ebackoffOptionsB\xaf\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"8io.envoyproxy.envoy.extensions.access_loggers.fluentd.v3B\fFluentdProtoP\x01Z[github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/fluentd/v3;fluentdv3b\x06proto3"

var (
	file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescOnce sync.Once
	file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescData []byte
)

func file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescGZIP() []byte {
	file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDesc), len(file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDesc)))
	})
	return file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDescData
}

var file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_goTypes = []any{
	(*FluentdAccessLogConfig)(nil),              // 0: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig
	(*FluentdAccessLogConfig_RetryOptions)(nil), // 1: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptions
	(*durationpb.Duration)(nil),                 // 2: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),              // 3: google.protobuf.UInt32Value
	(*structpb.Struct)(nil),                     // 4: google.protobuf.Struct
	(*v3.TypedExtensionConfig)(nil),             // 5: envoy.config.core.v3.TypedExtensionConfig
	(*v3.BackoffStrategy)(nil),                  // 6: envoy.config.core.v3.BackoffStrategy
}
var file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_depIdxs = []int32{
	2, // 0: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.buffer_flush_interval:type_name -> google.protobuf.Duration
	3, // 1: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.buffer_size_bytes:type_name -> google.protobuf.UInt32Value
	4, // 2: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.record:type_name -> google.protobuf.Struct
	1, // 3: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.retry_options:type_name -> envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptions
	5, // 4: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.formatters:type_name -> envoy.config.core.v3.TypedExtensionConfig
	3, // 5: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptions.max_connect_attempts:type_name -> google.protobuf.UInt32Value
	6, // 6: envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig.RetryOptions.backoff_options:type_name -> envoy.config.core.v3.BackoffStrategy
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_init() }
func file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_init() {
	if File_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDesc), len(file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_msgTypes,
	}.Build()
	File_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto = out.File
	file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_goTypes = nil
	file_envoy_extensions_access_loggers_fluentd_v3_fluentd_proto_depIdxs = nil
}
