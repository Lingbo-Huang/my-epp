// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/access_loggers/stream/v3/stream.proto

package streamv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
// that writes log entries directly to the operating system's standard output.
// [#extension: envoy.access_loggers.stdout]
type StdoutAccessLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AccessLogFormat:
	//
	//	*StdoutAccessLog_LogFormat
	AccessLogFormat isStdoutAccessLog_AccessLogFormat `protobuf_oneof:"access_log_format"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StdoutAccessLog) Reset() {
	*x = StdoutAccessLog{}
	mi := &file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StdoutAccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StdoutAccessLog) ProtoMessage() {}

func (x *StdoutAccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StdoutAccessLog.ProtoReflect.Descriptor instead.
func (*StdoutAccessLog) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescGZIP(), []int{0}
}

func (x *StdoutAccessLog) GetAccessLogFormat() isStdoutAccessLog_AccessLogFormat {
	if x != nil {
		return x.AccessLogFormat
	}
	return nil
}

func (x *StdoutAccessLog) GetLogFormat() *v3.SubstitutionFormatString {
	if x != nil {
		if x, ok := x.AccessLogFormat.(*StdoutAccessLog_LogFormat); ok {
			return x.LogFormat
		}
	}
	return nil
}

type isStdoutAccessLog_AccessLogFormat interface {
	isStdoutAccessLog_AccessLogFormat()
}

type StdoutAccessLog_LogFormat struct {
	// Configuration to form access log data and format.
	// If not specified, use :ref:`default format <config_access_log_default_format>`.
	LogFormat *v3.SubstitutionFormatString `protobuf:"bytes,1,opt,name=log_format,json=logFormat,proto3,oneof"`
}

func (*StdoutAccessLog_LogFormat) isStdoutAccessLog_AccessLogFormat() {}

// Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
// that writes log entries directly to the operating system's standard error.
// [#extension: envoy.access_loggers.stderr]
type StderrAccessLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AccessLogFormat:
	//
	//	*StderrAccessLog_LogFormat
	AccessLogFormat isStderrAccessLog_AccessLogFormat `protobuf_oneof:"access_log_format"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StderrAccessLog) Reset() {
	*x = StderrAccessLog{}
	mi := &file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StderrAccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StderrAccessLog) ProtoMessage() {}

func (x *StderrAccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StderrAccessLog.ProtoReflect.Descriptor instead.
func (*StderrAccessLog) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescGZIP(), []int{1}
}

func (x *StderrAccessLog) GetAccessLogFormat() isStderrAccessLog_AccessLogFormat {
	if x != nil {
		return x.AccessLogFormat
	}
	return nil
}

func (x *StderrAccessLog) GetLogFormat() *v3.SubstitutionFormatString {
	if x != nil {
		if x, ok := x.AccessLogFormat.(*StderrAccessLog_LogFormat); ok {
			return x.LogFormat
		}
	}
	return nil
}

type isStderrAccessLog_AccessLogFormat interface {
	isStderrAccessLog_AccessLogFormat()
}

type StderrAccessLog_LogFormat struct {
	// Configuration to form access log data and format.
	// If not specified, use :ref:`default format <config_access_log_default_format>`.
	LogFormat *v3.SubstitutionFormatString `protobuf:"bytes,1,opt,name=log_format,json=logFormat,proto3,oneof"`
}

func (*StderrAccessLog_LogFormat) isStderrAccessLog_AccessLogFormat() {}

var File_envoy_extensions_access_loggers_stream_v3_stream_proto protoreflect.FileDescriptor

const file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDesc = "" +
	"\n" +
	"6envoy/extensions/access_loggers/stream/v3/stream.proto\x12)envoy.extensions.access_loggers.stream.v3\x1a5envoy/config/core/v3/substitution_format_string.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\x81\x01\n" +
	"\x0fStdoutAccessLog\x12Y\n" +
	"\n" +
	"log_format\x18\x01 \x01(\v2..envoy.config.core.v3.SubstitutionFormatStringB\b\xfaB\x05\x8a\x01\x02\x10\x01H\x00R\tlogFormatB\x13\n" +
	"\x11access_log_format\"\x81\x01\n" +
	"\x0fStderrAccessLog\x12Y\n" +
	"\n" +
	"log_format\x18\x01 \x01(\v2..envoy.config.core.v3.SubstitutionFormatStringB\b\xfaB\x05\x8a\x01\x02\x10\x01H\x00R\tlogFormatB\x13\n" +
	"\x11access_log_formatB\xab\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"7io.envoyproxy.envoy.extensions.access_loggers.stream.v3B\vStreamProtoP\x01ZYgithub.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/stream/v3;streamv3b\x06proto3"

var (
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescOnce sync.Once
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescData []byte
)

func file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescGZIP() []byte {
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDesc), len(file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDesc)))
	})
	return file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDescData
}

var file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_access_loggers_stream_v3_stream_proto_goTypes = []any{
	(*StdoutAccessLog)(nil),             // 0: envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
	(*StderrAccessLog)(nil),             // 1: envoy.extensions.access_loggers.stream.v3.StderrAccessLog
	(*v3.SubstitutionFormatString)(nil), // 2: envoy.config.core.v3.SubstitutionFormatString
}
var file_envoy_extensions_access_loggers_stream_v3_stream_proto_depIdxs = []int32{
	2, // 0: envoy.extensions.access_loggers.stream.v3.StdoutAccessLog.log_format:type_name -> envoy.config.core.v3.SubstitutionFormatString
	2, // 1: envoy.extensions.access_loggers.stream.v3.StderrAccessLog.log_format:type_name -> envoy.config.core.v3.SubstitutionFormatString
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_extensions_access_loggers_stream_v3_stream_proto_init() }
func file_envoy_extensions_access_loggers_stream_v3_stream_proto_init() {
	if File_envoy_extensions_access_loggers_stream_v3_stream_proto != nil {
		return
	}
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[0].OneofWrappers = []any{
		(*StdoutAccessLog_LogFormat)(nil),
	}
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes[1].OneofWrappers = []any{
		(*StderrAccessLog_LogFormat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDesc), len(file_envoy_extensions_access_loggers_stream_v3_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_access_loggers_stream_v3_stream_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_access_loggers_stream_v3_stream_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_access_loggers_stream_v3_stream_proto_msgTypes,
	}.Build()
	File_envoy_extensions_access_loggers_stream_v3_stream_proto = out.File
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_goTypes = nil
	file_envoy_extensions_access_loggers_stream_v3_stream_proto_depIdxs = nil
}
