// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/compressor/v3/compressor.proto

package compressorv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#next-free-field: 10]
type Compressor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum response length, in bytes, which will trigger compression. The default value is 30.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
	ContentLength *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// Set of strings that allows specifying which mime-types yield compression; e.g.,
	// application/json, text/html, etc. When this field is not defined, compression will be applied
	// to the following mime-types: "application/javascript", "application/json",
	// "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
	// and their synonyms.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
	ContentType []string `protobuf:"bytes,2,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// If true, disables compression when the response contains an etag header. When it is false, the
	// filter will preserve weak etags and remove the ones that require strong validation.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
	DisableOnEtagHeader bool `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	//
	// .. attention::
	//
	//	To avoid interfering with other compression filters in the same chain use this option in
	//	the filter closest to the upstream.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	// Runtime flag that controls whether the filter is enabled or not. If set to false, the
	// filter will operate as a pass-through filter, unless overridden by
	// CompressorPerRoute. If not specified, defaults to enabled.
	//
	// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
	RuntimeEnabled *v3.RuntimeFeatureFlag `protobuf:"bytes,5,opt,name=runtime_enabled,json=runtimeEnabled,proto3" json:"runtime_enabled,omitempty"`
	// A compressor library to use for compression. Currently only
	// :ref:`envoy.compression.gzip.compressor<envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`
	// is included in Envoy.
	// [#extension-category: envoy.compression.compressor]
	CompressorLibrary *v3.TypedExtensionConfig `protobuf:"bytes,6,opt,name=compressor_library,json=compressorLibrary,proto3" json:"compressor_library,omitempty"`
	// Configuration for request compression. Compression is disabled by default if left empty.
	RequestDirectionConfig *Compressor_RequestDirectionConfig `protobuf:"bytes,7,opt,name=request_direction_config,json=requestDirectionConfig,proto3" json:"request_direction_config,omitempty"`
	// Configuration for response compression. Compression is enabled by default if left empty.
	//
	// .. attention::
	//
	//	If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
	//	such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
	//	``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
	//
	//	Also all the statistics related to response compression will be rooted in
	//	``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*``
	//	instead of
	//	``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*``.
	ResponseDirectionConfig *Compressor_ResponseDirectionConfig `protobuf:"bytes,8,opt,name=response_direction_config,json=responseDirectionConfig,proto3" json:"response_direction_config,omitempty"`
	// If true, chooses this compressor first to do compression when the q-values in “Accept-Encoding“ are same.
	// The last compressor which enables choose_first will be chosen if multiple compressor filters in the chain have choose_first as true.
	ChooseFirst   bool `protobuf:"varint,9,opt,name=choose_first,json=chooseFirst,proto3" json:"choose_first,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compressor) Reset() {
	*x = Compressor{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compressor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compressor) ProtoMessage() {}

func (x *Compressor) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compressor.ProtoReflect.Descriptor instead.
func (*Compressor) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
func (x *Compressor) GetContentLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ContentLength
	}
	return nil
}

// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
func (x *Compressor) GetContentType() []string {
	if x != nil {
		return x.ContentType
	}
	return nil
}

// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
func (x *Compressor) GetDisableOnEtagHeader() bool {
	if x != nil {
		return x.DisableOnEtagHeader
	}
	return false
}

// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
func (x *Compressor) GetRemoveAcceptEncodingHeader() bool {
	if x != nil {
		return x.RemoveAcceptEncodingHeader
	}
	return false
}

// Deprecated: Marked as deprecated in envoy/extensions/filters/http/compressor/v3/compressor.proto.
func (x *Compressor) GetRuntimeEnabled() *v3.RuntimeFeatureFlag {
	if x != nil {
		return x.RuntimeEnabled
	}
	return nil
}

func (x *Compressor) GetCompressorLibrary() *v3.TypedExtensionConfig {
	if x != nil {
		return x.CompressorLibrary
	}
	return nil
}

func (x *Compressor) GetRequestDirectionConfig() *Compressor_RequestDirectionConfig {
	if x != nil {
		return x.RequestDirectionConfig
	}
	return nil
}

func (x *Compressor) GetResponseDirectionConfig() *Compressor_ResponseDirectionConfig {
	if x != nil {
		return x.ResponseDirectionConfig
	}
	return nil
}

func (x *Compressor) GetChooseFirst() bool {
	if x != nil {
		return x.ChooseFirst
	}
	return false
}

// Per-route overrides of “ResponseDirectionConfig“. Anything added here should be optional,
// to allow overriding arbitrary subsets of configuration. Omitted fields must have no effect.
type ResponseDirectionOverrides struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, overrides the filter-level
	// :ref:`remove_accept_encoding_header<envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.remove_accept_encoding_header>`.
	RemoveAcceptEncodingHeader *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ResponseDirectionOverrides) Reset() {
	*x = ResponseDirectionOverrides{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseDirectionOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDirectionOverrides) ProtoMessage() {}

func (x *ResponseDirectionOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDirectionOverrides.ProtoReflect.Descriptor instead.
func (*ResponseDirectionOverrides) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseDirectionOverrides) GetRemoveAcceptEncodingHeader() *wrapperspb.BoolValue {
	if x != nil {
		return x.RemoveAcceptEncodingHeader
	}
	return nil
}

// Per-route overrides. As per-route overrides are needed, they should be
// added here, mirroring the structure of “Compressor“. All fields should be
// optional, to allow overriding arbitrary subsets of configuration.
type CompressorOverrides struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If present, response compression is enabled.
	ResponseDirectionConfig *ResponseDirectionOverrides `protobuf:"bytes,1,opt,name=response_direction_config,json=responseDirectionConfig,proto3" json:"response_direction_config,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CompressorOverrides) Reset() {
	*x = CompressorOverrides{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressorOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressorOverrides) ProtoMessage() {}

func (x *CompressorOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressorOverrides.ProtoReflect.Descriptor instead.
func (*CompressorOverrides) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{2}
}

func (x *CompressorOverrides) GetResponseDirectionConfig() *ResponseDirectionOverrides {
	if x != nil {
		return x.ResponseDirectionConfig
	}
	return nil
}

type CompressorPerRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Override:
	//
	//	*CompressorPerRoute_Disabled
	//	*CompressorPerRoute_Overrides
	Override      isCompressorPerRoute_Override `protobuf_oneof:"override"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompressorPerRoute) Reset() {
	*x = CompressorPerRoute{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressorPerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressorPerRoute) ProtoMessage() {}

func (x *CompressorPerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressorPerRoute.ProtoReflect.Descriptor instead.
func (*CompressorPerRoute) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{3}
}

func (x *CompressorPerRoute) GetOverride() isCompressorPerRoute_Override {
	if x != nil {
		return x.Override
	}
	return nil
}

func (x *CompressorPerRoute) GetDisabled() bool {
	if x != nil {
		if x, ok := x.Override.(*CompressorPerRoute_Disabled); ok {
			return x.Disabled
		}
	}
	return false
}

func (x *CompressorPerRoute) GetOverrides() *CompressorOverrides {
	if x != nil {
		if x, ok := x.Override.(*CompressorPerRoute_Overrides); ok {
			return x.Overrides
		}
	}
	return nil
}

type isCompressorPerRoute_Override interface {
	isCompressorPerRoute_Override()
}

type CompressorPerRoute_Disabled struct {
	// If set, the filter will operate as a pass-through filter.
	// Overrides Compressor.runtime_enabled and CommonDirectionConfig.enabled.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3,oneof"`
}

type CompressorPerRoute_Overrides struct {
	// Per-route overrides. Fields set here will override corresponding fields in “Compressor“.
	Overrides *CompressorOverrides `protobuf:"bytes,2,opt,name=overrides,proto3,oneof"`
}

func (*CompressorPerRoute_Disabled) isCompressorPerRoute_Override() {}

func (*CompressorPerRoute_Overrides) isCompressorPerRoute_Override() {}

type Compressor_CommonDirectionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Runtime flag that controls whether compression is enabled or not for the direction this
	// common config is put in. If set to false, the filter will operate as a pass-through filter
	// in the chosen direction, unless overridden by CompressorPerRoute.
	// If the field is omitted, the filter will be enabled.
	Enabled *v3.RuntimeFeatureFlag `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Minimum value of Content-Length header of request or response messages (depending on the direction
	// this common config is put in), in bytes, which will trigger compression. The default value is 30.
	MinContentLength *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=min_content_length,json=minContentLength,proto3" json:"min_content_length,omitempty"`
	// Set of strings that allows specifying which mime-types yield compression; e.g.,
	// application/json, text/html, etc. When this field is not defined, compression will be applied
	// to the following mime-types: "application/javascript", "application/json",
	// "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
	// and their synonyms.
	ContentType   []string `protobuf:"bytes,3,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compressor_CommonDirectionConfig) Reset() {
	*x = Compressor_CommonDirectionConfig{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compressor_CommonDirectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compressor_CommonDirectionConfig) ProtoMessage() {}

func (x *Compressor_CommonDirectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compressor_CommonDirectionConfig.ProtoReflect.Descriptor instead.
func (*Compressor_CommonDirectionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Compressor_CommonDirectionConfig) GetEnabled() *v3.RuntimeFeatureFlag {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Compressor_CommonDirectionConfig) GetMinContentLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinContentLength
	}
	return nil
}

func (x *Compressor_CommonDirectionConfig) GetContentType() []string {
	if x != nil {
		return x.ContentType
	}
	return nil
}

// Configuration for filter behavior on the request direction.
type Compressor_RequestDirectionConfig struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	CommonConfig  *Compressor_CommonDirectionConfig `protobuf:"bytes,1,opt,name=common_config,json=commonConfig,proto3" json:"common_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compressor_RequestDirectionConfig) Reset() {
	*x = Compressor_RequestDirectionConfig{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compressor_RequestDirectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compressor_RequestDirectionConfig) ProtoMessage() {}

func (x *Compressor_RequestDirectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compressor_RequestDirectionConfig.ProtoReflect.Descriptor instead.
func (*Compressor_RequestDirectionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Compressor_RequestDirectionConfig) GetCommonConfig() *Compressor_CommonDirectionConfig {
	if x != nil {
		return x.CommonConfig
	}
	return nil
}

// Configuration for filter behavior on the response direction.
type Compressor_ResponseDirectionConfig struct {
	state        protoimpl.MessageState            `protogen:"open.v1"`
	CommonConfig *Compressor_CommonDirectionConfig `protobuf:"bytes,1,opt,name=common_config,json=commonConfig,proto3" json:"common_config,omitempty"`
	// If true, disables compression when the response contains an etag header. When it is false, the
	// filter will preserve weak etags and remove the ones that require strong validation.
	DisableOnEtagHeader bool `protobuf:"varint,2,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	//
	// .. attention::
	//
	//	To avoid interfering with other compression filters in the same chain use this option in
	//	the filter closest to the upstream.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,3,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	// Set of response codes for which compression is disabled, e.g. 206 Partial Content should not
	// be compressed.
	UncompressibleResponseCodes []uint32 `protobuf:"varint,4,rep,packed,name=uncompressible_response_codes,json=uncompressibleResponseCodes,proto3" json:"uncompressible_response_codes,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Compressor_ResponseDirectionConfig) Reset() {
	*x = Compressor_ResponseDirectionConfig{}
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compressor_ResponseDirectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compressor_ResponseDirectionConfig) ProtoMessage() {}

func (x *Compressor_ResponseDirectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compressor_ResponseDirectionConfig.ProtoReflect.Descriptor instead.
func (*Compressor_ResponseDirectionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Compressor_ResponseDirectionConfig) GetCommonConfig() *Compressor_CommonDirectionConfig {
	if x != nil {
		return x.CommonConfig
	}
	return nil
}

func (x *Compressor_ResponseDirectionConfig) GetDisableOnEtagHeader() bool {
	if x != nil {
		return x.DisableOnEtagHeader
	}
	return false
}

func (x *Compressor_ResponseDirectionConfig) GetRemoveAcceptEncodingHeader() bool {
	if x != nil {
		return x.RemoveAcceptEncodingHeader
	}
	return false
}

func (x *Compressor_ResponseDirectionConfig) GetUncompressibleResponseCodes() []uint32 {
	if x != nil {
		return x.UncompressibleResponseCodes
	}
	return nil
}

var File_envoy_extensions_filters_http_compressor_v3_compressor_proto protoreflect.FileDescriptor

const file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDesc = "" +
	"\n" +
	"<envoy/extensions/filters/http/compressor/v3/compressor.proto\x12+envoy.extensions.filters.http.compressor.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a$envoy/config/core/v3/extension.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a#envoy/annotations/deprecation.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\x97\f\n" +
	"\n" +
	"Compressor\x12P\n" +
	"\x0econtent_length\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\rcontentLength\x12.\n" +
	"\fcontent_type\x18\x02 \x03(\tB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\vcontentType\x12@\n" +
	"\x16disable_on_etag_header\x18\x03 \x01(\bB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x13disableOnEtagHeader\x12N\n" +
	"\x1dremove_accept_encoding_header\x18\x04 \x01(\bB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x1aremoveAcceptEncodingHeader\x12^\n" +
	"\x0fruntime_enabled\x18\x05 \x01(\v2(.envoy.config.core.v3.RuntimeFeatureFlagB\v\x92ǆ\xd8\x04\x033.0\x18\x01R\x0eruntimeEnabled\x12c\n" +
	"\x12compressor_library\x18\x06 \x01(\v2*.envoy.config.core.v3.TypedExtensionConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x11compressorLibrary\x12\x88\x01\n" +
	"\x18request_direction_config\x18\a \x01(\v2N.envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfigR\x16requestDirectionConfig\x12\x8b\x01\n" +
	"\x19response_direction_config\x18\b \x01(\v2O.envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfigR\x17responseDirectionConfig\x12!\n" +
	"\fchoose_first\x18\t \x01(\bR\vchooseFirst\x1a\xca\x01\n" +
	"\x15CommonDirectionConfig\x12B\n" +
	"\aenabled\x18\x01 \x01(\v2(.envoy.config.core.v3.RuntimeFeatureFlagR\aenabled\x12J\n" +
	"\x12min_content_length\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x10minContentLength\x12!\n" +
	"\fcontent_type\x18\x03 \x03(\tR\vcontentType\x1a\x8c\x01\n" +
	"\x16RequestDirectionConfig\x12r\n" +
	"\rcommon_config\x18\x01 \x01(\v2M.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigR\fcommonConfig\x1a\xdd\x02\n" +
	"\x17ResponseDirectionConfig\x12r\n" +
	"\rcommon_config\x18\x01 \x01(\v2M.envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfigR\fcommonConfig\x123\n" +
	"\x16disable_on_etag_header\x18\x02 \x01(\bR\x13disableOnEtagHeader\x12A\n" +
	"\x1dremove_accept_encoding_header\x18\x03 \x01(\bR\x1aremoveAcceptEncodingHeader\x12V\n" +
	"\x1duncompressible_response_codes\x18\x04 \x03(\rB\x12\xfaB\x0f\x92\x01\f\x18\x01\"\b*\x06\x10\xd8\x04(\xc8\x01R\x1buncompressibleResponseCodes:8\x9aň\x1e3\n" +
	"1envoy.config.filter.http.compressor.v2.Compressor\"{\n" +
	"\x1aResponseDirectionOverrides\x12]\n" +
	"\x1dremove_accept_encoding_header\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x1aremoveAcceptEncodingHeader\"\x9b\x01\n" +
	"\x13CompressorOverrides\x12\x83\x01\n" +
	"\x19response_direction_config\x18\x01 \x01(\v2G.envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverridesR\x17responseDirectionConfig\"\xae\x01\n" +
	"\x12CompressorPerRoute\x12%\n" +
	"\bdisabled\x18\x01 \x01(\bB\a\xfaB\x04j\x02\b\x01H\x00R\bdisabled\x12`\n" +
	"\toverrides\x18\x02 \x01(\v2@.envoy.extensions.filters.http.compressor.v3.CompressorOverridesH\x00R\toverridesB\x0f\n" +
	"\boverride\x12\x03\xf8B\x01B\xb7\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"9io.envoyproxy.envoy.extensions.filters.http.compressor.v3B\x0fCompressorProtoP\x01Z_github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/compressor/v3;compressorv3b\x06proto3"

var (
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescData []byte
)

func file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDesc), len(file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDesc)))
	})
	return file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDescData
}

var file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_envoy_extensions_filters_http_compressor_v3_compressor_proto_goTypes = []any{
	(*Compressor)(nil),                         // 0: envoy.extensions.filters.http.compressor.v3.Compressor
	(*ResponseDirectionOverrides)(nil),         // 1: envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides
	(*CompressorOverrides)(nil),                // 2: envoy.extensions.filters.http.compressor.v3.CompressorOverrides
	(*CompressorPerRoute)(nil),                 // 3: envoy.extensions.filters.http.compressor.v3.CompressorPerRoute
	(*Compressor_CommonDirectionConfig)(nil),   // 4: envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig
	(*Compressor_RequestDirectionConfig)(nil),  // 5: envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig
	(*Compressor_ResponseDirectionConfig)(nil), // 6: envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig
	(*wrapperspb.UInt32Value)(nil),             // 7: google.protobuf.UInt32Value
	(*v3.RuntimeFeatureFlag)(nil),              // 8: envoy.config.core.v3.RuntimeFeatureFlag
	(*v3.TypedExtensionConfig)(nil),            // 9: envoy.config.core.v3.TypedExtensionConfig
	(*wrapperspb.BoolValue)(nil),               // 10: google.protobuf.BoolValue
}
var file_envoy_extensions_filters_http_compressor_v3_compressor_proto_depIdxs = []int32{
	7,  // 0: envoy.extensions.filters.http.compressor.v3.Compressor.content_length:type_name -> google.protobuf.UInt32Value
	8,  // 1: envoy.extensions.filters.http.compressor.v3.Compressor.runtime_enabled:type_name -> envoy.config.core.v3.RuntimeFeatureFlag
	9,  // 2: envoy.extensions.filters.http.compressor.v3.Compressor.compressor_library:type_name -> envoy.config.core.v3.TypedExtensionConfig
	5,  // 3: envoy.extensions.filters.http.compressor.v3.Compressor.request_direction_config:type_name -> envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig
	6,  // 4: envoy.extensions.filters.http.compressor.v3.Compressor.response_direction_config:type_name -> envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig
	10, // 5: envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides.remove_accept_encoding_header:type_name -> google.protobuf.BoolValue
	1,  // 6: envoy.extensions.filters.http.compressor.v3.CompressorOverrides.response_direction_config:type_name -> envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides
	2,  // 7: envoy.extensions.filters.http.compressor.v3.CompressorPerRoute.overrides:type_name -> envoy.extensions.filters.http.compressor.v3.CompressorOverrides
	8,  // 8: envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.enabled:type_name -> envoy.config.core.v3.RuntimeFeatureFlag
	7,  // 9: envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig.min_content_length:type_name -> google.protobuf.UInt32Value
	4,  // 10: envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig.common_config:type_name -> envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig
	4,  // 11: envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.common_config:type_name -> envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_compressor_v3_compressor_proto_init() }
func file_envoy_extensions_filters_http_compressor_v3_compressor_proto_init() {
	if File_envoy_extensions_filters_http_compressor_v3_compressor_proto != nil {
		return
	}
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes[3].OneofWrappers = []any{
		(*CompressorPerRoute_Disabled)(nil),
		(*CompressorPerRoute_Overrides)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDesc), len(file_envoy_extensions_filters_http_compressor_v3_compressor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_compressor_v3_compressor_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_compressor_v3_compressor_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_compressor_v3_compressor_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_compressor_v3_compressor_proto = out.File
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_goTypes = nil
	file_envoy_extensions_filters_http_compressor_v3_compressor_proto_depIdxs = nil
}
