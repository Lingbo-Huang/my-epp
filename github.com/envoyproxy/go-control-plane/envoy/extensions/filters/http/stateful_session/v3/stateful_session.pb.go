// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/stateful_session/v3/stateful_session.proto

package stateful_sessionv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatefulSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the implementation of session state. This session state is used to store and retrieve the address of the
	// upstream host assigned to the session.
	//
	// [#extension-category: envoy.http.stateful_session]
	SessionState *v3.TypedExtensionConfig `protobuf:"bytes,1,opt,name=session_state,json=sessionState,proto3" json:"session_state,omitempty"`
	// Determines whether the HTTP request must be strictly routed to the requested destination. When set to “true“,
	// if the requested destination is unavailable, Envoy will return a 503 status code. The default value is “false“,
	// which allows Envoy to fall back to its load balancing mechanism. In this case, if the requested destination is not
	// found, the request will be routed according to the load balancing algorithm.
	Strict        bool `protobuf:"varint,2,opt,name=strict,proto3" json:"strict,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatefulSession) Reset() {
	*x = StatefulSession{}
	mi := &file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatefulSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulSession) ProtoMessage() {}

func (x *StatefulSession) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulSession.ProtoReflect.Descriptor instead.
func (*StatefulSession) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescGZIP(), []int{0}
}

func (x *StatefulSession) GetSessionState() *v3.TypedExtensionConfig {
	if x != nil {
		return x.SessionState
	}
	return nil
}

func (x *StatefulSession) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

type StatefulSessionPerRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Override:
	//
	//	*StatefulSessionPerRoute_Disabled
	//	*StatefulSessionPerRoute_StatefulSession
	Override      isStatefulSessionPerRoute_Override `protobuf_oneof:"override"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatefulSessionPerRoute) Reset() {
	*x = StatefulSessionPerRoute{}
	mi := &file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatefulSessionPerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulSessionPerRoute) ProtoMessage() {}

func (x *StatefulSessionPerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulSessionPerRoute.ProtoReflect.Descriptor instead.
func (*StatefulSessionPerRoute) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescGZIP(), []int{1}
}

func (x *StatefulSessionPerRoute) GetOverride() isStatefulSessionPerRoute_Override {
	if x != nil {
		return x.Override
	}
	return nil
}

func (x *StatefulSessionPerRoute) GetDisabled() bool {
	if x != nil {
		if x, ok := x.Override.(*StatefulSessionPerRoute_Disabled); ok {
			return x.Disabled
		}
	}
	return false
}

func (x *StatefulSessionPerRoute) GetStatefulSession() *StatefulSession {
	if x != nil {
		if x, ok := x.Override.(*StatefulSessionPerRoute_StatefulSession); ok {
			return x.StatefulSession
		}
	}
	return nil
}

type isStatefulSessionPerRoute_Override interface {
	isStatefulSessionPerRoute_Override()
}

type StatefulSessionPerRoute_Disabled struct {
	// Disable the stateful session filter for this particular vhost or route. If disabled is
	// specified in multiple per-filter-configs, the most specific one will be used.
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3,oneof"`
}

type StatefulSessionPerRoute_StatefulSession struct {
	// Per-route stateful session configuration that can be served by RDS or static route table.
	StatefulSession *StatefulSession `protobuf:"bytes,2,opt,name=stateful_session,json=statefulSession,proto3,oneof"`
}

func (*StatefulSessionPerRoute_Disabled) isStatefulSessionPerRoute_Override() {}

func (*StatefulSessionPerRoute_StatefulSession) isStatefulSessionPerRoute_Override() {}

var File_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto protoreflect.FileDescriptor

const file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDesc = "" +
	"\n" +
	"Henvoy/extensions/filters/http/stateful_session/v3/stateful_session.proto\x121envoy.extensions.filters.http.stateful_session.v3\x1a$envoy/config/core/v3/extension.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"z\n" +
	"\x0fStatefulSession\x12O\n" +
	"\rsession_state\x18\x01 \x01(\v2*.envoy.config.core.v3.TypedExtensionConfigR\fsessionState\x12\x16\n" +
	"\x06strict\x18\x02 \x01(\bR\x06strict\"\xc2\x01\n" +
	"\x17StatefulSessionPerRoute\x12%\n" +
	"\bdisabled\x18\x01 \x01(\bB\a\xfaB\x04j\x02\b\x01H\x00R\bdisabled\x12o\n" +
	"\x10stateful_session\x18\x02 \x01(\v2B.envoy.extensions.filters.http.stateful_session.v3.StatefulSessionH\x00R\x0fstatefulSessionB\x0f\n" +
	"\boverride\x12\x03\xf8B\x01B\xce\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"?io.envoyproxy.envoy.extensions.filters.http.stateful_session.v3B\x14StatefulSessionProtoP\x01Zkgithub.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/stateful_session/v3;stateful_sessionv3b\x06proto3"

var (
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescData []byte
)

func file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDesc), len(file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDesc)))
	})
	return file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDescData
}

var file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_goTypes = []any{
	(*StatefulSession)(nil),         // 0: envoy.extensions.filters.http.stateful_session.v3.StatefulSession
	(*StatefulSessionPerRoute)(nil), // 1: envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute
	(*v3.TypedExtensionConfig)(nil), // 2: envoy.config.core.v3.TypedExtensionConfig
}
var file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_depIdxs = []int32{
	2, // 0: envoy.extensions.filters.http.stateful_session.v3.StatefulSession.session_state:type_name -> envoy.config.core.v3.TypedExtensionConfig
	0, // 1: envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute.stateful_session:type_name -> envoy.extensions.filters.http.stateful_session.v3.StatefulSession
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_init() }
func file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_init() {
	if File_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto != nil {
		return
	}
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes[1].OneofWrappers = []any{
		(*StatefulSessionPerRoute_Disabled)(nil),
		(*StatefulSessionPerRoute_StatefulSession)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDesc), len(file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto = out.File
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_goTypes = nil
	file_envoy_extensions_filters_http_stateful_session_v3_stateful_session_proto_depIdxs = nil
}
