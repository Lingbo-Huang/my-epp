// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/cdn_loop/v3/cdn_loop.proto

package cdn_loopv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CDN-Loop Header filter config. See the :ref:`configuration overview
// <config_http_filters_cdn_loop>` for more information.
type CdnLoopConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CDN identifier to use for loop checks and to append to the
	// CDN-Loop header.
	//
	// RFC 8586 calls this the cdn-id. The cdn-id can either be a
	// pseudonym or hostname the CDN is in control of.
	//
	// cdn_id must not be empty.
	CdnId string `protobuf:"bytes,1,opt,name=cdn_id,json=cdnId,proto3" json:"cdn_id,omitempty"`
	// The maximum allowed count of cdn_id in the downstream CDN-Loop
	// request header.
	//
	// The default of 0 means a request can transit the CdnLoopFilter
	// once. A value of 1 means that a request can transit the
	// CdnLoopFilter twice and so on.
	MaxAllowedOccurrences uint32 `protobuf:"varint,2,opt,name=max_allowed_occurrences,json=maxAllowedOccurrences,proto3" json:"max_allowed_occurrences,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CdnLoopConfig) Reset() {
	*x = CdnLoopConfig{}
	mi := &file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CdnLoopConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdnLoopConfig) ProtoMessage() {}

func (x *CdnLoopConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdnLoopConfig.ProtoReflect.Descriptor instead.
func (*CdnLoopConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescGZIP(), []int{0}
}

func (x *CdnLoopConfig) GetCdnId() string {
	if x != nil {
		return x.CdnId
	}
	return ""
}

func (x *CdnLoopConfig) GetMaxAllowedOccurrences() uint32 {
	if x != nil {
		return x.MaxAllowedOccurrences
	}
	return 0
}

var File_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto protoreflect.FileDescriptor

const file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDesc = "" +
	"\n" +
	"8envoy/extensions/filters/http/cdn_loop/v3/cdn_loop.proto\x12)envoy.extensions.filters.http.cdn_loop.v3\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"g\n" +
	"\rCdnLoopConfig\x12\x1e\n" +
	"\x06cdn_id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05cdnId\x126\n" +
	"\x17max_allowed_occurrences\x18\x02 \x01(\rR\x15maxAllowedOccurrencesB\xae\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"7io.envoyproxy.envoy.extensions.filters.http.cdn_loop.v3B\fCdnLoopProtoP\x01Z[github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/cdn_loop/v3;cdn_loopv3b\x06proto3"

var (
	file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescData []byte
)

func file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDesc), len(file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDesc)))
	})
	return file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDescData
}

var file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_goTypes = []any{
	(*CdnLoopConfig)(nil), // 0: envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig
}
var file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_init() }
func file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_init() {
	if File_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDesc), len(file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto = out.File
	file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_goTypes = nil
	file_envoy_extensions_filters_http_cdn_loop_v3_cdn_loop_proto_depIdxs = nil
}
