// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto

package adaptive_concurrencyv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v31 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration parameters for the gradient controller.
type GradientControllerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The percentile to use when summarizing aggregated samples. Defaults to p50.
	SampleAggregatePercentile *v3.Percent                                                 `protobuf:"bytes,1,opt,name=sample_aggregate_percentile,json=sampleAggregatePercentile,proto3" json:"sample_aggregate_percentile,omitempty"`
	ConcurrencyLimitParams    *GradientControllerConfig_ConcurrencyLimitCalculationParams `protobuf:"bytes,2,opt,name=concurrency_limit_params,json=concurrencyLimitParams,proto3" json:"concurrency_limit_params,omitempty"`
	MinRttCalcParams          *GradientControllerConfig_MinimumRTTCalculationParams       `protobuf:"bytes,3,opt,name=min_rtt_calc_params,json=minRttCalcParams,proto3" json:"min_rtt_calc_params,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GradientControllerConfig) Reset() {
	*x = GradientControllerConfig{}
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GradientControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientControllerConfig) ProtoMessage() {}

func (x *GradientControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientControllerConfig.ProtoReflect.Descriptor instead.
func (*GradientControllerConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescGZIP(), []int{0}
}

func (x *GradientControllerConfig) GetSampleAggregatePercentile() *v3.Percent {
	if x != nil {
		return x.SampleAggregatePercentile
	}
	return nil
}

func (x *GradientControllerConfig) GetConcurrencyLimitParams() *GradientControllerConfig_ConcurrencyLimitCalculationParams {
	if x != nil {
		return x.ConcurrencyLimitParams
	}
	return nil
}

func (x *GradientControllerConfig) GetMinRttCalcParams() *GradientControllerConfig_MinimumRTTCalculationParams {
	if x != nil {
		return x.MinRttCalcParams
	}
	return nil
}

type AdaptiveConcurrency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConcurrencyControllerConfig:
	//
	//	*AdaptiveConcurrency_GradientControllerConfig
	ConcurrencyControllerConfig isAdaptiveConcurrency_ConcurrencyControllerConfig `protobuf_oneof:"concurrency_controller_config"`
	// If set to false, the adaptive concurrency filter will operate as a pass-through filter. If the
	// message is unspecified, the filter will be enabled.
	Enabled *v31.RuntimeFeatureFlag `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// This field allows for a custom HTTP response status code to the downstream client when
	// the concurrency limit has been exceeded.
	// Defaults to 503 (Service Unavailable).
	//
	// .. note::
	//
	//	If this is set to < 400, 503 will be used instead.
	ConcurrencyLimitExceededStatus *v3.HttpStatus `protobuf:"bytes,3,opt,name=concurrency_limit_exceeded_status,json=concurrencyLimitExceededStatus,proto3" json:"concurrency_limit_exceeded_status,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *AdaptiveConcurrency) Reset() {
	*x = AdaptiveConcurrency{}
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdaptiveConcurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveConcurrency) ProtoMessage() {}

func (x *AdaptiveConcurrency) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveConcurrency.ProtoReflect.Descriptor instead.
func (*AdaptiveConcurrency) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescGZIP(), []int{1}
}

func (x *AdaptiveConcurrency) GetConcurrencyControllerConfig() isAdaptiveConcurrency_ConcurrencyControllerConfig {
	if x != nil {
		return x.ConcurrencyControllerConfig
	}
	return nil
}

func (x *AdaptiveConcurrency) GetGradientControllerConfig() *GradientControllerConfig {
	if x != nil {
		if x, ok := x.ConcurrencyControllerConfig.(*AdaptiveConcurrency_GradientControllerConfig); ok {
			return x.GradientControllerConfig
		}
	}
	return nil
}

func (x *AdaptiveConcurrency) GetEnabled() *v31.RuntimeFeatureFlag {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *AdaptiveConcurrency) GetConcurrencyLimitExceededStatus() *v3.HttpStatus {
	if x != nil {
		return x.ConcurrencyLimitExceededStatus
	}
	return nil
}

type isAdaptiveConcurrency_ConcurrencyControllerConfig interface {
	isAdaptiveConcurrency_ConcurrencyControllerConfig()
}

type AdaptiveConcurrency_GradientControllerConfig struct {
	// Gradient concurrency control will be used.
	GradientControllerConfig *GradientControllerConfig `protobuf:"bytes,1,opt,name=gradient_controller_config,json=gradientControllerConfig,proto3,oneof"`
}

func (*AdaptiveConcurrency_GradientControllerConfig) isAdaptiveConcurrency_ConcurrencyControllerConfig() {
}

// Parameters controlling the periodic recalculation of the concurrency limit from sampled request
// latencies.
type GradientControllerConfig_ConcurrencyLimitCalculationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The allowed upper-bound on the calculated concurrency limit. Defaults to 1000.
	MaxConcurrencyLimit *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrency_limit,json=maxConcurrencyLimit,proto3" json:"max_concurrency_limit,omitempty"`
	// The period of time samples are taken to recalculate the concurrency limit.
	ConcurrencyUpdateInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=concurrency_update_interval,json=concurrencyUpdateInterval,proto3" json:"concurrency_update_interval,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GradientControllerConfig_ConcurrencyLimitCalculationParams) Reset() {
	*x = GradientControllerConfig_ConcurrencyLimitCalculationParams{}
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GradientControllerConfig_ConcurrencyLimitCalculationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientControllerConfig_ConcurrencyLimitCalculationParams) ProtoMessage() {}

func (x *GradientControllerConfig_ConcurrencyLimitCalculationParams) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientControllerConfig_ConcurrencyLimitCalculationParams.ProtoReflect.Descriptor instead.
func (*GradientControllerConfig_ConcurrencyLimitCalculationParams) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GradientControllerConfig_ConcurrencyLimitCalculationParams) GetMaxConcurrencyLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConcurrencyLimit
	}
	return nil
}

func (x *GradientControllerConfig_ConcurrencyLimitCalculationParams) GetConcurrencyUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.ConcurrencyUpdateInterval
	}
	return nil
}

// Parameters controlling the periodic minRTT recalculation.
// [#next-free-field: 7]
type GradientControllerConfig_MinimumRTTCalculationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time interval between recalculating the minimum request round-trip time. Has to be
	// positive. If set to zero, dynamic sampling of the minRTT is disabled.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The fixed value for the minRTT. This value is used when minRTT is not sampled dynamically.
	// If dynamic sampling of the minRTT is disabled, this field must be set.
	FixedValue *durationpb.Duration `protobuf:"bytes,6,opt,name=fixed_value,json=fixedValue,proto3" json:"fixed_value,omitempty"`
	// The number of requests to aggregate/sample during the minRTT recalculation window before
	// updating. Defaults to 50.
	RequestCount *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// Randomized time delta that will be introduced to the start of the minRTT calculation window.
	// This is represented as a percentage of the interval duration. Defaults to 15%.
	//
	// Example: If the interval is 10s and the jitter is 15%, the next window will begin
	// somewhere in the range (10s - 11.5s).
	Jitter *v3.Percent `protobuf:"bytes,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// The concurrency limit set while measuring the minRTT. Defaults to 3.
	MinConcurrency *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=min_concurrency,json=minConcurrency,proto3" json:"min_concurrency,omitempty"`
	// Amount added to the measured minRTT to add stability to the concurrency limit during natural
	// variability in latency. This is expressed as a percentage of the measured value and can be
	// adjusted to allow more or less tolerance to the sampled latency values.
	//
	// Defaults to 25%.
	Buffer        *v3.Percent `protobuf:"bytes,5,opt,name=buffer,proto3" json:"buffer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) Reset() {
	*x = GradientControllerConfig_MinimumRTTCalculationParams{}
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientControllerConfig_MinimumRTTCalculationParams) ProtoMessage() {}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientControllerConfig_MinimumRTTCalculationParams.ProtoReflect.Descriptor instead.
func (*GradientControllerConfig_MinimumRTTCalculationParams) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetFixedValue() *durationpb.Duration {
	if x != nil {
		return x.FixedValue
	}
	return nil
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetRequestCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestCount
	}
	return nil
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetJitter() *v3.Percent {
	if x != nil {
		return x.Jitter
	}
	return nil
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetMinConcurrency() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinConcurrency
	}
	return nil
}

func (x *GradientControllerConfig_MinimumRTTCalculationParams) GetBuffer() *v3.Percent {
	if x != nil {
		return x.Buffer
	}
	return nil
}

var File_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto protoreflect.FileDescriptor

const file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDesc = "" +
	"\n" +
	"Penvoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto\x125envoy.extensions.filters.http.adaptive_concurrency.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a\x1fenvoy/type/v3/http_status.proto\x1a\x1benvoy/type/v3/percent.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\xa3\v\n" +
	"\x18GradientControllerConfig\x12V\n" +
	"\x1bsample_aggregate_percentile\x18\x01 \x01(\v2\x16.envoy.type.v3.PercentR\x19sampleAggregatePercentile\x12\xb5\x01\n" +
	"\x18concurrency_limit_params\x18\x02 \x01(\v2q.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParamsB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x16concurrencyLimitParams\x12\xa4\x01\n" +
	"\x13min_rtt_calc_params\x18\x03 \x01(\v2k.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParamsB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x10minRttCalcParams\x1a\xde\x02\n" +
	"!ConcurrencyLimitCalculationParams\x12Y\n" +
	"\x15max_concurrency_limit\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueB\a\xfaB\x04*\x02 \x00R\x13maxConcurrencyLimit\x12e\n" +
	"\x1bconcurrency_update_interval\x18\x03 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\x19concurrencyUpdateInterval:w\x9aň\x1er\n" +
	"penvoy.config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.ConcurrencyLimitCalculationParams\x1a\x97\x04\n" +
	"\x1bMinimumRTTCalculationParams\x12C\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationB\f\xfaB\t\xaa\x01\x062\x04\x10\xc0\x84=R\binterval\x12D\n" +
	"\vfixed_value\x18\x06 \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\n" +
	"fixedValue\x12J\n" +
	"\rrequest_count\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueB\a\xfaB\x04*\x02 \x00R\frequestCount\x12.\n" +
	"\x06jitter\x18\x03 \x01(\v2\x16.envoy.type.v3.PercentR\x06jitter\x12N\n" +
	"\x0fmin_concurrency\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueB\a\xfaB\x04*\x02 \x00R\x0eminConcurrency\x12.\n" +
	"\x06buffer\x18\x05 \x01(\v2\x16.envoy.type.v3.PercentR\x06buffer:q\x9aň\x1el\n" +
	"jenvoy.config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig.MinimumRTTCalculationParams:U\x9aň\x1eP\n" +
	"Nenvoy.config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConfig\"\xd3\x03\n" +
	"\x13AdaptiveConcurrency\x12\x99\x01\n" +
	"\x1agradient_controller_config\x18\x01 \x01(\v2O.envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01H\x00R\x18gradientControllerConfig\x12B\n" +
	"\aenabled\x18\x02 \x01(\v2(.envoy.config.core.v3.RuntimeFeatureFlagR\aenabled\x12d\n" +
	"!concurrency_limit_exceeded_status\x18\x03 \x01(\v2\x19.envoy.type.v3.HttpStatusR\x1econcurrencyLimitExceededStatus:P\x9aň\x1eK\n" +
	"Ienvoy.config.filter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrencyB$\n" +
	"\x1dconcurrency_controller_config\x12\x03\xf8B\x01B\xde\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"Cio.envoyproxy.envoy.extensions.filters.http.adaptive_concurrency.v3B\x18AdaptiveConcurrencyProtoP\x01Zsgithub.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/adaptive_concurrency/v3;adaptive_concurrencyv3b\x06proto3"

var (
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescData []byte
)

func file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDesc), len(file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDesc)))
	})
	return file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDescData
}

var file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_goTypes = []any{
	(*GradientControllerConfig)(nil),                                   // 0: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig
	(*AdaptiveConcurrency)(nil),                                        // 1: envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency
	(*GradientControllerConfig_ConcurrencyLimitCalculationParams)(nil), // 2: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams
	(*GradientControllerConfig_MinimumRTTCalculationParams)(nil),       // 3: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams
	(*v3.Percent)(nil),                                                 // 4: envoy.type.v3.Percent
	(*v31.RuntimeFeatureFlag)(nil),                                     // 5: envoy.config.core.v3.RuntimeFeatureFlag
	(*v3.HttpStatus)(nil),                                              // 6: envoy.type.v3.HttpStatus
	(*wrapperspb.UInt32Value)(nil),                                     // 7: google.protobuf.UInt32Value
	(*durationpb.Duration)(nil),                                        // 8: google.protobuf.Duration
}
var file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_depIdxs = []int32{
	4,  // 0: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.sample_aggregate_percentile:type_name -> envoy.type.v3.Percent
	2,  // 1: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.concurrency_limit_params:type_name -> envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams
	3,  // 2: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.min_rtt_calc_params:type_name -> envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams
	0,  // 3: envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency.gradient_controller_config:type_name -> envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig
	5,  // 4: envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency.enabled:type_name -> envoy.config.core.v3.RuntimeFeatureFlag
	6,  // 5: envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency.concurrency_limit_exceeded_status:type_name -> envoy.type.v3.HttpStatus
	7,  // 6: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams.max_concurrency_limit:type_name -> google.protobuf.UInt32Value
	8,  // 7: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams.concurrency_update_interval:type_name -> google.protobuf.Duration
	8,  // 8: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.interval:type_name -> google.protobuf.Duration
	8,  // 9: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.fixed_value:type_name -> google.protobuf.Duration
	7,  // 10: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.request_count:type_name -> google.protobuf.UInt32Value
	4,  // 11: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.jitter:type_name -> envoy.type.v3.Percent
	7,  // 12: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.min_concurrency:type_name -> google.protobuf.UInt32Value
	4,  // 13: envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams.buffer:type_name -> envoy.type.v3.Percent
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_init()
}
func file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_init() {
	if File_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto != nil {
		return
	}
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes[1].OneofWrappers = []any{
		(*AdaptiveConcurrency_GradientControllerConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDesc), len(file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto = out.File
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_goTypes = nil
	file_envoy_extensions_filters_http_adaptive_concurrency_v3_adaptive_concurrency_proto_depIdxs = nil
}
