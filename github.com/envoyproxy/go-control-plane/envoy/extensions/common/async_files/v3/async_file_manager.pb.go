// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/common/async_files/v3/async_file_manager.proto

package async_filesv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration to instantiate or select a singleton “AsyncFileManager“.
type AsyncFileManagerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An optional identifier for the manager. An empty string is a valid identifier
	// for a common, default “AsyncFileManager“.
	//
	// Reusing the same id with different configurations in the same envoy instance
	// is an error.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to ManagerType:
	//
	//	*AsyncFileManagerConfig_ThreadPool_
	ManagerType   isAsyncFileManagerConfig_ManagerType `protobuf_oneof:"manager_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncFileManagerConfig) Reset() {
	*x = AsyncFileManagerConfig{}
	mi := &file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncFileManagerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncFileManagerConfig) ProtoMessage() {}

func (x *AsyncFileManagerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncFileManagerConfig.ProtoReflect.Descriptor instead.
func (*AsyncFileManagerConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *AsyncFileManagerConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AsyncFileManagerConfig) GetManagerType() isAsyncFileManagerConfig_ManagerType {
	if x != nil {
		return x.ManagerType
	}
	return nil
}

func (x *AsyncFileManagerConfig) GetThreadPool() *AsyncFileManagerConfig_ThreadPool {
	if x != nil {
		if x, ok := x.ManagerType.(*AsyncFileManagerConfig_ThreadPool_); ok {
			return x.ThreadPool
		}
	}
	return nil
}

type isAsyncFileManagerConfig_ManagerType interface {
	isAsyncFileManagerConfig_ManagerType()
}

type AsyncFileManagerConfig_ThreadPool_ struct {
	// Configuration for a thread-pool based async file manager.
	ThreadPool *AsyncFileManagerConfig_ThreadPool `protobuf:"bytes,2,opt,name=thread_pool,json=threadPool,proto3,oneof"`
}

func (*AsyncFileManagerConfig_ThreadPool_) isAsyncFileManagerConfig_ManagerType() {}

type AsyncFileManagerConfig_ThreadPool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of threads to use. If unset or zero, will default to the number
	// of concurrent threads the hardware supports. This default is subject to
	// change if performance analysis suggests it.
	ThreadCount   uint32 `protobuf:"varint,1,opt,name=thread_count,json=threadCount,proto3" json:"thread_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsyncFileManagerConfig_ThreadPool) Reset() {
	*x = AsyncFileManagerConfig_ThreadPool{}
	mi := &file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsyncFileManagerConfig_ThreadPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncFileManagerConfig_ThreadPool) ProtoMessage() {}

func (x *AsyncFileManagerConfig_ThreadPool) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncFileManagerConfig_ThreadPool.ProtoReflect.Descriptor instead.
func (*AsyncFileManagerConfig_ThreadPool) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AsyncFileManagerConfig_ThreadPool) GetThreadCount() uint32 {
	if x != nil {
		return x.ThreadCount
	}
	return 0
}

var File_envoy_extensions_common_async_files_v3_async_file_manager_proto protoreflect.FileDescriptor

const file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDesc = "" +
	"\n" +
	"?envoy/extensions/common/async_files/v3/async_file_manager.proto\x12&envoy.extensions.common.async_files.v3\x1a\x1fxds/annotations/v3/status.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xe6\x01\n" +
	"\x16AsyncFileManagerConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12l\n" +
	"\vthread_pool\x18\x02 \x01(\v2I.envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPoolH\x00R\n" +
	"threadPool\x1a9\n" +
	"\n" +
	"ThreadPool\x12+\n" +
	"\fthread_count\x18\x01 \x01(\rB\b\xfaB\x05*\x03\x18\x80\bR\vthreadCountB\x13\n" +
	"\fmanager_type\x12\x03\xf8B\x01B\xbc\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\xd2Ƥ\xe1\x06\x02\b\x01\n" +
	"4io.envoyproxy.envoy.extensions.common.async_files.v3B\x15AsyncFileManagerProtoP\x01Z[github.com/envoyproxy/go-control-plane/envoy/extensions/common/async_files/v3;async_filesv3b\x06proto3"

var (
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescOnce sync.Once
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescData []byte
)

func file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescGZIP() []byte {
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDesc), len(file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDesc)))
	})
	return file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDescData
}

var file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_common_async_files_v3_async_file_manager_proto_goTypes = []any{
	(*AsyncFileManagerConfig)(nil),            // 0: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
	(*AsyncFileManagerConfig_ThreadPool)(nil), // 1: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool
}
var file_envoy_extensions_common_async_files_v3_async_file_manager_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.thread_pool:type_name -> envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_common_async_files_v3_async_file_manager_proto_init() }
func file_envoy_extensions_common_async_files_v3_async_file_manager_proto_init() {
	if File_envoy_extensions_common_async_files_v3_async_file_manager_proto != nil {
		return
	}
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes[0].OneofWrappers = []any{
		(*AsyncFileManagerConfig_ThreadPool_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDesc), len(file_envoy_extensions_common_async_files_v3_async_file_manager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_common_async_files_v3_async_file_manager_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_common_async_files_v3_async_file_manager_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_common_async_files_v3_async_file_manager_proto_msgTypes,
	}.Build()
	File_envoy_extensions_common_async_files_v3_async_file_manager_proto = out.File
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_goTypes = nil
	file_envoy_extensions_common_async_files_v3_async_file_manager_proto_depIdxs = nil
}
