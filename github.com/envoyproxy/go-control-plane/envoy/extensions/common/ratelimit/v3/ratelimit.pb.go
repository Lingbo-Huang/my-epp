// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/common/ratelimit/v3/ratelimit.proto

package ratelimitv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the version of the standard to use for X-RateLimit headers.
type XRateLimitHeadersRFCVersion int32

const (
	// X-RateLimit headers disabled.
	XRateLimitHeadersRFCVersion_OFF XRateLimitHeadersRFCVersion = 0
	// Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_ where 3 headers will be added:
	//
	//   - “X-RateLimit-Limit“ - indicates the request-quota associated to the
	//     client in the current time-window followed by the description of the
	//     quota policy. The value is returned by the maximum tokens of the token bucket.
	//   - “X-RateLimit-Remaining“ - indicates the remaining requests in the
	//     current time-window. The value is returned by the remaining tokens in the token bucket.
	//   - “X-RateLimit-Reset“ - indicates the number of seconds until reset of
	//     the current time-window. The value is returned by the remaining fill interval of the token bucket.
	XRateLimitHeadersRFCVersion_DRAFT_VERSION_03 XRateLimitHeadersRFCVersion = 1
)

// Enum value maps for XRateLimitHeadersRFCVersion.
var (
	XRateLimitHeadersRFCVersion_name = map[int32]string{
		0: "OFF",
		1: "DRAFT_VERSION_03",
	}
	XRateLimitHeadersRFCVersion_value = map[string]int32{
		"OFF":              0,
		"DRAFT_VERSION_03": 1,
	}
)

func (x XRateLimitHeadersRFCVersion) Enum() *XRateLimitHeadersRFCVersion {
	p := new(XRateLimitHeadersRFCVersion)
	*p = x
	return p
}

func (x XRateLimitHeadersRFCVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XRateLimitHeadersRFCVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes[0].Descriptor()
}

func (XRateLimitHeadersRFCVersion) Type() protoreflect.EnumType {
	return &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes[0]
}

func (x XRateLimitHeadersRFCVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XRateLimitHeadersRFCVersion.Descriptor instead.
func (XRateLimitHeadersRFCVersion) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{0}
}

type VhRateLimitsOptions int32

const (
	// Use the virtual host rate limits unless the route has a rate limit policy.
	VhRateLimitsOptions_OVERRIDE VhRateLimitsOptions = 0
	// Use the virtual host rate limits even if the route has a rate limit policy.
	VhRateLimitsOptions_INCLUDE VhRateLimitsOptions = 1
	// Ignore the virtual host rate limits even if the route does not have a rate limit policy.
	VhRateLimitsOptions_IGNORE VhRateLimitsOptions = 2
)

// Enum value maps for VhRateLimitsOptions.
var (
	VhRateLimitsOptions_name = map[int32]string{
		0: "OVERRIDE",
		1: "INCLUDE",
		2: "IGNORE",
	}
	VhRateLimitsOptions_value = map[string]int32{
		"OVERRIDE": 0,
		"INCLUDE":  1,
		"IGNORE":   2,
	}
)

func (x VhRateLimitsOptions) Enum() *VhRateLimitsOptions {
	p := new(VhRateLimitsOptions)
	*p = x
	return p
}

func (x VhRateLimitsOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VhRateLimitsOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes[1].Descriptor()
}

func (VhRateLimitsOptions) Type() protoreflect.EnumType {
	return &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes[1]
}

func (x VhRateLimitsOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VhRateLimitsOptions.Descriptor instead.
func (VhRateLimitsOptions) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{1}
}

// A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
// determine the final rate limit key and overall allowed limit. Here are some examples of how
// they might be used for the domain "envoy".
//
// .. code-block:: cpp
//
//	["authenticated": "false"], ["remote_address": "10.0.0.1"]
//
// What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
// configuration supplies a default limit for the *remote_address* key. If there is a desire to
// raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
// configuration.
//
// .. code-block:: cpp
//
//	["authenticated": "false"], ["path": "/foo/bar"]
//
// What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
// configured that way in the service).
//
// .. code-block:: cpp
//
//	["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]
//
// What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
// Like (1) we can raise/block specific IP addresses if we want with an override configuration.
//
// .. code-block:: cpp
//
//	["authenticated": "true"], ["client_id": "foo"]
//
// What it does: Limits all traffic for an authenticated client "foo"
//
// .. code-block:: cpp
//
//	["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]
//
// What it does: Limits traffic to a specific path for an authenticated client "foo"
//
// The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
// This enables building complex application scenarios with a generic backend.
//
// Optionally the descriptor can contain a limit override under a "limit" key, that specifies
// the number of requests per unit to use instead of the number configured in the
// rate limiting service.
type RateLimitDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Descriptor entries.
	Entries []*RateLimitDescriptor_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// Optional rate limit override to supply to the ratelimit service.
	Limit *RateLimitDescriptor_RateLimitOverride `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Optional hits_addend for the rate limit descriptor. If set the value will override the
	// request level hits_addend.
	HitsAddend    *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=hits_addend,json=hitsAddend,proto3" json:"hits_addend,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitDescriptor) Reset() {
	*x = RateLimitDescriptor{}
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitDescriptor) ProtoMessage() {}

func (x *RateLimitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitDescriptor.ProtoReflect.Descriptor instead.
func (*RateLimitDescriptor) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimitDescriptor) GetEntries() []*RateLimitDescriptor_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *RateLimitDescriptor) GetLimit() *RateLimitDescriptor_RateLimitOverride {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *RateLimitDescriptor) GetHitsAddend() *wrapperspb.UInt64Value {
	if x != nil {
		return x.HitsAddend
	}
	return nil
}

// Configuration used to enable local rate limiting.
//
// .. note::
//
//	The ``LocalRateLimitDescriptor`` is used to configure a local rate limit rule with a token
//	bucket algorithm. The ``RateLimitDescriptor`` is used to represent a list of symbols that
//	are used to match against the rate limit rule.
type LocalRateLimitDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Descriptor entries.
	Entries []*RateLimitDescriptor_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// Token Bucket algorithm for local ratelimiting.
	TokenBucket   *v3.TokenBucket `protobuf:"bytes,2,opt,name=token_bucket,json=tokenBucket,proto3" json:"token_bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalRateLimitDescriptor) Reset() {
	*x = LocalRateLimitDescriptor{}
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalRateLimitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalRateLimitDescriptor) ProtoMessage() {}

func (x *LocalRateLimitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalRateLimitDescriptor.ProtoReflect.Descriptor instead.
func (*LocalRateLimitDescriptor) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{1}
}

func (x *LocalRateLimitDescriptor) GetEntries() []*RateLimitDescriptor_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LocalRateLimitDescriptor) GetTokenBucket() *v3.TokenBucket {
	if x != nil {
		return x.TokenBucket
	}
	return nil
}

// Configuration used to enable local cluster level rate limiting where the token buckets
// will be shared across all the Envoy instances in the local cluster.
// A share will be calculated based on the membership of the local cluster dynamically
// and the configuration. When the limiter refilling the token bucket, the share will be
// applied. By default, the token bucket will be shared evenly.
//
// See :ref:`local cluster name
// <envoy_v3_api_field_config.bootstrap.v3.ClusterManager.local_cluster_name>` for more context
// about local cluster.
type LocalClusterRateLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalClusterRateLimit) Reset() {
	*x = LocalClusterRateLimit{}
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalClusterRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalClusterRateLimit) ProtoMessage() {}

func (x *LocalClusterRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalClusterRateLimit.ProtoReflect.Descriptor instead.
func (*LocalClusterRateLimit) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{2}
}

type RateLimitDescriptor_Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Descriptor key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Descriptor value. Blank value is treated as wildcard to create dynamic token buckets for each unique value.
	// Blank Values as wild card is currently supported only with envoy server instance level HTTP local rate limiting
	// and will not work if HTTP local rate limiting is enabled per connection level.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitDescriptor_Entry) Reset() {
	*x = RateLimitDescriptor_Entry{}
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitDescriptor_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitDescriptor_Entry) ProtoMessage() {}

func (x *RateLimitDescriptor_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitDescriptor_Entry.ProtoReflect.Descriptor instead.
func (*RateLimitDescriptor_Entry) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RateLimitDescriptor_Entry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RateLimitDescriptor_Entry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Override rate limit to apply to this descriptor instead of the limit
// configured in the rate limit service. See :ref:`rate limit override
// <config_http_filters_rate_limit_rate_limit_override>` for more information.
type RateLimitDescriptor_RateLimitOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of requests per unit of time.
	RequestsPerUnit uint32 `protobuf:"varint,1,opt,name=requests_per_unit,json=requestsPerUnit,proto3" json:"requests_per_unit,omitempty"`
	// The unit of time.
	Unit          v3.RateLimitUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=envoy.type.v3.RateLimitUnit" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitDescriptor_RateLimitOverride) Reset() {
	*x = RateLimitDescriptor_RateLimitOverride{}
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitDescriptor_RateLimitOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitDescriptor_RateLimitOverride) ProtoMessage() {}

func (x *RateLimitDescriptor_RateLimitOverride) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitDescriptor_RateLimitOverride.ProtoReflect.Descriptor instead.
func (*RateLimitDescriptor_RateLimitOverride) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RateLimitDescriptor_RateLimitOverride) GetRequestsPerUnit() uint32 {
	if x != nil {
		return x.RequestsPerUnit
	}
	return 0
}

func (x *RateLimitDescriptor_RateLimitOverride) GetUnit() v3.RateLimitUnit {
	if x != nil {
		return x.Unit
	}
	return v3.RateLimitUnit(0)
}

var File_envoy_extensions_common_ratelimit_v3_ratelimit_proto protoreflect.FileDescriptor

const file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDesc = "" +
	"\n" +
	"4envoy/extensions/common/ratelimit/v3/ratelimit.proto\x12$envoy.extensions.common.ratelimit.v3\x1a\"envoy/type/v3/ratelimit_unit.proto\x1a envoy/type/v3/token_bucket.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\xc8\x04\n" +
	"\x13RateLimitDescriptor\x12c\n" +
	"\aentries\x18\x01 \x03(\v2?.envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.EntryB\b\xfaB\x05\x92\x01\x02\b\x01R\aentries\x12a\n" +
	"\x05limit\x18\x02 \x01(\v2K.envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverrideR\x05limit\x12=\n" +
	"\vhits_addend\x18\x03 \x01(\v2\x1c.google.protobuf.UInt64ValueR\n" +
	"hitsAddend\x1az\n" +
	"\x05Entry\x12\x19\n" +
	"\x03key\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x03key\x12\x1d\n" +
	"\x05value\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x00R\x05value:7\x9aň\x1e2\n" +
	"0envoy.api.v2.ratelimit.RateLimitDescriptor.Entry\x1a{\n" +
	"\x11RateLimitOverride\x12*\n" +
	"\x11requests_per_unit\x18\x01 \x01(\rR\x0frequestsPerUnit\x12:\n" +
	"\x04unit\x18\x02 \x01(\x0e2\x1c.envoy.type.v3.RateLimitUnitB\b\xfaB\x05\x82\x01\x02\x10\x01R\x04unit:1\x9aň\x1e,\n" +
	"*envoy.api.v2.ratelimit.RateLimitDescriptor\"\xc8\x01\n" +
	"\x18LocalRateLimitDescriptor\x12c\n" +
	"\aentries\x18\x01 \x03(\v2?.envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.EntryB\b\xfaB\x05\x92\x01\x02\b\x01R\aentries\x12G\n" +
	"\ftoken_bucket\x18\x02 \x01(\v2\x1a.envoy.type.v3.TokenBucketB\b\xfaB\x05\x8a\x01\x02\x10\x01R\vtokenBucket\"\x17\n" +
	"\x15LocalClusterRateLimit*<\n" +
	"\x1bXRateLimitHeadersRFCVersion\x12\a\n" +
	"\x03OFF\x10\x00\x12\x14\n" +
	"\x10DRAFT_VERSION_03\x10\x01*<\n" +
	"\x13VhRateLimitsOptions\x12\f\n" +
	"\bOVERRIDE\x10\x00\x12\v\n" +
	"\aINCLUDE\x10\x01\x12\n" +
	"\n" +
	"\x06IGNORE\x10\x02B\xa7\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"2io.envoyproxy.envoy.extensions.common.ratelimit.v3B\x0eRatelimitProtoP\x01ZWgithub.com/envoyproxy/go-control-plane/envoy/extensions/common/ratelimit/v3;ratelimitv3b\x06proto3"

var (
	file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescOnce sync.Once
	file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescData []byte
)

func file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescGZIP() []byte {
	file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDesc), len(file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDesc)))
	})
	return file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDescData
}

var file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_goTypes = []any{
	(XRateLimitHeadersRFCVersion)(0),              // 0: envoy.extensions.common.ratelimit.v3.XRateLimitHeadersRFCVersion
	(VhRateLimitsOptions)(0),                      // 1: envoy.extensions.common.ratelimit.v3.VhRateLimitsOptions
	(*RateLimitDescriptor)(nil),                   // 2: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor
	(*LocalRateLimitDescriptor)(nil),              // 3: envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor
	(*LocalClusterRateLimit)(nil),                 // 4: envoy.extensions.common.ratelimit.v3.LocalClusterRateLimit
	(*RateLimitDescriptor_Entry)(nil),             // 5: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
	(*RateLimitDescriptor_RateLimitOverride)(nil), // 6: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
	(*wrapperspb.UInt64Value)(nil),                // 7: google.protobuf.UInt64Value
	(*v3.TokenBucket)(nil),                        // 8: envoy.type.v3.TokenBucket
	(v3.RateLimitUnit)(0),                         // 9: envoy.type.v3.RateLimitUnit
}
var file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_depIdxs = []int32{
	5, // 0: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.entries:type_name -> envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
	6, // 1: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.limit:type_name -> envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride
	7, // 2: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.hits_addend:type_name -> google.protobuf.UInt64Value
	5, // 3: envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor.entries:type_name -> envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry
	8, // 4: envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor.token_bucket:type_name -> envoy.type.v3.TokenBucket
	9, // 5: envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride.unit:type_name -> envoy.type.v3.RateLimitUnit
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_init() }
func file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_init() {
	if File_envoy_extensions_common_ratelimit_v3_ratelimit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDesc), len(file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_depIdxs,
		EnumInfos:         file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_enumTypes,
		MessageInfos:      file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_msgTypes,
	}.Build()
	File_envoy_extensions_common_ratelimit_v3_ratelimit_proto = out.File
	file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_goTypes = nil
	file_envoy_extensions_common_ratelimit_v3_ratelimit_proto_depIdxs = nil
}
