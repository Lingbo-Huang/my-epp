// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/http/header_validators/envoy_default/v3/header_validator.proto

package envoy_defaultv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action to take when Envoy receives client request with header names containing underscore
// characters.
//
// Underscore character is allowed in header names by RFC-7230, and this behavior is implemented
// as a security measure due to systems that treat “_“ and “-“ as interchangeable. Envoy by
// default allows client request headers with underscore characters.
//
// This setting provides control over how to handle such headers for security and compatibility reasons.
type HeaderValidatorConfig_HeadersWithUnderscoresAction int32

const (
	// Allow headers with underscores. This is the default behavior.
	HeaderValidatorConfig_ALLOW HeaderValidatorConfig_HeadersWithUnderscoresAction = 0
	// Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests
	// end with the stream reset. The
	// :ref:`httpN.requests_rejected_with_underscores_in_headers <config_http_conn_man_stats_per_codec>` counter
	// is incremented for each rejected request.
	HeaderValidatorConfig_REJECT_REQUEST HeaderValidatorConfig_HeadersWithUnderscoresAction = 1
	// Drop the client header with name containing underscores. The header is dropped before the filter chain is
	// invoked and as such filters will not see dropped headers. The
	// :ref:`httpN.dropped_headers_with_underscores <config_http_conn_man_stats_per_codec>` is incremented for
	// each dropped header.
	HeaderValidatorConfig_DROP_HEADER HeaderValidatorConfig_HeadersWithUnderscoresAction = 2
)

// Enum value maps for HeaderValidatorConfig_HeadersWithUnderscoresAction.
var (
	HeaderValidatorConfig_HeadersWithUnderscoresAction_name = map[int32]string{
		0: "ALLOW",
		1: "REJECT_REQUEST",
		2: "DROP_HEADER",
	}
	HeaderValidatorConfig_HeadersWithUnderscoresAction_value = map[string]int32{
		"ALLOW":          0,
		"REJECT_REQUEST": 1,
		"DROP_HEADER":    2,
	}
)

func (x HeaderValidatorConfig_HeadersWithUnderscoresAction) Enum() *HeaderValidatorConfig_HeadersWithUnderscoresAction {
	p := new(HeaderValidatorConfig_HeadersWithUnderscoresAction)
	*p = x
	return p
}

func (x HeaderValidatorConfig_HeadersWithUnderscoresAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderValidatorConfig_HeadersWithUnderscoresAction) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes[0].Descriptor()
}

func (HeaderValidatorConfig_HeadersWithUnderscoresAction) Type() protoreflect.EnumType {
	return &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes[0]
}

func (x HeaderValidatorConfig_HeadersWithUnderscoresAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderValidatorConfig_HeadersWithUnderscoresAction.Descriptor instead.
func (HeaderValidatorConfig_HeadersWithUnderscoresAction) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP(), []int{0, 0}
}

// Determines the action for requests that contain “%2F“, “%2f“, “%5C“ or “%5c“ sequences in the URI path.
// This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
//
// Escaped slash sequences in URLs can be used for path confusion attacks, so proper handling
// is important for security.
type HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction int32

const (
	// Default behavior specific to implementation (i.e. Envoy) of this configuration option.
	// Envoy, by default, takes the “KEEP_UNCHANGED“ action.
	//
	// .. note::
	//
	//	The implementation may change the default behavior at-will.
	HeaderValidatorConfig_UriPathNormalizationOptions_IMPLEMENTATION_SPECIFIC_DEFAULT HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = 0
	// Keep escaped slashes unchanged in the URI path.
	// This preserves the original request path without any modifications to escaped sequences.
	HeaderValidatorConfig_UriPathNormalizationOptions_KEEP_UNCHANGED HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = 1
	// Reject client request with the 400 status. gRPC requests will be rejected with the “INTERNAL“ (13) error code.
	// The :ref:`httpN.downstream_rq_failed_path_normalization <config_http_conn_man_stats_per_codec>` counter is incremented for each rejected request.
	//
	// This is the safest option when security is a primary concern, as it prevents any potential
	// path confusion attacks by rejecting requests with escaped slashes entirely.
	HeaderValidatorConfig_UriPathNormalizationOptions_REJECT_REQUEST HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = 2
	// Unescape “%2F“ and “%5C“ sequences and redirect the request to the new path if these sequences were present.
	// The redirect occurs after path normalization and merge slashes transformations if they were configured.
	//
	// .. note::
	//
	//	gRPC requests will be rejected with the ``INTERNAL`` (13) error code.
	//	This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
	//	traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
	//
	// The :ref:`httpN.downstream_rq_redirected_with_normalized_path <config_http_conn_man_stats_per_codec>` counter is incremented for each
	// redirected request.
	HeaderValidatorConfig_UriPathNormalizationOptions_UNESCAPE_AND_REDIRECT HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = 3
	// Unescape “%2F“ and “%5C“ sequences.
	//
	// .. attention::
	//
	//	This option should not be enabled if intermediaries perform path based access control as
	//	it may lead to path confusion vulnerabilities.
	HeaderValidatorConfig_UriPathNormalizationOptions_UNESCAPE_AND_FORWARD HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction = 4
)

// Enum value maps for HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction.
var (
	HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction_name = map[int32]string{
		0: "IMPLEMENTATION_SPECIFIC_DEFAULT",
		1: "KEEP_UNCHANGED",
		2: "REJECT_REQUEST",
		3: "UNESCAPE_AND_REDIRECT",
		4: "UNESCAPE_AND_FORWARD",
	}
	HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction_value = map[string]int32{
		"IMPLEMENTATION_SPECIFIC_DEFAULT": 0,
		"KEEP_UNCHANGED":                  1,
		"REJECT_REQUEST":                  2,
		"UNESCAPE_AND_REDIRECT":           3,
		"UNESCAPE_AND_FORWARD":            4,
	}
)

func (x HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) Enum() *HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction {
	p := new(HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction)
	*p = x
	return p
}

func (x HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes[1].Descriptor()
}

func (HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) Type() protoreflect.EnumType {
	return &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes[1]
}

func (x HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction.Descriptor instead.
func (HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP(), []int{0, 0, 0}
}

// This extension validates that HTTP request and response headers are well formed according to respective RFCs.
//
// The validator performs comprehensive HTTP header validation including:
//
// #. HTTP/1 header map validity according to `RFC 7230 section 3.2 <https://datatracker.ietf.org/doc/html/rfc7230#section-3.2>`_.
// #. Syntax of HTTP/1 request target URI and response status.
// #. HTTP/2 header map validity according to `RFC 7540 section 8.1.2 <https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2>`_.
// #. Syntax of HTTP/2 pseudo headers.
// #. HTTP/3 header map validity according to `RFC 9114 section 4.3  <https://www.rfc-editor.org/rfc/rfc9114.html>`_.
// #. Syntax of HTTP/3 pseudo headers.
// #. Syntax of Content-Length and Transfer-Encoding.
// #. Validation of HTTP/1 requests with both “Content-Length“ and “Transfer-Encoding“ headers.
// #. Normalization of the URI path according to `Normalization and Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_
//
//	without `case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_.
//
// This validator ensures that HTTP traffic processed by Envoy conforms to established
// standards and helps prevent issues caused by malformed headers or invalid HTTP syntax.
//
// [#comment:TODO(yanavlasov): Put #extension: envoy.http.header_validators.envoy_default after it is not hidden any more]
// [#next-free-field: 6]
type HeaderValidatorConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP/1 protocol specific options.
	// These settings control HTTP/1 specific validation behaviors.
	Http1ProtocolOptions *HeaderValidatorConfig_Http1ProtocolOptions `protobuf:"bytes,1,opt,name=http1_protocol_options,json=http1ProtocolOptions,proto3" json:"http1_protocol_options,omitempty"`
	// The URI path normalization options.
	//
	// By default Envoy normalizes URI path using the default values of the :ref:`UriPathNormalizationOptions
	// <envoy_v3_api_msg_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions>`.
	// URI path transformations specified by the “uri_path_normalization_options“ configuration can be applied to a portion
	// of requests by setting the “envoy_default_header_validator.uri_path_transformations“ runtime value.
	//
	// .. attention::
	//
	//	Disabling path normalization may lead to path confusion vulnerabilities in access control or incorrect service
	//	selection.
	UriPathNormalizationOptions *HeaderValidatorConfig_UriPathNormalizationOptions `protobuf:"bytes,2,opt,name=uri_path_normalization_options,json=uriPathNormalizationOptions,proto3" json:"uri_path_normalization_options,omitempty"`
	// Restrict HTTP methods to these defined in the `RFC 7231 section 4.1 <https://datatracker.ietf.org/doc/html/rfc7231#section-4.1>`_.
	//
	// Envoy will respond with 400 to requests with disallowed methods.
	// By default methods with arbitrary names are accepted.
	//
	// This setting helps enforce HTTP compliance and can prevent attacks that rely on
	// non-standard HTTP methods.
	RestrictHttpMethods bool `protobuf:"varint,3,opt,name=restrict_http_methods,json=restrictHttpMethods,proto3" json:"restrict_http_methods,omitempty"`
	// Action to take when a client request with a header name containing underscore characters is received.
	//
	// If this setting is not specified, the value defaults to “ALLOW“.
	//
	// This setting provides security control over headers with underscores, which can be a source
	// of security issues when different systems interpret underscores and hyphens differently.
	HeadersWithUnderscoresAction HeaderValidatorConfig_HeadersWithUnderscoresAction `protobuf:"varint,4,opt,name=headers_with_underscores_action,json=headersWithUnderscoresAction,proto3,enum=envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig_HeadersWithUnderscoresAction" json:"headers_with_underscores_action,omitempty"`
	// Allow requests with fragment in URL path and strip the fragment before request processing.
	//
	// By default Envoy rejects requests with fragment in URL path. When this option is enabled,
	// the fragment portion (everything after “#“) will be removed from the path before
	// further processing.
	//
	// Fragments are typically used by client-side applications and should not normally
	// be sent to the server, so stripping them can help normalize requests.
	StripFragmentFromPath bool `protobuf:"varint,5,opt,name=strip_fragment_from_path,json=stripFragmentFromPath,proto3" json:"strip_fragment_from_path,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *HeaderValidatorConfig) Reset() {
	*x = HeaderValidatorConfig{}
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValidatorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValidatorConfig) ProtoMessage() {}

func (x *HeaderValidatorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValidatorConfig.ProtoReflect.Descriptor instead.
func (*HeaderValidatorConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP(), []int{0}
}

func (x *HeaderValidatorConfig) GetHttp1ProtocolOptions() *HeaderValidatorConfig_Http1ProtocolOptions {
	if x != nil {
		return x.Http1ProtocolOptions
	}
	return nil
}

func (x *HeaderValidatorConfig) GetUriPathNormalizationOptions() *HeaderValidatorConfig_UriPathNormalizationOptions {
	if x != nil {
		return x.UriPathNormalizationOptions
	}
	return nil
}

func (x *HeaderValidatorConfig) GetRestrictHttpMethods() bool {
	if x != nil {
		return x.RestrictHttpMethods
	}
	return false
}

func (x *HeaderValidatorConfig) GetHeadersWithUnderscoresAction() HeaderValidatorConfig_HeadersWithUnderscoresAction {
	if x != nil {
		return x.HeadersWithUnderscoresAction
	}
	return HeaderValidatorConfig_ALLOW
}

func (x *HeaderValidatorConfig) GetStripFragmentFromPath() bool {
	if x != nil {
		return x.StripFragmentFromPath
	}
	return false
}

// Configuration options for URI path normalization and transformation.
//
// These options control how Envoy processes and normalizes incoming request URI paths
// to ensure consistent behavior and security. Path normalization helps prevent
// path traversal attacks and ensures that equivalent paths are handled consistently.
type HeaderValidatorConfig_UriPathNormalizationOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Should paths be normalized according to RFC 3986?
	//
	// This operation overwrites the original request URI path and the new path is used for processing of
	// the request by HTTP filters and proxied to the upstream service.
	// Envoy will respond with 400 to requests with malformed paths that fail path normalization.
	// The default behavior is to normalize the path.
	//
	// This value may be overridden by the runtime variable
	// :ref:`http_connection_manager.normalize_path<config_http_conn_man_runtime_normalize_path>`.
	// See `Normalization and Comparison <https://datatracker.ietf.org/doc/html/rfc3986#section-6>`_
	// for details of normalization.
	//
	// .. note::
	//
	//	Envoy does not perform
	//	`case normalization <https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2.1>`_.
	//	URI path normalization can be applied to a portion of requests by setting the
	//	``envoy_default_header_validator.path_normalization`` runtime value.
	SkipPathNormalization bool `protobuf:"varint,1,opt,name=skip_path_normalization,json=skipPathNormalization,proto3" json:"skip_path_normalization,omitempty"`
	// Determines if adjacent slashes in the path are merged into one.
	//
	// This operation overwrites the original request URI path and the new path is used for processing of
	// the request by HTTP filters and proxied to the upstream service.
	// Setting this option to “true“ will cause incoming requests with path “//dir///file“ to not match against
	// route with “prefix“ match set to “/dir“. Defaults to “false“.
	//
	// .. note::
	//
	//	Slash merging is not part of the
	//	`HTTP spec <https://datatracker.ietf.org/doc/html/rfc3986>`_ and is provided for convenience.
	//	Merging of slashes in URI path can be applied to a portion of requests by setting the
	//	``envoy_default_header_validator.merge_slashes`` runtime value.
	SkipMergingSlashes bool `protobuf:"varint,2,opt,name=skip_merging_slashes,json=skipMergingSlashes,proto3" json:"skip_merging_slashes,omitempty"`
	// The action to take when request URL path contains escaped slash sequences (“%2F“, “%2f“, “%5C“ and “%5c“).
	//
	// This operation may overwrite the original request URI path and the new path is used for processing of
	// the request by HTTP filters and proxied to the upstream service.
	//
	// The handling of escaped slashes is important for security as these sequences can be used
	// in path confusion attacks to bypass access controls.
	PathWithEscapedSlashesAction HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction `protobuf:"varint,3,opt,name=path_with_escaped_slashes_action,json=pathWithEscapedSlashesAction,proto3,enum=envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction" json:"path_with_escaped_slashes_action,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) Reset() {
	*x = HeaderValidatorConfig_UriPathNormalizationOptions{}
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValidatorConfig_UriPathNormalizationOptions) ProtoMessage() {}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValidatorConfig_UriPathNormalizationOptions.ProtoReflect.Descriptor instead.
func (*HeaderValidatorConfig_UriPathNormalizationOptions) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) GetSkipPathNormalization() bool {
	if x != nil {
		return x.SkipPathNormalization
	}
	return false
}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) GetSkipMergingSlashes() bool {
	if x != nil {
		return x.SkipMergingSlashes
	}
	return false
}

func (x *HeaderValidatorConfig_UriPathNormalizationOptions) GetPathWithEscapedSlashesAction() HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction {
	if x != nil {
		return x.PathWithEscapedSlashesAction
	}
	return HeaderValidatorConfig_UriPathNormalizationOptions_IMPLEMENTATION_SPECIFIC_DEFAULT
}

// HTTP/1 protocol specific options for header validation.
//
// These options control how Envoy handles HTTP/1 specific behaviors and edge cases
// that may not apply to HTTP/2 or HTTP/3 protocols.
type HeaderValidatorConfig_Http1ProtocolOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allows Envoy to process HTTP/1 requests/responses with both “Content-Length“ and “Transfer-Encoding“
	// headers set. By default such messages are rejected, but if option is enabled - Envoy will
	// remove the “Content-Length“ header and process the message.
	//
	// See `RFC7230, sec. 3.3.3 <https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3>`_ for details.
	//
	// .. attention::
	//
	//	Enabling this option might lead to request smuggling vulnerabilities, especially if traffic
	//	is proxied via multiple layers of proxies.
	AllowChunkedLength bool `protobuf:"varint,1,opt,name=allow_chunked_length,json=allowChunkedLength,proto3" json:"allow_chunked_length,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HeaderValidatorConfig_Http1ProtocolOptions) Reset() {
	*x = HeaderValidatorConfig_Http1ProtocolOptions{}
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderValidatorConfig_Http1ProtocolOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValidatorConfig_Http1ProtocolOptions) ProtoMessage() {}

func (x *HeaderValidatorConfig_Http1ProtocolOptions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValidatorConfig_Http1ProtocolOptions.ProtoReflect.Descriptor instead.
func (*HeaderValidatorConfig_Http1ProtocolOptions) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HeaderValidatorConfig_Http1ProtocolOptions) GetAllowChunkedLength() bool {
	if x != nil {
		return x.AllowChunkedLength
	}
	return false
}

var File_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto protoreflect.FileDescriptor

const file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDesc = "" +
	"\n" +
	"Oenvoy/extensions/http/header_validators/envoy_default/v3/header_validator.proto\x128envoy.extensions.http.header_validators.envoy_default.v3\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xaf\n" +
	"\n" +
	"\x15HeaderValidatorConfig\x12\x9a\x01\n" +
	"\x16http1_protocol_options\x18\x01 \x01(\v2d.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptionsR\x14http1ProtocolOptions\x12\xb0\x01\n" +
	"\x1euri_path_normalization_options\x18\x02 \x01(\v2k.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptionsR\x1buriPathNormalizationOptions\x122\n" +
	"\x15restrict_http_methods\x18\x03 \x01(\bR\x13restrictHttpMethods\x12\xb3\x01\n" +
	"\x1fheaders_with_underscores_action\x18\x04 \x01(\x0e2l.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresActionR\x1cheadersWithUnderscoresAction\x127\n" +
	"\x18strip_fragment_from_path\x18\x05 \x01(\bR\x15stripFragmentFromPath\x1a\x88\x04\n" +
	"\x1bUriPathNormalizationOptions\x126\n" +
	"\x17skip_path_normalization\x18\x01 \x01(\bR\x15skipPathNormalization\x120\n" +
	"\x14skip_merging_slashes\x18\x02 \x01(\bR\x12skipMergingSlashes\x12\xdb\x01\n" +
	" path_with_escaped_slashes_action\x18\x03 \x01(\x0e2\x88\x01.envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesActionB\b\xfaB\x05\x82\x01\x02\x10\x01R\x1cpathWithEscapedSlashesAction\"\xa0\x01\n" +
	"\x1cPathWithEscapedSlashesAction\x12#\n" +
	"\x1fIMPLEMENTATION_SPECIFIC_DEFAULT\x10\x00\x12\x12\n" +
	"\x0eKEEP_UNCHANGED\x10\x01\x12\x12\n" +
	"\x0eREJECT_REQUEST\x10\x02\x12\x19\n" +
	"\x15UNESCAPE_AND_REDIRECT\x10\x03\x12\x18\n" +
	"\x14UNESCAPE_AND_FORWARD\x10\x04\x1aH\n" +
	"\x14Http1ProtocolOptions\x120\n" +
	"\x14allow_chunked_length\x18\x01 \x01(\bR\x12allowChunkedLength\"N\n" +
	"\x1cHeadersWithUnderscoresAction\x12\t\n" +
	"\x05ALLOW\x10\x00\x12\x12\n" +
	"\x0eREJECT_REQUEST\x10\x01\x12\x0f\n" +
	"\vDROP_HEADER\x10\x02B\xd9\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"Fio.envoyproxy.envoy.extensions.http.header_validators.envoy_default.v3B\x14HeaderValidatorProtoP\x01Zogithub.com/envoyproxy/go-control-plane/envoy/extensions/http/header_validators/envoy_default/v3;envoy_defaultv3b\x06proto3"

var (
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescOnce sync.Once
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescData []byte
)

func file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescGZIP() []byte {
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDesc), len(file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDesc)))
	})
	return file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDescData
}

var file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_goTypes = []any{
	(HeaderValidatorConfig_HeadersWithUnderscoresAction)(0),                             // 0: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction
	(HeaderValidatorConfig_UriPathNormalizationOptions_PathWithEscapedSlashesAction)(0), // 1: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction
	(*HeaderValidatorConfig)(nil),                                                       // 2: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig
	(*HeaderValidatorConfig_UriPathNormalizationOptions)(nil),                           // 3: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
	(*HeaderValidatorConfig_Http1ProtocolOptions)(nil),                                  // 4: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions
}
var file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_depIdxs = []int32{
	4, // 0: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.http1_protocol_options:type_name -> envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.Http1ProtocolOptions
	3, // 1: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.uri_path_normalization_options:type_name -> envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions
	0, // 2: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.headers_with_underscores_action:type_name -> envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.HeadersWithUnderscoresAction
	1, // 3: envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.path_with_escaped_slashes_action:type_name -> envoy.extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.UriPathNormalizationOptions.PathWithEscapedSlashesAction
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_init()
}
func file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_init() {
	if File_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDesc), len(file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_depIdxs,
		EnumInfos:         file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_enumTypes,
		MessageInfos:      file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_msgTypes,
	}.Build()
	File_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto = out.File
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_goTypes = nil
	file_envoy_extensions_http_header_validators_envoy_default_v3_header_validator_proto_depIdxs = nil
}
