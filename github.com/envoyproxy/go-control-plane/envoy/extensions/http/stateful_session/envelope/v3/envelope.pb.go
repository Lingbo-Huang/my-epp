// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/http/stateful_session/envelope/v3/envelope.proto

package envelopev3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The extension allows the session state is tracked via existing session context that initialized
// by the upstream server. It assumes that the upstream server will generate the session context
// (like session id header or cookie) in the initial response of the session and the client will use
// the same session context in the subsequent requests without any modification.
//
// When processing the response from the upstream, Envoy will check if the response contains the
// session context. If the response contains the session context, no matter if it's a new session
// context or an existing one, Envoy will join it and the upstream host as new session context.
//
// When processing the request from the downstream, Envoy will check if the request contains the
// session context. If the request contains the session context, Envoy will strip the
// upstream host from the session context.
//
// [#extension: envoy.http.stateful_session.envelope]
type EnvelopeSessionState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set the header config to track the session state.
	Header        *EnvelopeSessionState_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvelopeSessionState) Reset() {
	*x = EnvelopeSessionState{}
	mi := &file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvelopeSessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeSessionState) ProtoMessage() {}

func (x *EnvelopeSessionState) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeSessionState.ProtoReflect.Descriptor instead.
func (*EnvelopeSessionState) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *EnvelopeSessionState) GetHeader() *EnvelopeSessionState_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type EnvelopeSessionState_Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Iff the header specified by the “name“ field is present in the response (assume the “name“
	// is set to “session-header“ and original header value is “xxxxxx“), then the upstream host
	// address and value of “name“ field specified header will be encoded in following format and
	// the output will be used to update the “name“ field specified header in the response:
	//
	// .. code-block:: none
	//
	//	session-header: "MS4yLjMuNDo4MAo=;UV:eHh4eHh4Cg==" # base64(1.2.3.4:80);UV:base64(xxxxxx)
	//
	// The “UV“ (upstream value) part is used to store the original upstream header value of
	// “name“ field specified header.
	//
	// If this mode is used then Envoy will assume that the header in the request will also be in the
	// same format and will contain the “UV“ part. This extension will parse the upstream host
	// address and update the “name“ field specified header in the request to the “UV“ part.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvelopeSessionState_Header) Reset() {
	*x = EnvelopeSessionState_Header{}
	mi := &file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvelopeSessionState_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeSessionState_Header) ProtoMessage() {}

func (x *EnvelopeSessionState_Header) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeSessionState_Header.ProtoReflect.Descriptor instead.
func (*EnvelopeSessionState_Header) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnvelopeSessionState_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto protoreflect.FileDescriptor

const file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDesc = "" +
	"\n" +
	"Aenvoy/extensions/http/stateful_session/envelope/v3/envelope.proto\x122envoy.extensions.http.stateful_session.envelope.v3\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xb0\x01\n" +
	"\x14EnvelopeSessionState\x12q\n" +
	"\x06header\x18\x01 \x01(\v2O.envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.HeaderB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06header\x1a%\n" +
	"\x06Header\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04nameB\xc1\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"@io.envoyproxy.envoy.extensions.http.stateful_session.envelope.v3B\rEnvelopeProtoP\x01Zdgithub.com/envoyproxy/go-control-plane/envoy/extensions/http/stateful_session/envelope/v3;envelopev3b\x06proto3"

var (
	file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescOnce sync.Once
	file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescData []byte
)

func file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescGZIP() []byte {
	file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDesc), len(file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDesc)))
	})
	return file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDescData
}

var file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_goTypes = []any{
	(*EnvelopeSessionState)(nil),        // 0: envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState
	(*EnvelopeSessionState_Header)(nil), // 1: envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header
}
var file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.header:type_name -> envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_init() }
func file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_init() {
	if File_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDesc), len(file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_msgTypes,
	}.Build()
	File_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto = out.File
	file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_goTypes = nil
	file_envoy_extensions_http_stateful_session_envelope_v3_envelope_proto_depIdxs = nil
}
