// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/http/stateful_session/cookie/v3/cookie.proto

package cookiev3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/http/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This extension allows the session state to be tracked via cookies.
//
// This extension first encodes the address of the upstream host selected by the load balancer
// into a “set-cookie“ response header with the :ref:`cookie configuration
// <envoy_v3_api_field_extensions.http.stateful_session.cookie.v3.CookieBasedSessionState.cookie>`.
// when new requests are incoming, this extension will try to parse the specific upstream host
// address by the cookie name. If the address parsed from the cookie corresponds to a valid
// upstream host, this upstream host will be selected first. See :ref:`stateful session filter
// <envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession>`.
//
// For example, if the cookie name is set to “sticky-host“, envoy will prefer “1.2.3.4:80“
// as the upstream host when the request contains the following header:
//
// .. code-block:: none
//
//	cookie: sticky-host="MS4yLjMuNDo4MA=="
//
// When processing the upstream response, if “1.2.3.4:80“ is indeed the final choice the extension
// does nothing. If “1.2.3.4:80“ is not the final choice, the new selected host will be used to
// update the cookie (via the “set-cookie“ response header).
//
// [#extension: envoy.http.stateful_session.cookie]
type CookieBasedSessionState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The cookie configuration used to track session state.
	Cookie        *v3.Cookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CookieBasedSessionState) Reset() {
	*x = CookieBasedSessionState{}
	mi := &file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CookieBasedSessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookieBasedSessionState) ProtoMessage() {}

func (x *CookieBasedSessionState) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookieBasedSessionState.ProtoReflect.Descriptor instead.
func (*CookieBasedSessionState) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescGZIP(), []int{0}
}

func (x *CookieBasedSessionState) GetCookie() *v3.Cookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

var File_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto protoreflect.FileDescriptor

const file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDesc = "" +
	"\n" +
	"=envoy/extensions/http/stateful_session/cookie/v3/cookie.proto\x120envoy.extensions.http.stateful_session.cookie.v3\x1a\x1fenvoy/type/http/v3/cookie.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"W\n" +
	"\x17CookieBasedSessionState\x12<\n" +
	"\x06cookie\x18\x01 \x01(\v2\x1a.envoy.type.http.v3.CookieB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06cookieB\xb9\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	">io.envoyproxy.envoy.extensions.http.stateful_session.cookie.v3B\vCookieProtoP\x01Z`github.com/envoyproxy/go-control-plane/envoy/extensions/http/stateful_session/cookie/v3;cookiev3b\x06proto3"

var (
	file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescOnce sync.Once
	file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescData []byte
)

func file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescGZIP() []byte {
	file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDesc), len(file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDesc)))
	})
	return file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDescData
}

var file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_goTypes = []any{
	(*CookieBasedSessionState)(nil), // 0: envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState
	(*v3.Cookie)(nil),               // 1: envoy.type.http.v3.Cookie
}
var file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState.cookie:type_name -> envoy.type.http.v3.Cookie
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_init() }
func file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_init() {
	if File_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDesc), len(file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_msgTypes,
	}.Build()
	File_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto = out.File
	file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_goTypes = nil
	file_envoy_extensions_http_stateful_session_cookie_v3_cookie_proto_depIdxs = nil
}
