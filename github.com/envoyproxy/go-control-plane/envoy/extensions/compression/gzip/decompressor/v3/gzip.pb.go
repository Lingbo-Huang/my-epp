// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/extensions/compression/gzip/decompressor/v3/gzip.proto

package decompressorv3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gzip struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
	// The decompression window size needs to be equal or larger than the compression window size.
	// The default window size is 15.
	// This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
	// For more details about this parameter, please refer to `zlib manual <https://www.zlib.net/manual.html>`_ > inflateInit2.
	WindowBits *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=window_bits,json=windowBits,proto3" json:"window_bits,omitempty"`
	// Value for zlib's decompressor output buffer. If not set, defaults to 4096.
	// See https://www.zlib.net/manual.html for more details.
	ChunkSize *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// An upper bound to the number of times the output buffer is allowed to be bigger than the size of
	// the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
	// [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
	// See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
	MaxInflateRatio *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=max_inflate_ratio,json=maxInflateRatio,proto3" json:"max_inflate_ratio,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Gzip) Reset() {
	*x = Gzip{}
	mi := &file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gzip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gzip) ProtoMessage() {}

func (x *Gzip) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gzip.ProtoReflect.Descriptor instead.
func (*Gzip) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescGZIP(), []int{0}
}

func (x *Gzip) GetWindowBits() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WindowBits
	}
	return nil
}

func (x *Gzip) GetChunkSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ChunkSize
	}
	return nil
}

func (x *Gzip) GetMaxInflateRatio() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxInflateRatio
	}
	return nil
}

var File_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto protoreflect.FileDescriptor

const file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDesc = "" +
	"\n" +
	"<envoy/extensions/compression/gzip/decompressor/v3/gzip.proto\x121envoy.extensions.compression.gzip.decompressor.v3\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xf1\x01\n" +
	"\x04Gzip\x12H\n" +
	"\vwindow_bits\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueB\t\xfaB\x06*\x04\x18\x0f(\tR\n" +
	"windowBits\x12I\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueB\f\xfaB\t*\a\x18\x80\x80\x04(\x80 R\tchunkSize\x12T\n" +
	"\x11max_inflate_ratio\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueB\n" +
	"\xfaB\a*\x05\x18\x88\b(\x01R\x0fmaxInflateRatioB\xbf\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"?io.envoyproxy.envoy.extensions.compression.gzip.decompressor.v3B\tGzipProtoP\x01Zggithub.com/envoyproxy/go-control-plane/envoy/extensions/compression/gzip/decompressor/v3;decompressorv3b\x06proto3"

var (
	file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescOnce sync.Once
	file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescData []byte
)

func file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescGZIP() []byte {
	file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDesc), len(file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDesc)))
	})
	return file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDescData
}

var file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_goTypes = []any{
	(*Gzip)(nil),                   // 0: envoy.extensions.compression.gzip.decompressor.v3.Gzip
	(*wrapperspb.UInt32Value)(nil), // 1: google.protobuf.UInt32Value
}
var file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.compression.gzip.decompressor.v3.Gzip.window_bits:type_name -> google.protobuf.UInt32Value
	1, // 1: envoy.extensions.compression.gzip.decompressor.v3.Gzip.chunk_size:type_name -> google.protobuf.UInt32Value
	1, // 2: envoy.extensions.compression.gzip.decompressor.v3.Gzip.max_inflate_ratio:type_name -> google.protobuf.UInt32Value
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_init() }
func file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_init() {
	if File_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDesc), len(file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_msgTypes,
	}.Build()
	File_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto = out.File
	file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_goTypes = nil
	file_envoy_extensions_compression_gzip_decompressor_v3_gzip_proto_depIdxs = nil
}
