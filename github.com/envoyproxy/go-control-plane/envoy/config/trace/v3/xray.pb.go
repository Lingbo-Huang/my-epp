// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/trace/v3/xray.proto

package tracev3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#extension: envoy.tracers.xray]
type XRayConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UDP endpoint of the X-Ray Daemon where the spans will be sent.
	// If this value is not set, the default value of 127.0.0.1:2000 will be used.
	DaemonEndpoint *v3.SocketAddress `protobuf:"bytes,1,opt,name=daemon_endpoint,json=daemonEndpoint,proto3" json:"daemon_endpoint,omitempty"`
	// The name of the X-Ray segment.
	SegmentName string `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	// The location of a local custom sampling rules JSON file.
	// For an example of the sampling rules see:
	// `X-Ray SDK documentation
	// <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-configuration.html#xray-sdk-go-configuration-sampling>`_
	SamplingRuleManifest *v3.DataSource `protobuf:"bytes,3,opt,name=sampling_rule_manifest,json=samplingRuleManifest,proto3" json:"sampling_rule_manifest,omitempty"`
	// Optional custom fields to be added to each trace segment.
	// see: `X-Ray Segment Document documentation
	// <https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html>`__
	SegmentFields *XRayConfig_SegmentFields `protobuf:"bytes,4,opt,name=segment_fields,json=segmentFields,proto3" json:"segment_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XRayConfig) Reset() {
	*x = XRayConfig{}
	mi := &file_envoy_config_trace_v3_xray_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XRayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRayConfig) ProtoMessage() {}

func (x *XRayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_trace_v3_xray_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRayConfig.ProtoReflect.Descriptor instead.
func (*XRayConfig) Descriptor() ([]byte, []int) {
	return file_envoy_config_trace_v3_xray_proto_rawDescGZIP(), []int{0}
}

func (x *XRayConfig) GetDaemonEndpoint() *v3.SocketAddress {
	if x != nil {
		return x.DaemonEndpoint
	}
	return nil
}

func (x *XRayConfig) GetSegmentName() string {
	if x != nil {
		return x.SegmentName
	}
	return ""
}

func (x *XRayConfig) GetSamplingRuleManifest() *v3.DataSource {
	if x != nil {
		return x.SamplingRuleManifest
	}
	return nil
}

func (x *XRayConfig) GetSegmentFields() *XRayConfig_SegmentFields {
	if x != nil {
		return x.SegmentFields
	}
	return nil
}

type XRayConfig_SegmentFields struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of AWS resource, e.g. "AWS::AppMesh::Proxy".
	Origin string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// AWS resource metadata dictionary.
	// See: `X-Ray Segment Document documentation <https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html#api-segmentdocuments-aws>`__
	Aws           *structpb.Struct `protobuf:"bytes,2,opt,name=aws,proto3" json:"aws,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XRayConfig_SegmentFields) Reset() {
	*x = XRayConfig_SegmentFields{}
	mi := &file_envoy_config_trace_v3_xray_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XRayConfig_SegmentFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRayConfig_SegmentFields) ProtoMessage() {}

func (x *XRayConfig_SegmentFields) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_trace_v3_xray_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRayConfig_SegmentFields.ProtoReflect.Descriptor instead.
func (*XRayConfig_SegmentFields) Descriptor() ([]byte, []int) {
	return file_envoy_config_trace_v3_xray_proto_rawDescGZIP(), []int{0, 0}
}

func (x *XRayConfig_SegmentFields) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *XRayConfig_SegmentFields) GetAws() *structpb.Struct {
	if x != nil {
		return x.Aws
	}
	return nil
}

var File_envoy_config_trace_v3_xray_proto protoreflect.FileDescriptor

const file_envoy_config_trace_v3_xray_proto_rawDesc = "" +
	"\n" +
	" envoy/config/trace/v3/xray.proto\x12\x15envoy.config.trace.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1fenvoy/config/core/v3/base.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\xb8\x03\n" +
	"\n" +
	"XRayConfig\x12L\n" +
	"\x0fdaemon_endpoint\x18\x01 \x01(\v2#.envoy.config.core.v3.SocketAddressR\x0edaemonEndpoint\x12*\n" +
	"\fsegment_name\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\vsegmentName\x12V\n" +
	"\x16sampling_rule_manifest\x18\x03 \x01(\v2 .envoy.config.core.v3.DataSourceR\x14samplingRuleManifest\x12V\n" +
	"\x0esegment_fields\x18\x04 \x01(\v2/.envoy.config.trace.v3.XRayConfig.SegmentFieldsR\rsegmentFields\x1aR\n" +
	"\rSegmentFields\x12\x16\n" +
	"\x06origin\x18\x01 \x01(\tR\x06origin\x12)\n" +
	"\x03aws\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x03aws:,\x9aÅˆ\x1e'\n" +
	"%envoy.config.trace.v2alpha.XRayConfigB\xad\x01\xf2\x98\xfe\x8f\x05'\x12%envoy.extensions.tracers.xray.v4alpha\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"#io.envoyproxy.envoy.config.trace.v3B\tXrayProtoP\x01ZDgithub.com/envoyproxy/go-control-plane/envoy/config/trace/v3;tracev3b\x06proto3"

var (
	file_envoy_config_trace_v3_xray_proto_rawDescOnce sync.Once
	file_envoy_config_trace_v3_xray_proto_rawDescData []byte
)

func file_envoy_config_trace_v3_xray_proto_rawDescGZIP() []byte {
	file_envoy_config_trace_v3_xray_proto_rawDescOnce.Do(func() {
		file_envoy_config_trace_v3_xray_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_trace_v3_xray_proto_rawDesc), len(file_envoy_config_trace_v3_xray_proto_rawDesc)))
	})
	return file_envoy_config_trace_v3_xray_proto_rawDescData
}

var file_envoy_config_trace_v3_xray_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_trace_v3_xray_proto_goTypes = []any{
	(*XRayConfig)(nil),               // 0: envoy.config.trace.v3.XRayConfig
	(*XRayConfig_SegmentFields)(nil), // 1: envoy.config.trace.v3.XRayConfig.SegmentFields
	(*v3.SocketAddress)(nil),         // 2: envoy.config.core.v3.SocketAddress
	(*v3.DataSource)(nil),            // 3: envoy.config.core.v3.DataSource
	(*structpb.Struct)(nil),          // 4: google.protobuf.Struct
}
var file_envoy_config_trace_v3_xray_proto_depIdxs = []int32{
	2, // 0: envoy.config.trace.v3.XRayConfig.daemon_endpoint:type_name -> envoy.config.core.v3.SocketAddress
	3, // 1: envoy.config.trace.v3.XRayConfig.sampling_rule_manifest:type_name -> envoy.config.core.v3.DataSource
	1, // 2: envoy.config.trace.v3.XRayConfig.segment_fields:type_name -> envoy.config.trace.v3.XRayConfig.SegmentFields
	4, // 3: envoy.config.trace.v3.XRayConfig.SegmentFields.aws:type_name -> google.protobuf.Struct
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_envoy_config_trace_v3_xray_proto_init() }
func file_envoy_config_trace_v3_xray_proto_init() {
	if File_envoy_config_trace_v3_xray_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_trace_v3_xray_proto_rawDesc), len(file_envoy_config_trace_v3_xray_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_trace_v3_xray_proto_goTypes,
		DependencyIndexes: file_envoy_config_trace_v3_xray_proto_depIdxs,
		MessageInfos:      file_envoy_config_trace_v3_xray_proto_msgTypes,
	}.Build()
	File_envoy_config_trace_v3_xray_proto = out.File
	file_envoy_config_trace_v3_xray_proto_goTypes = nil
	file_envoy_config_trace_v3_xray_proto_depIdxs = nil
}
