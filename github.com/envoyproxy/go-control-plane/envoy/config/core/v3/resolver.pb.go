// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/core/v3/resolver.proto

package corev3

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
type DnsResolverOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use TCP for all DNS queries instead of the default protocol UDP.
	UseTcpForDnsLookups bool `protobuf:"varint,1,opt,name=use_tcp_for_dns_lookups,json=useTcpForDnsLookups,proto3" json:"use_tcp_for_dns_lookups,omitempty"`
	// Do not use the default search domains; only query hostnames as-is or as aliases.
	NoDefaultSearchDomain bool `protobuf:"varint,2,opt,name=no_default_search_domain,json=noDefaultSearchDomain,proto3" json:"no_default_search_domain,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DnsResolverOptions) Reset() {
	*x = DnsResolverOptions{}
	mi := &file_envoy_config_core_v3_resolver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsResolverOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsResolverOptions) ProtoMessage() {}

func (x *DnsResolverOptions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_resolver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsResolverOptions.ProtoReflect.Descriptor instead.
func (*DnsResolverOptions) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_resolver_proto_rawDescGZIP(), []int{0}
}

func (x *DnsResolverOptions) GetUseTcpForDnsLookups() bool {
	if x != nil {
		return x.UseTcpForDnsLookups
	}
	return false
}

func (x *DnsResolverOptions) GetNoDefaultSearchDomain() bool {
	if x != nil {
		return x.NoDefaultSearchDomain
	}
	return false
}

// DNS resolution configuration which includes the underlying dns resolver addresses and options.
type DnsResolutionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of dns resolver addresses. If specified, the DNS client library will perform resolution
	// via the underlying DNS resolvers. Otherwise, the default system resolvers
	// (e.g., /etc/resolv.conf) will be used.
	Resolvers []*Address `protobuf:"bytes,1,rep,name=resolvers,proto3" json:"resolvers,omitempty"`
	// Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
	DnsResolverOptions *DnsResolverOptions `protobuf:"bytes,2,opt,name=dns_resolver_options,json=dnsResolverOptions,proto3" json:"dns_resolver_options,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DnsResolutionConfig) Reset() {
	*x = DnsResolutionConfig{}
	mi := &file_envoy_config_core_v3_resolver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DnsResolutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsResolutionConfig) ProtoMessage() {}

func (x *DnsResolutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_core_v3_resolver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsResolutionConfig.ProtoReflect.Descriptor instead.
func (*DnsResolutionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_config_core_v3_resolver_proto_rawDescGZIP(), []int{1}
}

func (x *DnsResolutionConfig) GetResolvers() []*Address {
	if x != nil {
		return x.Resolvers
	}
	return nil
}

func (x *DnsResolutionConfig) GetDnsResolverOptions() *DnsResolverOptions {
	if x != nil {
		return x.DnsResolverOptions
	}
	return nil
}

var File_envoy_config_core_v3_resolver_proto protoreflect.FileDescriptor

const file_envoy_config_core_v3_resolver_proto_rawDesc = "" +
	"\n" +
	"#envoy/config/core/v3/resolver.proto\x12\x14envoy.config.core.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\x83\x01\n" +
	"\x12DnsResolverOptions\x124\n" +
	"\x17use_tcp_for_dns_lookups\x18\x01 \x01(\bR\x13useTcpForDnsLookups\x127\n" +
	"\x18no_default_search_domain\x18\x02 \x01(\bR\x15noDefaultSearchDomain\"\xb8\x01\n" +
	"\x13DnsResolutionConfig\x12E\n" +
	"\tresolvers\x18\x01 \x03(\v2\x1d.envoy.config.core.v3.AddressB\b\xfaB\x05\x92\x01\x02\b\x01R\tresolvers\x12Z\n" +
	"\x14dns_resolver_options\x18\x02 \x01(\v2(.envoy.config.core.v3.DnsResolverOptionsR\x12dnsResolverOptionsB\x81\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\n" +
	"\"io.envoyproxy.envoy.config.core.v3B\rResolverProtoP\x01ZBgithub.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3b\x06proto3"

var (
	file_envoy_config_core_v3_resolver_proto_rawDescOnce sync.Once
	file_envoy_config_core_v3_resolver_proto_rawDescData []byte
)

func file_envoy_config_core_v3_resolver_proto_rawDescGZIP() []byte {
	file_envoy_config_core_v3_resolver_proto_rawDescOnce.Do(func() {
		file_envoy_config_core_v3_resolver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_core_v3_resolver_proto_rawDesc), len(file_envoy_config_core_v3_resolver_proto_rawDesc)))
	})
	return file_envoy_config_core_v3_resolver_proto_rawDescData
}

var file_envoy_config_core_v3_resolver_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_core_v3_resolver_proto_goTypes = []any{
	(*DnsResolverOptions)(nil),  // 0: envoy.config.core.v3.DnsResolverOptions
	(*DnsResolutionConfig)(nil), // 1: envoy.config.core.v3.DnsResolutionConfig
	(*Address)(nil),             // 2: envoy.config.core.v3.Address
}
var file_envoy_config_core_v3_resolver_proto_depIdxs = []int32{
	2, // 0: envoy.config.core.v3.DnsResolutionConfig.resolvers:type_name -> envoy.config.core.v3.Address
	0, // 1: envoy.config.core.v3.DnsResolutionConfig.dns_resolver_options:type_name -> envoy.config.core.v3.DnsResolverOptions
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_config_core_v3_resolver_proto_init() }
func file_envoy_config_core_v3_resolver_proto_init() {
	if File_envoy_config_core_v3_resolver_proto != nil {
		return
	}
	file_envoy_config_core_v3_address_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_core_v3_resolver_proto_rawDesc), len(file_envoy_config_core_v3_resolver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_core_v3_resolver_proto_goTypes,
		DependencyIndexes: file_envoy_config_core_v3_resolver_proto_depIdxs,
		MessageInfos:      file_envoy_config_core_v3_resolver_proto_msgTypes,
	}.Build()
	File_envoy_config_core_v3_resolver_proto = out.File
	file_envoy_config_core_v3_resolver_proto_goTypes = nil
	file_envoy_config_core_v3_resolver_proto_depIdxs = nil
}
