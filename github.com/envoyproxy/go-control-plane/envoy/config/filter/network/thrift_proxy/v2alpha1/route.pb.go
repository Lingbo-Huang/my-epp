// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto

package v2alpha1

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RouteConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the route configuration. Reserved for future use in asynchronous route discovery.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of routes that will be matched, in order, against incoming requests. The first route
	// that matches will be used.
	Routes        []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteConfiguration) Reset() {
	*x = RouteConfiguration{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfiguration) ProtoMessage() {}

func (x *RouteConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfiguration.ProtoReflect.Descriptor instead.
func (*RouteConfiguration) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{0}
}

func (x *RouteConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfiguration) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Route struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Route matching parameters.
	Match *RouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Route request to some upstream cluster.
	Route         *RouteAction `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetMatch() *RouteMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Route) GetRoute() *RouteAction {
	if x != nil {
		return x.Route
	}
	return nil
}

type RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MatchSpecifier:
	//
	//	*RouteMatch_MethodName
	//	*RouteMatch_ServiceName
	MatchSpecifier isRouteMatch_MatchSpecifier `protobuf_oneof:"match_specifier"`
	// Inverts whatever matching is done in the :ref:`method_name
	// <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>` or
	// :ref:`service_name
	// <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` fields.
	// Cannot be combined with wildcard matching as that would result in routes never being matched.
	//
	// .. note::
	//
	//	This does not invert matching done as part of the :ref:`headers field
	//	<envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers>` field. To
	//	invert header matching, see :ref:`invert_match
	//	<envoy_api_field_route.HeaderMatcher.invert_match>`.
	Invert bool `protobuf:"varint,3,opt,name=invert,proto3" json:"invert,omitempty"`
	// Specifies a set of headers that the route should match on. The router will check the requestâ€™s
	// headers against all the specified headers in the route config. A match will happen if all the
	// headers in the route are present in the request with the same values (or based on presence if
	// the value field is not in the config). Note that this only applies for Thrift transports and/or
	// protocols that support headers.
	Headers       []*route.HeaderMatcher `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{2}
}

func (x *RouteMatch) GetMatchSpecifier() isRouteMatch_MatchSpecifier {
	if x != nil {
		return x.MatchSpecifier
	}
	return nil
}

func (x *RouteMatch) GetMethodName() string {
	if x != nil {
		if x, ok := x.MatchSpecifier.(*RouteMatch_MethodName); ok {
			return x.MethodName
		}
	}
	return ""
}

func (x *RouteMatch) GetServiceName() string {
	if x != nil {
		if x, ok := x.MatchSpecifier.(*RouteMatch_ServiceName); ok {
			return x.ServiceName
		}
	}
	return ""
}

func (x *RouteMatch) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

func (x *RouteMatch) GetHeaders() []*route.HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

type isRouteMatch_MatchSpecifier interface {
	isRouteMatch_MatchSpecifier()
}

type RouteMatch_MethodName struct {
	// If specified, the route must exactly match the request method name. As a special case, an
	// empty string matches any request method name.
	MethodName string `protobuf:"bytes,1,opt,name=method_name,json=methodName,proto3,oneof"`
}

type RouteMatch_ServiceName struct {
	// If specified, the route must have the service name as the request method name prefix. As a
	// special case, an empty string matches any service name. Only relevant when service
	// multiplexing.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3,oneof"`
}

func (*RouteMatch_MethodName) isRouteMatch_MatchSpecifier() {}

func (*RouteMatch_ServiceName) isRouteMatch_MatchSpecifier() {}

// [#next-free-field: 7]
type RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ClusterSpecifier:
	//
	//	*RouteAction_Cluster
	//	*RouteAction_WeightedClusters
	//	*RouteAction_ClusterHeader
	ClusterSpecifier isRouteAction_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	// Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
	// the upstream cluster with metadata matching what is set in this field will be considered.
	// Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match
	// <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.metadata_match>`,
	// with values there taking precedence. Keys and values should be provided under the "envoy.lb"
	// metadata key.
	MetadataMatch *core.Metadata `protobuf:"bytes,3,opt,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty"`
	// Specifies a set of rate limit configurations that could be applied to the route.
	// N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders
	// action with the header name ":method-name".
	RateLimits []*route.RateLimit `protobuf:"bytes,4,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
	// Strip the service prefix from the method name, if there's a prefix. For
	// example, the method call Service:method would end up being just method.
	StripServiceName bool `protobuf:"varint,5,opt,name=strip_service_name,json=stripServiceName,proto3" json:"strip_service_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteAction) Reset() {
	*x = RouteAction{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAction) ProtoMessage() {}

func (x *RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAction.ProtoReflect.Descriptor instead.
func (*RouteAction) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{3}
}

func (x *RouteAction) GetClusterSpecifier() isRouteAction_ClusterSpecifier {
	if x != nil {
		return x.ClusterSpecifier
	}
	return nil
}

func (x *RouteAction) GetCluster() string {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_Cluster); ok {
			return x.Cluster
		}
	}
	return ""
}

func (x *RouteAction) GetWeightedClusters() *WeightedCluster {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_WeightedClusters); ok {
			return x.WeightedClusters
		}
	}
	return nil
}

func (x *RouteAction) GetClusterHeader() string {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_ClusterHeader); ok {
			return x.ClusterHeader
		}
	}
	return ""
}

func (x *RouteAction) GetMetadataMatch() *core.Metadata {
	if x != nil {
		return x.MetadataMatch
	}
	return nil
}

func (x *RouteAction) GetRateLimits() []*route.RateLimit {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *RouteAction) GetStripServiceName() bool {
	if x != nil {
		return x.StripServiceName
	}
	return false
}

type isRouteAction_ClusterSpecifier interface {
	isRouteAction_ClusterSpecifier()
}

type RouteAction_Cluster struct {
	// Indicates a single upstream cluster to which the request should be routed
	// to.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3,oneof"`
}

type RouteAction_WeightedClusters struct {
	// Multiple upstream clusters can be specified for a given route. The
	// request is routed to one of the upstream clusters based on weights
	// assigned to each cluster.
	WeightedClusters *WeightedCluster `protobuf:"bytes,2,opt,name=weighted_clusters,json=weightedClusters,proto3,oneof"`
}

type RouteAction_ClusterHeader struct {
	// Envoy will determine the cluster to route to by reading the value of the
	// Thrift header named by cluster_header from the request headers. If the
	// header is not found or the referenced cluster does not exist Envoy will
	// respond with an unknown method exception or an internal error exception,
	// respectively.
	ClusterHeader string `protobuf:"bytes,6,opt,name=cluster_header,json=clusterHeader,proto3,oneof"`
}

func (*RouteAction_Cluster) isRouteAction_ClusterSpecifier() {}

func (*RouteAction_WeightedClusters) isRouteAction_ClusterSpecifier() {}

func (*RouteAction_ClusterHeader) isRouteAction_ClusterSpecifier() {}

// Allows for specification of multiple upstream clusters along with weights that indicate the
// percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
// based on these weights.
type WeightedCluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies one or more upstream clusters associated with the route.
	Clusters      []*WeightedCluster_ClusterWeight `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeightedCluster) Reset() {
	*x = WeightedCluster{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeightedCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedCluster) ProtoMessage() {}

func (x *WeightedCluster) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedCluster.ProtoReflect.Descriptor instead.
func (*WeightedCluster) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{4}
}

func (x *WeightedCluster) GetClusters() []*WeightedCluster_ClusterWeight {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type WeightedCluster_ClusterWeight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the upstream cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When a request matches the route, the choice of an upstream cluster is determined by its
	// weight. The sum of weights across all entries in the clusters array determines the total
	// weight.
	Weight *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
	// the upstream cluster with metadata matching what is set in this field, combined with what's
	// provided in :ref:`RouteAction's metadata_match
	// <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteAction.metadata_match>`,
	// will be considered. Values here will take precedence. Keys and values should be provided
	// under the "envoy.lb" metadata key.
	MetadataMatch *core.Metadata `protobuf:"bytes,3,opt,name=metadata_match,json=metadataMatch,proto3" json:"metadata_match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeightedCluster_ClusterWeight) Reset() {
	*x = WeightedCluster_ClusterWeight{}
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeightedCluster_ClusterWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedCluster_ClusterWeight) ProtoMessage() {}

func (x *WeightedCluster_ClusterWeight) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedCluster_ClusterWeight.ProtoReflect.Descriptor instead.
func (*WeightedCluster_ClusterWeight) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{4, 0}
}

func (x *WeightedCluster_ClusterWeight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeightedCluster_ClusterWeight) GetWeight() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *WeightedCluster_ClusterWeight) GetMetadataMatch() *core.Metadata {
	if x != nil {
		return x.MetadataMatch
	}
	return nil
}

var File_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto protoreflect.FileDescriptor

const file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDesc = "" +
	"\n" +
	"=envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto\x121envoy.config.filter.network.thrift_proxy.v2alpha1\x1a\x1cenvoy/api/v2/core/base.proto\x1a)envoy/api/v2/route/route_components.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"z\n" +
	"\x12RouteConfiguration\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12P\n" +
	"\x06routes\x18\x02 \x03(\v28.envoy.config.filter.network.thrift_proxy.v2alpha1.RouteR\x06routes\"\xc6\x01\n" +
	"\x05Route\x12]\n" +
	"\x05match\x18\x01 \x01(\v2=.envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatchB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05match\x12^\n" +
	"\x05route\x18\x02 \x01(\v2>.envoy.config.filter.network.thrift_proxy.v2alpha1.RouteActionB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05route\"\xc1\x01\n" +
	"\n" +
	"RouteMatch\x12!\n" +
	"\vmethod_name\x18\x01 \x01(\tH\x00R\n" +
	"methodName\x12#\n" +
	"\fservice_name\x18\x02 \x01(\tH\x00R\vserviceName\x12\x16\n" +
	"\x06invert\x18\x03 \x01(\bR\x06invert\x12;\n" +
	"\aheaders\x18\x04 \x03(\v2!.envoy.api.v2.route.HeaderMatcherR\aheadersB\x16\n" +
	"\x0fmatch_specifier\x12\x03\xf8B\x01\"\xa3\x03\n" +
	"\vRouteAction\x12#\n" +
	"\acluster\x18\x01 \x01(\tB\a\xfaB\x04r\x02 \x01H\x00R\acluster\x12q\n" +
	"\x11weighted_clusters\x18\x02 \x01(\v2B.envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedClusterH\x00R\x10weightedClusters\x120\n" +
	"\x0ecluster_header\x18\x06 \x01(\tB\a\xfaB\x04r\x02 \x01H\x00R\rclusterHeader\x12B\n" +
	"\x0emetadata_match\x18\x03 \x01(\v2\x1b.envoy.api.v2.core.MetadataR\rmetadataMatch\x12>\n" +
	"\vrate_limits\x18\x04 \x03(\v2\x1d.envoy.api.v2.route.RateLimitR\n" +
	"rateLimits\x12,\n" +
	"\x12strip_service_name\x18\x05 \x01(\bR\x10stripServiceNameB\x18\n" +
	"\x11cluster_specifier\x12\x03\xf8B\x01\"\xbb\x02\n" +
	"\x0fWeightedCluster\x12v\n" +
	"\bclusters\x18\x01 \x03(\v2P.envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeightB\b\xfaB\x05\x92\x01\x02\b\x01R\bclusters\x1a\xaf\x01\n" +
	"\rClusterWeight\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02 \x01R\x04name\x12=\n" +
	"\x06weight\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueB\a\xfaB\x04*\x02(\x01R\x06weight\x12B\n" +
	"\x0emetadata_match\x18\x03 \x01(\v2\x1b.envoy.api.v2.core.MetadataR\rmetadataMatchB\xe9\x01\xf2\x98\xfe\x8f\x052\x120envoy.extensions.filters.network.thrift_proxy.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"?io.envoyproxy.envoy.config.filter.network.thrift_proxy.v2alpha1B\n" +
	"RouteProtoP\x01ZXgithub.com/envoyproxy/go-control-plane/envoy/config/filter/network/thrift_proxy/v2alpha1b\x06proto3"

var (
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescOnce sync.Once
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescData []byte
)

func file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDesc), len(file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDesc)))
	})
	return file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDescData
}

var file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_goTypes = []any{
	(*RouteConfiguration)(nil),            // 0: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration
	(*Route)(nil),                         // 1: envoy.config.filter.network.thrift_proxy.v2alpha1.Route
	(*RouteMatch)(nil),                    // 2: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch
	(*RouteAction)(nil),                   // 3: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction
	(*WeightedCluster)(nil),               // 4: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster
	(*WeightedCluster_ClusterWeight)(nil), // 5: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight
	(*route.HeaderMatcher)(nil),           // 6: envoy.api.v2.route.HeaderMatcher
	(*core.Metadata)(nil),                 // 7: envoy.api.v2.core.Metadata
	(*route.RateLimit)(nil),               // 8: envoy.api.v2.route.RateLimit
	(*wrapperspb.UInt32Value)(nil),        // 9: google.protobuf.UInt32Value
}
var file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_depIdxs = []int32{
	1,  // 0: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration.routes:type_name -> envoy.config.filter.network.thrift_proxy.v2alpha1.Route
	2,  // 1: envoy.config.filter.network.thrift_proxy.v2alpha1.Route.match:type_name -> envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch
	3,  // 2: envoy.config.filter.network.thrift_proxy.v2alpha1.Route.route:type_name -> envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction
	6,  // 3: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers:type_name -> envoy.api.v2.route.HeaderMatcher
	4,  // 4: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction.weighted_clusters:type_name -> envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster
	7,  // 5: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction.metadata_match:type_name -> envoy.api.v2.core.Metadata
	8,  // 6: envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction.rate_limits:type_name -> envoy.api.v2.route.RateLimit
	5,  // 7: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.clusters:type_name -> envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight
	9,  // 8: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.weight:type_name -> google.protobuf.UInt32Value
	7,  // 9: envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.metadata_match:type_name -> envoy.api.v2.core.Metadata
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_init() }
func file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_init() {
	if File_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto != nil {
		return
	}
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[2].OneofWrappers = []any{
		(*RouteMatch_MethodName)(nil),
		(*RouteMatch_ServiceName)(nil),
	}
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes[3].OneofWrappers = []any{
		(*RouteAction_Cluster)(nil),
		(*RouteAction_WeightedClusters)(nil),
		(*RouteAction_ClusterHeader)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDesc), len(file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto = out.File
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_goTypes = nil
	file_envoy_config_filter_network_thrift_proxy_v2alpha1_route_proto_depIdxs = nil
}
