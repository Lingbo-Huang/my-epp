// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto

package v2alpha1

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_type "github.com/envoyproxy/go-control-plane/envoy/type"
	matcher "github.com/envoyproxy/go-control-plane/envoy/type/matcher"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#next-free-field: 6]
type RouteConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the route configuration. Reserved for future use in asynchronous route discovery.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The interface name of the service.
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// Which group does the interface belong to.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// The version number of the interface.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The list of routes that will be matched, in order, against incoming requests. The first route
	// that matches will be used.
	Routes        []*Route `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteConfiguration) Reset() {
	*x = RouteConfiguration{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfiguration) ProtoMessage() {}

func (x *RouteConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfiguration.ProtoReflect.Descriptor instead.
func (*RouteConfiguration) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{0}
}

func (x *RouteConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteConfiguration) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *RouteConfiguration) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RouteConfiguration) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RouteConfiguration) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Route struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Route matching parameters.
	Match *RouteMatch `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Route request to some upstream cluster.
	Route         *RouteAction `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetMatch() *RouteMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Route) GetRoute() *RouteAction {
	if x != nil {
		return x.Route
	}
	return nil
}

type RouteMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Method level routing matching.
	Method *MethodMatch `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Specifies a set of headers that the route should match on. The router will check the requestâ€™s
	// headers against all the specified headers in the route config. A match will happen if all the
	// headers in the route are present in the request with the same values (or based on presence if
	// the value field is not in the config).
	Headers       []*route.HeaderMatcher `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{2}
}

func (x *RouteMatch) GetMethod() *MethodMatch {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *RouteMatch) GetHeaders() []*route.HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

type RouteAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ClusterSpecifier:
	//
	//	*RouteAction_Cluster
	//	*RouteAction_WeightedClusters
	ClusterSpecifier isRouteAction_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RouteAction) Reset() {
	*x = RouteAction{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAction) ProtoMessage() {}

func (x *RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAction.ProtoReflect.Descriptor instead.
func (*RouteAction) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{3}
}

func (x *RouteAction) GetClusterSpecifier() isRouteAction_ClusterSpecifier {
	if x != nil {
		return x.ClusterSpecifier
	}
	return nil
}

func (x *RouteAction) GetCluster() string {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_Cluster); ok {
			return x.Cluster
		}
	}
	return ""
}

func (x *RouteAction) GetWeightedClusters() *route.WeightedCluster {
	if x != nil {
		if x, ok := x.ClusterSpecifier.(*RouteAction_WeightedClusters); ok {
			return x.WeightedClusters
		}
	}
	return nil
}

type isRouteAction_ClusterSpecifier interface {
	isRouteAction_ClusterSpecifier()
}

type RouteAction_Cluster struct {
	// Indicates the upstream cluster to which the request should be routed.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3,oneof"`
}

type RouteAction_WeightedClusters struct {
	// Multiple upstream clusters can be specified for a given route. The
	// request is routed to one of the upstream clusters based on weights
	// assigned to each cluster.
	// Currently ClusterWeight only supports the name and weight fields.
	WeightedClusters *route.WeightedCluster `protobuf:"bytes,2,opt,name=weighted_clusters,json=weightedClusters,proto3,oneof"`
}

func (*RouteAction_Cluster) isRouteAction_ClusterSpecifier() {}

func (*RouteAction_WeightedClusters) isRouteAction_ClusterSpecifier() {}

type MethodMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the method.
	Name *matcher.StringMatcher `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Method parameter definition.
	// The key is the parameter index, starting from 0.
	// The value is the parameter matching type.
	ParamsMatch   map[uint32]*MethodMatch_ParameterMatchSpecifier `protobuf:"bytes,2,rep,name=params_match,json=paramsMatch,proto3" json:"params_match,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MethodMatch) Reset() {
	*x = MethodMatch{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodMatch) ProtoMessage() {}

func (x *MethodMatch) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodMatch.ProtoReflect.Descriptor instead.
func (*MethodMatch) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{4}
}

func (x *MethodMatch) GetName() *matcher.StringMatcher {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *MethodMatch) GetParamsMatch() map[uint32]*MethodMatch_ParameterMatchSpecifier {
	if x != nil {
		return x.ParamsMatch
	}
	return nil
}

// The parameter matching type.
type MethodMatch_ParameterMatchSpecifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ParameterMatchSpecifier:
	//
	//	*MethodMatch_ParameterMatchSpecifier_ExactMatch
	//	*MethodMatch_ParameterMatchSpecifier_RangeMatch
	ParameterMatchSpecifier isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier `protobuf_oneof:"parameter_match_specifier"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MethodMatch_ParameterMatchSpecifier) Reset() {
	*x = MethodMatch_ParameterMatchSpecifier{}
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MethodMatch_ParameterMatchSpecifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodMatch_ParameterMatchSpecifier) ProtoMessage() {}

func (x *MethodMatch_ParameterMatchSpecifier) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodMatch_ParameterMatchSpecifier.ProtoReflect.Descriptor instead.
func (*MethodMatch_ParameterMatchSpecifier) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP(), []int{4, 0}
}

func (x *MethodMatch_ParameterMatchSpecifier) GetParameterMatchSpecifier() isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier {
	if x != nil {
		return x.ParameterMatchSpecifier
	}
	return nil
}

func (x *MethodMatch_ParameterMatchSpecifier) GetExactMatch() string {
	if x != nil {
		if x, ok := x.ParameterMatchSpecifier.(*MethodMatch_ParameterMatchSpecifier_ExactMatch); ok {
			return x.ExactMatch
		}
	}
	return ""
}

func (x *MethodMatch_ParameterMatchSpecifier) GetRangeMatch() *_type.Int64Range {
	if x != nil {
		if x, ok := x.ParameterMatchSpecifier.(*MethodMatch_ParameterMatchSpecifier_RangeMatch); ok {
			return x.RangeMatch
		}
	}
	return nil
}

type isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier interface {
	isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier()
}

type MethodMatch_ParameterMatchSpecifier_ExactMatch struct {
	// If specified, header match will be performed based on the value of the header.
	ExactMatch string `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type MethodMatch_ParameterMatchSpecifier_RangeMatch struct {
	// If specified, header match will be performed based on range.
	// The rule will match if the request header value is within this range.
	// The entire request header value must represent an integer in base 10 notation: consisting
	// of an optional plus or minus sign followed by a sequence of digits. The rule will not match
	// if the header value does not represent an integer. Match will fail for empty values,
	// floating point numbers or if only a subsequence of the header value is an integer.
	//
	// Examples:
	//
	//   - For range [-10,0), route will match for header value -1, but not for 0,
	//     "somestring", 10.9, "-1somestring"
	RangeMatch *_type.Int64Range `protobuf:"bytes,4,opt,name=range_match,json=rangeMatch,proto3,oneof"`
}

func (*MethodMatch_ParameterMatchSpecifier_ExactMatch) isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier() {
}

func (*MethodMatch_ParameterMatchSpecifier_RangeMatch) isMethodMatch_ParameterMatchSpecifier_ParameterMatchSpecifier() {
}

var File_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto protoreflect.FileDescriptor

const file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDesc = "" +
	"\n" +
	"<envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto\x120envoy.config.filter.network.dubbo_proxy.v2alpha1\x1a)envoy/api/v2/route/route_components.proto\x1a\x1fenvoy/type/matcher/string.proto\x1a\x16envoy/type/range.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xc7\x01\n" +
	"\x12RouteConfiguration\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tinterface\x18\x02 \x01(\tR\tinterface\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12O\n" +
	"\x06routes\x18\x05 \x03(\v27.envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteR\x06routes\"\xc4\x01\n" +
	"\x05Route\x12\\\n" +
	"\x05match\x18\x01 \x01(\v2<.envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatchB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05match\x12]\n" +
	"\x05route\x18\x02 \x01(\v2=.envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteActionB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05route\"\xa0\x01\n" +
	"\n" +
	"RouteMatch\x12U\n" +
	"\x06method\x18\x01 \x01(\v2=.envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatchR\x06method\x12;\n" +
	"\aheaders\x18\x02 \x03(\v2!.envoy.api.v2.route.HeaderMatcherR\aheaders\"\x97\x01\n" +
	"\vRouteAction\x12\x1a\n" +
	"\acluster\x18\x01 \x01(\tH\x00R\acluster\x12R\n" +
	"\x11weighted_clusters\x18\x02 \x01(\v2#.envoy.api.v2.route.WeightedClusterH\x00R\x10weightedClustersB\x18\n" +
	"\x11cluster_specifier\x12\x03\xf8B\x01\"\xe6\x03\n" +
	"\vMethodMatch\x125\n" +
	"\x04name\x18\x01 \x01(\v2!.envoy.type.matcher.StringMatcherR\x04name\x12q\n" +
	"\fparams_match\x18\x02 \x03(\v2N.envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntryR\vparamsMatch\x1a\x94\x01\n" +
	"\x17ParameterMatchSpecifier\x12!\n" +
	"\vexact_match\x18\x03 \x01(\tH\x00R\n" +
	"exactMatch\x129\n" +
	"\vrange_match\x18\x04 \x01(\v2\x16.envoy.type.Int64RangeH\x00R\n" +
	"rangeMatchB\x1b\n" +
	"\x19parameter_match_specifier\x1a\x95\x01\n" +
	"\x10ParamsMatchEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12k\n" +
	"\x05value\x18\x02 \x01(\v2U.envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifierR\x05value:\x028\x01B\xe6\x01\xf2\x98\xfe\x8f\x051\x12/envoy.extensions.filters.network.dubbo_proxy.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	">io.envoyproxy.envoy.config.filter.network.dubbo_proxy.v2alpha1B\n" +
	"RouteProtoP\x01ZWgithub.com/envoyproxy/go-control-plane/envoy/config/filter/network/dubbo_proxy/v2alpha1b\x06proto3"

var (
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescOnce sync.Once
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescData []byte
)

func file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDesc), len(file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDesc)))
	})
	return file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDescData
}

var file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_goTypes = []any{
	(*RouteConfiguration)(nil),                  // 0: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration
	(*Route)(nil),                               // 1: envoy.config.filter.network.dubbo_proxy.v2alpha1.Route
	(*RouteMatch)(nil),                          // 2: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch
	(*RouteAction)(nil),                         // 3: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction
	(*MethodMatch)(nil),                         // 4: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch
	(*MethodMatch_ParameterMatchSpecifier)(nil), // 5: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier
	nil,                           // 6: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry
	(*route.HeaderMatcher)(nil),   // 7: envoy.api.v2.route.HeaderMatcher
	(*route.WeightedCluster)(nil), // 8: envoy.api.v2.route.WeightedCluster
	(*matcher.StringMatcher)(nil), // 9: envoy.type.matcher.StringMatcher
	(*_type.Int64Range)(nil),      // 10: envoy.type.Int64Range
}
var file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_depIdxs = []int32{
	1,  // 0: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration.routes:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.Route
	2,  // 1: envoy.config.filter.network.dubbo_proxy.v2alpha1.Route.match:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch
	3,  // 2: envoy.config.filter.network.dubbo_proxy.v2alpha1.Route.route:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction
	4,  // 3: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch.method:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch
	7,  // 4: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch.headers:type_name -> envoy.api.v2.route.HeaderMatcher
	8,  // 5: envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction.weighted_clusters:type_name -> envoy.api.v2.route.WeightedCluster
	9,  // 6: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.name:type_name -> envoy.type.matcher.StringMatcher
	6,  // 7: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.params_match:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry
	10, // 8: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier.range_match:type_name -> envoy.type.Int64Range
	5,  // 9: envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry.value:type_name -> envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_init() }
func file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_init() {
	if File_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto != nil {
		return
	}
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[3].OneofWrappers = []any{
		(*RouteAction_Cluster)(nil),
		(*RouteAction_WeightedClusters)(nil),
	}
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes[5].OneofWrappers = []any{
		(*MethodMatch_ParameterMatchSpecifier_ExactMatch)(nil),
		(*MethodMatch_ParameterMatchSpecifier_RangeMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDesc), len(file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto = out.File
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_goTypes = nil
	file_envoy_config_filter_network_dubbo_proxy_v2alpha1_route_proto_depIdxs = nil
}
