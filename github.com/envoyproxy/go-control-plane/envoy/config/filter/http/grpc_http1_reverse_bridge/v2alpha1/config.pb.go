// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto

package v2alpha1

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gRPC reverse bridge filter configuration
type FilterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The content-type to pass to the upstream when the gRPC bridge filter is applied.
	// The filter will also validate that the upstream responds with the same content type.
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// If true, Envoy will assume that the upstream doesn't understand gRPC frames and
	// strip the gRPC frame from the request, and add it back in to the response. This will
	// hide the gRPC semantics from the upstream, allowing it to receive and respond with a
	// simple binary encoded protobuf.
	WithholdGrpcFrames bool `protobuf:"varint,2,opt,name=withhold_grpc_frames,json=withholdGrpcFrames,proto3" json:"withhold_grpc_frames,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FilterConfig) Reset() {
	*x = FilterConfig{}
	mi := &file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig) ProtoMessage() {}

func (x *FilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig.ProtoReflect.Descriptor instead.
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescGZIP(), []int{0}
}

func (x *FilterConfig) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FilterConfig) GetWithholdGrpcFrames() bool {
	if x != nil {
		return x.WithholdGrpcFrames
	}
	return false
}

// gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level.
type FilterConfigPerRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, disables gRPC reverse bridge filter for this particular vhost or route.
	// If disabled is specified in multiple per-filter-configs, the most specific one will be used.
	Disabled      bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterConfigPerRoute) Reset() {
	*x = FilterConfigPerRoute{}
	mi := &file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfigPerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfigPerRoute) ProtoMessage() {}

func (x *FilterConfigPerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfigPerRoute.ProtoReflect.Descriptor instead.
func (*FilterConfigPerRoute) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescGZIP(), []int{1}
}

func (x *FilterConfigPerRoute) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

var File_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDesc = "" +
	"\n" +
	"Henvoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1/config.proto\x12;envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"l\n" +
	"\fFilterConfig\x12*\n" +
	"\fcontent_type\x18\x01 \x01(\tB\a\xfaB\x04r\x02 \x01R\vcontentType\x120\n" +
	"\x14withhold_grpc_frames\x18\x02 \x01(\bR\x12withholdGrpcFrames\"2\n" +
	"\x14FilterConfigPerRoute\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabledB\x88\x02\xf2\x98\xfe\x8f\x05<\x12:envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"Iio.envoyproxy.envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1B\vConfigProtoP\x01Zbgithub.com/envoyproxy/go-control-plane/envoy/config/filter/http/grpc_http1_reverse_bridge/v2alpha1b\x06proto3"

var (
	file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescData []byte
)

func file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDesc), len(file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDescData
}

var file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_goTypes = []any{
	(*FilterConfig)(nil),         // 0: envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig
	(*FilterConfigPerRoute)(nil), // 1: envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfigPerRoute
}
var file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_init() }
func file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_init() {
	if File_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDesc), len(file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto = out.File
	file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_goTypes = nil
	file_envoy_config_filter_http_grpc_http1_reverse_bridge_v2alpha1_config_proto_depIdxs = nil
}
