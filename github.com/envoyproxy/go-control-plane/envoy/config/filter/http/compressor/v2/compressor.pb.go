// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/http/compressor/v2/compressor.proto

package compressorv2

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#next-free-field: 6]
type Compressor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum response length, in bytes, which will trigger compression. The default value is 30.
	ContentLength *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// Set of strings that allows specifying which mime-types yield compression; e.g.,
	// application/json, text/html, etc. When this field is not defined, compression will be applied
	// to the following mime-types: "application/javascript", "application/json",
	// "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
	// and their synonyms.
	ContentType []string `protobuf:"bytes,2,rep,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// If true, disables compression when the response contains an etag header. When it is false, the
	// filter will preserve weak etags and remove the ones that require strong validation.
	DisableOnEtagHeader bool `protobuf:"varint,3,opt,name=disable_on_etag_header,json=disableOnEtagHeader,proto3" json:"disable_on_etag_header,omitempty"`
	// If true, removes accept-encoding from the request headers before dispatching it to the upstream
	// so that responses do not get compressed before reaching the filter.
	// .. attention:
	//
	//	To avoid interfering with other compression filters in the same chain use this option in
	//	the filter closest to the upstream.
	RemoveAcceptEncodingHeader bool `protobuf:"varint,4,opt,name=remove_accept_encoding_header,json=removeAcceptEncodingHeader,proto3" json:"remove_accept_encoding_header,omitempty"`
	// Runtime flag that controls whether the filter is enabled or not. If set to false, the
	// filter will operate as a pass-through filter. If not specified, defaults to enabled.
	RuntimeEnabled *core.RuntimeFeatureFlag `protobuf:"bytes,5,opt,name=runtime_enabled,json=runtimeEnabled,proto3" json:"runtime_enabled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Compressor) Reset() {
	*x = Compressor{}
	mi := &file_envoy_config_filter_http_compressor_v2_compressor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compressor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compressor) ProtoMessage() {}

func (x *Compressor) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_compressor_v2_compressor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compressor.ProtoReflect.Descriptor instead.
func (*Compressor) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescGZIP(), []int{0}
}

func (x *Compressor) GetContentLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ContentLength
	}
	return nil
}

func (x *Compressor) GetContentType() []string {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *Compressor) GetDisableOnEtagHeader() bool {
	if x != nil {
		return x.DisableOnEtagHeader
	}
	return false
}

func (x *Compressor) GetRemoveAcceptEncodingHeader() bool {
	if x != nil {
		return x.RemoveAcceptEncodingHeader
	}
	return false
}

func (x *Compressor) GetRuntimeEnabled() *core.RuntimeFeatureFlag {
	if x != nil {
		return x.RuntimeEnabled
	}
	return nil
}

var File_envoy_config_filter_http_compressor_v2_compressor_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDesc = "" +
	"\n" +
	"7envoy/config/filter/http/compressor/v2/compressor.proto\x12&envoy.config.filter.http.compressor.v2\x1a\x1cenvoy/api/v2/core/base.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\"\xbc\x02\n" +
	"\n" +
	"Compressor\x12C\n" +
	"\x0econtent_length\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\rcontentLength\x12!\n" +
	"\fcontent_type\x18\x02 \x03(\tR\vcontentType\x123\n" +
	"\x16disable_on_etag_header\x18\x03 \x01(\bR\x13disableOnEtagHeader\x12A\n" +
	"\x1dremove_accept_encoding_header\x18\x04 \x01(\bR\x1aremoveAcceptEncodingHeader\x12N\n" +
	"\x0fruntime_enabled\x18\x05 \x01(\v2%.envoy.api.v2.core.RuntimeFeatureFlagR\x0eruntimeEnabledB\xe0\x01\xf2\x98\xfe\x8f\x05-\x12+envoy.extensions.filters.http.compressor.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"4io.envoyproxy.envoy.config.filter.http.compressor.v2B\x0fCompressorProtoP\x01ZZgithub.com/envoyproxy/go-control-plane/envoy/config/filter/http/compressor/v2;compressorv2b\x06proto3"

var (
	file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescData []byte
)

func file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDesc), len(file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDescData
}

var file_envoy_config_filter_http_compressor_v2_compressor_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_config_filter_http_compressor_v2_compressor_proto_goTypes = []any{
	(*Compressor)(nil),              // 0: envoy.config.filter.http.compressor.v2.Compressor
	(*wrapperspb.UInt32Value)(nil),  // 1: google.protobuf.UInt32Value
	(*core.RuntimeFeatureFlag)(nil), // 2: envoy.api.v2.core.RuntimeFeatureFlag
}
var file_envoy_config_filter_http_compressor_v2_compressor_proto_depIdxs = []int32{
	1, // 0: envoy.config.filter.http.compressor.v2.Compressor.content_length:type_name -> google.protobuf.UInt32Value
	2, // 1: envoy.config.filter.http.compressor.v2.Compressor.runtime_enabled:type_name -> envoy.api.v2.core.RuntimeFeatureFlag
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_compressor_v2_compressor_proto_init() }
func file_envoy_config_filter_http_compressor_v2_compressor_proto_init() {
	if File_envoy_config_filter_http_compressor_v2_compressor_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDesc), len(file_envoy_config_filter_http_compressor_v2_compressor_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_compressor_v2_compressor_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_compressor_v2_compressor_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_http_compressor_v2_compressor_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_compressor_v2_compressor_proto = out.File
	file_envoy_config_filter_http_compressor_v2_compressor_proto_goTypes = nil
	file_envoy_config_filter_http_compressor_v2_compressor_proto_depIdxs = nil
}
