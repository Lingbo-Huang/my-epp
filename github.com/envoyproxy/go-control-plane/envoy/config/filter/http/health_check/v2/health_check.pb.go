// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/http/health_check/v2/health_check.proto

package health_checkv2

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_type "github.com/envoyproxy/go-control-plane/envoy/type"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#next-free-field: 6]
type HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies whether the filter operates in pass through mode or not.
	PassThroughMode *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=pass_through_mode,json=passThroughMode,proto3" json:"pass_through_mode,omitempty"`
	// If operating in pass through mode, the amount of time in milliseconds
	// that the filter should cache the upstream response.
	CacheTime *durationpb.Duration `protobuf:"bytes,3,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	// If operating in non-pass-through mode, specifies a set of upstream cluster
	// names and the minimum percentage of servers in each of those clusters that
	// must be healthy or degraded in order for the filter to return a 200.
	//
	// .. note::
	//
	//	This value is interpreted as an integer by truncating, so 12.50% will be calculated
	//	as if it were 12%.
	ClusterMinHealthyPercentages map[string]*_type.Percent `protobuf:"bytes,4,rep,name=cluster_min_healthy_percentages,json=clusterMinHealthyPercentages,proto3" json:"cluster_min_healthy_percentages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies a set of health check request headers to match on. The health check filter will
	// check a request’s headers against all the specified headers. To specify the health check
	// endpoint, set the “:path“ header to match on.
	Headers       []*route.HeaderMatcher `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_envoy_config_filter_http_health_check_v2_health_check_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_health_check_v2_health_check_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheck) GetPassThroughMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.PassThroughMode
	}
	return nil
}

func (x *HealthCheck) GetCacheTime() *durationpb.Duration {
	if x != nil {
		return x.CacheTime
	}
	return nil
}

func (x *HealthCheck) GetClusterMinHealthyPercentages() map[string]*_type.Percent {
	if x != nil {
		return x.ClusterMinHealthyPercentages
	}
	return nil
}

func (x *HealthCheck) GetHeaders() []*route.HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_envoy_config_filter_http_health_check_v2_health_check_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDesc = "" +
	"\n" +
	";envoy/config/filter/http/health_check/v2/health_check.proto\x12(envoy.config.filter.http.health_check.v2\x1a)envoy/api/v2/route/route_components.proto\x1a\x18envoy/type/percent.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xe3\x03\n" +
	"\vHealthCheck\x12P\n" +
	"\x11pass_through_mode\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x0fpassThroughMode\x128\n" +
	"\n" +
	"cache_time\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\tcacheTime\x12\x9e\x01\n" +
	"\x1fcluster_min_healthy_percentages\x18\x04 \x03(\v2W.envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntryR\x1cclusterMinHealthyPercentages\x12;\n" +
	"\aheaders\x18\x05 \x03(\v2!.envoy.api.v2.route.HeaderMatcherR\aheaders\x1ad\n" +
	"!ClusterMinHealthyPercentagesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.envoy.type.PercentR\x05value:\x028\x01J\x04\b\x02\x10\x03B\xe9\x01\xf2\x98\xfe\x8f\x05/\x12-envoy.extensions.filters.http.health_check.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"6io.envoyproxy.envoy.config.filter.http.health_check.v2B\x10HealthCheckProtoP\x01Z^github.com/envoyproxy/go-control-plane/envoy/config/filter/http/health_check/v2;health_checkv2b\x06proto3"

var (
	file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescData []byte
)

func file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDesc), len(file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDescData
}

var file_envoy_config_filter_http_health_check_v2_health_check_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_filter_http_health_check_v2_health_check_proto_goTypes = []any{
	(*HealthCheck)(nil),          // 0: envoy.config.filter.http.health_check.v2.HealthCheck
	nil,                          // 1: envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry
	(*wrapperspb.BoolValue)(nil), // 2: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),  // 3: google.protobuf.Duration
	(*route.HeaderMatcher)(nil),  // 4: envoy.api.v2.route.HeaderMatcher
	(*_type.Percent)(nil),        // 5: envoy.type.Percent
}
var file_envoy_config_filter_http_health_check_v2_health_check_proto_depIdxs = []int32{
	2, // 0: envoy.config.filter.http.health_check.v2.HealthCheck.pass_through_mode:type_name -> google.protobuf.BoolValue
	3, // 1: envoy.config.filter.http.health_check.v2.HealthCheck.cache_time:type_name -> google.protobuf.Duration
	1, // 2: envoy.config.filter.http.health_check.v2.HealthCheck.cluster_min_healthy_percentages:type_name -> envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry
	4, // 3: envoy.config.filter.http.health_check.v2.HealthCheck.headers:type_name -> envoy.api.v2.route.HeaderMatcher
	5, // 4: envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry.value:type_name -> envoy.type.Percent
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_health_check_v2_health_check_proto_init() }
func file_envoy_config_filter_http_health_check_v2_health_check_proto_init() {
	if File_envoy_config_filter_http_health_check_v2_health_check_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDesc), len(file_envoy_config_filter_http_health_check_v2_health_check_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_health_check_v2_health_check_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_health_check_v2_health_check_proto_depIdxs,
		MessageInfos:      file_envoy_config_filter_http_health_check_v2_health_check_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_health_check_v2_health_check_proto = out.File
	file_envoy_config_filter_http_health_check_v2_health_check_proto_goTypes = nil
	file_envoy_config_filter_http_health_check_v2_health_check_proto_depIdxs = nil
}
