// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto

package header_to_metadatav2

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config_ValueType int32

const (
	Config_STRING Config_ValueType = 0
	Config_NUMBER Config_ValueType = 1
	// The value is a serialized `protobuf.Value
	// <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
	Config_PROTOBUF_VALUE Config_ValueType = 2
)

// Enum value maps for Config_ValueType.
var (
	Config_ValueType_name = map[int32]string{
		0: "STRING",
		1: "NUMBER",
		2: "PROTOBUF_VALUE",
	}
	Config_ValueType_value = map[string]int32{
		"STRING":         0,
		"NUMBER":         1,
		"PROTOBUF_VALUE": 2,
	}
)

func (x Config_ValueType) Enum() *Config_ValueType {
	p := new(Config_ValueType)
	*p = x
	return p
}

func (x Config_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes[0].Descriptor()
}

func (Config_ValueType) Type() protoreflect.EnumType {
	return &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes[0]
}

func (x Config_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_ValueType.Descriptor instead.
func (Config_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP(), []int{0, 0}
}

// ValueEncode defines the encoding algorithm.
type Config_ValueEncode int32

const (
	// The value is not encoded.
	Config_NONE Config_ValueEncode = 0
	// The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
	// Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
	// non-ASCII characters in the header.
	Config_BASE64 Config_ValueEncode = 1
)

// Enum value maps for Config_ValueEncode.
var (
	Config_ValueEncode_name = map[int32]string{
		0: "NONE",
		1: "BASE64",
	}
	Config_ValueEncode_value = map[string]int32{
		"NONE":   0,
		"BASE64": 1,
	}
)

func (x Config_ValueEncode) Enum() *Config_ValueEncode {
	p := new(Config_ValueEncode)
	*p = x
	return p
}

func (x Config_ValueEncode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_ValueEncode) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes[1].Descriptor()
}

func (Config_ValueEncode) Type() protoreflect.EnumType {
	return &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes[1]
}

func (x Config_ValueEncode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_ValueEncode.Descriptor instead.
func (Config_ValueEncode) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP(), []int{0, 1}
}

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of rules to apply to requests.
	RequestRules []*Config_Rule `protobuf:"bytes,1,rep,name=request_rules,json=requestRules,proto3" json:"request_rules,omitempty"`
	// The list of rules to apply to responses.
	ResponseRules []*Config_Rule `protobuf:"bytes,2,rep,name=response_rules,json=responseRules,proto3" json:"response_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetRequestRules() []*Config_Rule {
	if x != nil {
		return x.RequestRules
	}
	return nil
}

func (x *Config) GetResponseRules() []*Config_Rule {
	if x != nil {
		return x.ResponseRules
	}
	return nil
}

// [#next-free-field: 6]
type Config_KeyValuePair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace — if this is empty, the filter's namespace will be used.
	MetadataNamespace string `protobuf:"bytes,1,opt,name=metadata_namespace,json=metadataNamespace,proto3" json:"metadata_namespace,omitempty"`
	// The key to use within the namespace.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The value to pair with the given key.
	//
	// When used for a `on_header_present` case, if value is non-empty it'll be used
	// instead of the header value. If both are empty, no metadata is added.
	//
	// When used for a `on_header_missing` case, a non-empty value must be provided
	// otherwise no metadata is added.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// The value's type — defaults to string.
	Type Config_ValueType `protobuf:"varint,4,opt,name=type,proto3,enum=envoy.config.filter.http.header_to_metadata.v2.Config_ValueType" json:"type,omitempty"`
	// How is the value encoded, default is NONE (not encoded).
	// The value will be decoded accordingly before storing to metadata.
	Encode        Config_ValueEncode `protobuf:"varint,5,opt,name=encode,proto3,enum=envoy.config.filter.http.header_to_metadata.v2.Config_ValueEncode" json:"encode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_KeyValuePair) Reset() {
	*x = Config_KeyValuePair{}
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_KeyValuePair) ProtoMessage() {}

func (x *Config_KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_KeyValuePair.ProtoReflect.Descriptor instead.
func (*Config_KeyValuePair) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Config_KeyValuePair) GetMetadataNamespace() string {
	if x != nil {
		return x.MetadataNamespace
	}
	return ""
}

func (x *Config_KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config_KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Config_KeyValuePair) GetType() Config_ValueType {
	if x != nil {
		return x.Type
	}
	return Config_STRING
}

func (x *Config_KeyValuePair) GetEncode() Config_ValueEncode {
	if x != nil {
		return x.Encode
	}
	return Config_NONE
}

// A Rule defines what metadata to apply when a header is present or missing.
type Config_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The header that triggers this rule — required.
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// If the header is present, apply this metadata KeyValuePair.
	//
	// If the value in the KeyValuePair is non-empty, it'll be used instead
	// of the header value.
	OnHeaderPresent *Config_KeyValuePair `protobuf:"bytes,2,opt,name=on_header_present,json=onHeaderPresent,proto3" json:"on_header_present,omitempty"`
	// If the header is not present, apply this metadata KeyValuePair.
	//
	// The value in the KeyValuePair must be set, since it'll be used in lieu
	// of the missing header value.
	OnHeaderMissing *Config_KeyValuePair `protobuf:"bytes,3,opt,name=on_header_missing,json=onHeaderMissing,proto3" json:"on_header_missing,omitempty"`
	// Whether or not to remove the header after a rule is applied.
	//
	// This prevents headers from leaking.
	Remove        bool `protobuf:"varint,4,opt,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Rule) Reset() {
	*x = Config_Rule{}
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Rule) ProtoMessage() {}

func (x *Config_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Rule.ProtoReflect.Descriptor instead.
func (*Config_Rule) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Config_Rule) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *Config_Rule) GetOnHeaderPresent() *Config_KeyValuePair {
	if x != nil {
		return x.OnHeaderPresent
	}
	return nil
}

func (x *Config_Rule) GetOnHeaderMissing() *Config_KeyValuePair {
	if x != nil {
		return x.OnHeaderMissing
	}
	return nil
}

func (x *Config_Rule) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

var File_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDesc = "" +
	"\n" +
	"Genvoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto\x12.envoy.config.filter.http.header_to_metadata.v2\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xf9\x06\n" +
	"\x06Config\x12`\n" +
	"\rrequest_rules\x18\x01 \x03(\v2;.envoy.config.filter.http.header_to_metadata.v2.Config.RuleR\frequestRules\x12b\n" +
	"\x0eresponse_rules\x18\x02 \x03(\v2;.envoy.config.filter.http.header_to_metadata.v2.Config.RuleR\rresponseRules\x1a\xa0\x02\n" +
	"\fKeyValuePair\x12-\n" +
	"\x12metadata_namespace\x18\x01 \x01(\tR\x11metadataNamespace\x12\x19\n" +
	"\x03key\x18\x02 \x01(\tB\a\xfaB\x04r\x02 \x01R\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12T\n" +
	"\x04type\x18\x04 \x01(\x0e2@.envoy.config.filter.http.header_to_metadata.v2.Config.ValueTypeR\x04type\x12Z\n" +
	"\x06encode\x18\x05 \x01(\x0e2B.envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncodeR\x06encode\x1a\xa7\x02\n" +
	"\x04Rule\x12%\n" +
	"\x06header\x18\x01 \x01(\tB\r\xfaB\n" +
	"r\b \x01\xc8\x01\x00\xc0\x01\x01R\x06header\x12o\n" +
	"\x11on_header_present\x18\x02 \x01(\v2C.envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePairR\x0fonHeaderPresent\x12o\n" +
	"\x11on_header_missing\x18\x03 \x01(\v2C.envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePairR\x0fonHeaderMissing\x12\x16\n" +
	"\x06remove\x18\x04 \x01(\bR\x06remove\"7\n" +
	"\tValueType\x12\n" +
	"\n" +
	"\x06STRING\x10\x00\x12\n" +
	"\n" +
	"\x06NUMBER\x10\x01\x12\x12\n" +
	"\x0ePROTOBUF_VALUE\x10\x02\"#\n" +
	"\vValueEncode\x12\b\n" +
	"\x04NONE\x10\x00\x12\n" +
	"\n" +
	"\x06BASE64\x10\x01B\x86\x02\xf2\x98\xfe\x8f\x055\x123envoy.extensions.filters.http.header_to_metadata.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"<io.envoyproxy.envoy.config.filter.http.header_to_metadata.v2B\x15HeaderToMetadataProtoP\x01Zjgithub.com/envoyproxy/go-control-plane/envoy/config/filter/http/header_to_metadata/v2;header_to_metadatav2b\x06proto3"

var (
	file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescData []byte
)

func file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDesc), len(file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDescData
}

var file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_goTypes = []any{
	(Config_ValueType)(0),       // 0: envoy.config.filter.http.header_to_metadata.v2.Config.ValueType
	(Config_ValueEncode)(0),     // 1: envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode
	(*Config)(nil),              // 2: envoy.config.filter.http.header_to_metadata.v2.Config
	(*Config_KeyValuePair)(nil), // 3: envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair
	(*Config_Rule)(nil),         // 4: envoy.config.filter.http.header_to_metadata.v2.Config.Rule
}
var file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_depIdxs = []int32{
	4, // 0: envoy.config.filter.http.header_to_metadata.v2.Config.request_rules:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.Rule
	4, // 1: envoy.config.filter.http.header_to_metadata.v2.Config.response_rules:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.Rule
	0, // 2: envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair.type:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.ValueType
	1, // 3: envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair.encode:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.ValueEncode
	3, // 4: envoy.config.filter.http.header_to_metadata.v2.Config.Rule.on_header_present:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair
	3, // 5: envoy.config.filter.http.header_to_metadata.v2.Config.Rule.on_header_missing:type_name -> envoy.config.filter.http.header_to_metadata.v2.Config.KeyValuePair
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_init() }
func file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_init() {
	if File_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDesc), len(file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_depIdxs,
		EnumInfos:         file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_enumTypes,
		MessageInfos:      file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto = out.File
	file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_goTypes = nil
	file_envoy_config_filter_http_header_to_metadata_v2_header_to_metadata_proto_depIdxs = nil
}
