// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto

package ip_taggingv2

import (
	_ "github.com/Lingbo-Huang/my-epp/envoy/api/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of requests the filter should apply to. The supported types
// are internal, external or both. The
// :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
// used to determine if a request is internal and will result in
// :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
// being set. The filter defaults to both, and it will apply to all request types.
type IPTagging_RequestType int32

const (
	// Both external and internal requests will be tagged. This is the default value.
	IPTagging_BOTH IPTagging_RequestType = 0
	// Only internal requests will be tagged.
	IPTagging_INTERNAL IPTagging_RequestType = 1
	// Only external requests will be tagged.
	IPTagging_EXTERNAL IPTagging_RequestType = 2
)

// Enum value maps for IPTagging_RequestType.
var (
	IPTagging_RequestType_name = map[int32]string{
		0: "BOTH",
		1: "INTERNAL",
		2: "EXTERNAL",
	}
	IPTagging_RequestType_value = map[string]int32{
		"BOTH":     0,
		"INTERNAL": 1,
		"EXTERNAL": 2,
	}
)

func (x IPTagging_RequestType) Enum() *IPTagging_RequestType {
	p := new(IPTagging_RequestType)
	*p = x
	return p
}

func (x IPTagging_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPTagging_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_enumTypes[0].Descriptor()
}

func (IPTagging_RequestType) Type() protoreflect.EnumType {
	return &file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_enumTypes[0]
}

func (x IPTagging_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPTagging_RequestType.Descriptor instead.
func (IPTagging_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescGZIP(), []int{0, 0}
}

type IPTagging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of request the filter should apply to.
	RequestType IPTagging_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=envoy.config.filter.http.ip_tagging.v2.IPTagging_RequestType" json:"request_type,omitempty"`
	// [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
	// Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
	// The set of IP tags for the filter.
	IpTags        []*IPTagging_IPTag `protobuf:"bytes,4,rep,name=ip_tags,json=ipTags,proto3" json:"ip_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPTagging) Reset() {
	*x = IPTagging{}
	mi := &file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPTagging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPTagging) ProtoMessage() {}

func (x *IPTagging) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPTagging.ProtoReflect.Descriptor instead.
func (*IPTagging) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescGZIP(), []int{0}
}

func (x *IPTagging) GetRequestType() IPTagging_RequestType {
	if x != nil {
		return x.RequestType
	}
	return IPTagging_BOTH
}

func (x *IPTagging) GetIpTags() []*IPTagging_IPTag {
	if x != nil {
		return x.IpTags
	}
	return nil
}

// Supplies the IP tag name and the IP address subnets.
type IPTagging_IPTag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the IP tag name to apply.
	IpTagName string `protobuf:"bytes,1,opt,name=ip_tag_name,json=ipTagName,proto3" json:"ip_tag_name,omitempty"`
	// A list of IP address subnets that will be tagged with
	// ip_tag_name. Both IPv4 and IPv6 are supported.
	IpList        []*core.CidrRange `protobuf:"bytes,2,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPTagging_IPTag) Reset() {
	*x = IPTagging_IPTag{}
	mi := &file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPTagging_IPTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPTagging_IPTag) ProtoMessage() {}

func (x *IPTagging_IPTag) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPTagging_IPTag.ProtoReflect.Descriptor instead.
func (*IPTagging_IPTag) Descriptor() ([]byte, []int) {
	return file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IPTagging_IPTag) GetIpTagName() string {
	if x != nil {
		return x.IpTagName
	}
	return ""
}

func (x *IPTagging_IPTag) GetIpList() []*core.CidrRange {
	if x != nil {
		return x.IpList
	}
	return nil
}

var File_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto protoreflect.FileDescriptor

const file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDesc = "" +
	"\n" +
	"7envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto\x12&envoy.config.filter.http.ip_tagging.v2\x1a\x1fenvoy/api/v2/core/address.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\xe8\x02\n" +
	"\tIPTagging\x12j\n" +
	"\frequest_type\x18\x01 \x01(\x0e2=.envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestTypeB\b\xfaB\x05\x82\x01\x02\x10\x01R\vrequestType\x12Z\n" +
	"\aip_tags\x18\x04 \x03(\v27.envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTagB\b\xfaB\x05\x92\x01\x02\b\x01R\x06ipTags\x1a^\n" +
	"\x05IPTag\x12\x1e\n" +
	"\vip_tag_name\x18\x01 \x01(\tR\tipTagName\x125\n" +
	"\aip_list\x18\x02 \x03(\v2\x1c.envoy.api.v2.core.CidrRangeR\x06ipList\"3\n" +
	"\vRequestType\x12\b\n" +
	"\x04BOTH\x10\x00\x12\f\n" +
	"\bINTERNAL\x10\x01\x12\f\n" +
	"\bEXTERNAL\x10\x02B\xdf\x01\xf2\x98\xfe\x8f\x05-\x12+envoy.extensions.filters.http.ip_tagging.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\n" +
	"4io.envoyproxy.envoy.config.filter.http.ip_tagging.v2B\x0eIpTaggingProtoP\x01ZZgithub.com/envoyproxy/go-control-plane/envoy/config/filter/http/ip_tagging/v2;ip_taggingv2b\x06proto3"

var (
	file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescOnce sync.Once
	file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescData []byte
)

func file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescGZIP() []byte {
	file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescOnce.Do(func() {
		file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDesc), len(file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDesc)))
	})
	return file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDescData
}

var file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_goTypes = []any{
	(IPTagging_RequestType)(0), // 0: envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType
	(*IPTagging)(nil),          // 1: envoy.config.filter.http.ip_tagging.v2.IPTagging
	(*IPTagging_IPTag)(nil),    // 2: envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag
	(*core.CidrRange)(nil),     // 3: envoy.api.v2.core.CidrRange
}
var file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_depIdxs = []int32{
	0, // 0: envoy.config.filter.http.ip_tagging.v2.IPTagging.request_type:type_name -> envoy.config.filter.http.ip_tagging.v2.IPTagging.RequestType
	2, // 1: envoy.config.filter.http.ip_tagging.v2.IPTagging.ip_tags:type_name -> envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag
	3, // 2: envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag.ip_list:type_name -> envoy.api.v2.core.CidrRange
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_init() }
func file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_init() {
	if File_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDesc), len(file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_goTypes,
		DependencyIndexes: file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_depIdxs,
		EnumInfos:         file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_enumTypes,
		MessageInfos:      file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_msgTypes,
	}.Build()
	File_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto = out.File
	file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_goTypes = nil
	file_envoy_config_filter_http_ip_tagging_v2_ip_tagging_proto_depIdxs = nil
}
