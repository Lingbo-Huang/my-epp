// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/external_processor.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalProcessor_Process_FullMethodName = "/envoy.service.ext_proc.v3.ExternalProcessor/Process"
)

// ExternalProcessorClient is the client API for ExternalProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service that can access and modify HTTP requests and responses
// as part of a filter chain.
// The overall external processing protocol works like this:
//
//  1. Envoy sends to the service information about the HTTP request.
//  2. The service sends back a ProcessingResponse message that directs Envoy
//     to either stop processing, continue without it, or send it the
//     next chunk of the message body.
//  3. If so requested, Envoy sends the server the message body in chunks,
//     or the entire body at once. In either case, the server may send back
//     a ProcessingResponse for each message it receives, or wait for certain amount
//     of body chunks received before streams back the ProcessingResponse messages.
//  4. If so requested, Envoy sends the server the HTTP trailers,
//     and the server sends back a ProcessingResponse.
//  5. At this point, request processing is done, and we pick up again
//     at step 1 when Envoy receives a response from the upstream server.
//  6. At any point above, if the server closes the gRPC stream cleanly,
//     then Envoy proceeds without consulting the server.
//  7. At any point above, if the server closes the gRPC stream with an error,
//     then Envoy returns a 500 error to the client, unless the filter
//     was configured to ignore errors.
//
// In other words, the process is a request/response conversation, but
// using a gRPC stream to make it easier for the server to
// maintain state.
type ExternalProcessorClient interface {
	// This begins the bidirectional stream that Envoy will use to
	// give the server control over what the filter does. The actual
	// protocol is described by the ProcessingRequest and ProcessingResponse
	// messages below.
	Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse], error)
}

type externalProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalProcessorClient(cc grpc.ClientConnInterface) ExternalProcessorClient {
	return &externalProcessorClient{cc}
}

func (c *externalProcessorClient) Process(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExternalProcessor_ServiceDesc.Streams[0], ExternalProcessor_Process_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProcessingRequest, ProcessingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExternalProcessor_ProcessClient = grpc.BidiStreamingClient[ProcessingRequest, ProcessingResponse]

// ExternalProcessorServer is the server API for ExternalProcessor service.
// All implementations must embed UnimplementedExternalProcessorServer
// for forward compatibility.
//
// A service that can access and modify HTTP requests and responses
// as part of a filter chain.
// The overall external processing protocol works like this:
//
//  1. Envoy sends to the service information about the HTTP request.
//  2. The service sends back a ProcessingResponse message that directs Envoy
//     to either stop processing, continue without it, or send it the
//     next chunk of the message body.
//  3. If so requested, Envoy sends the server the message body in chunks,
//     or the entire body at once. In either case, the server may send back
//     a ProcessingResponse for each message it receives, or wait for certain amount
//     of body chunks received before streams back the ProcessingResponse messages.
//  4. If so requested, Envoy sends the server the HTTP trailers,
//     and the server sends back a ProcessingResponse.
//  5. At this point, request processing is done, and we pick up again
//     at step 1 when Envoy receives a response from the upstream server.
//  6. At any point above, if the server closes the gRPC stream cleanly,
//     then Envoy proceeds without consulting the server.
//  7. At any point above, if the server closes the gRPC stream with an error,
//     then Envoy returns a 500 error to the client, unless the filter
//     was configured to ignore errors.
//
// In other words, the process is a request/response conversation, but
// using a gRPC stream to make it easier for the server to
// maintain state.
type ExternalProcessorServer interface {
	// This begins the bidirectional stream that Envoy will use to
	// give the server control over what the filter does. The actual
	// protocol is described by the ProcessingRequest and ProcessingResponse
	// messages below.
	Process(grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]) error
	mustEmbedUnimplementedExternalProcessorServer()
}

// UnimplementedExternalProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalProcessorServer struct{}

func (UnimplementedExternalProcessorServer) Process(grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedExternalProcessorServer) mustEmbedUnimplementedExternalProcessorServer() {}
func (UnimplementedExternalProcessorServer) testEmbeddedByValue()                           {}

// UnsafeExternalProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalProcessorServer will
// result in compilation errors.
type UnsafeExternalProcessorServer interface {
	mustEmbedUnimplementedExternalProcessorServer()
}

func RegisterExternalProcessorServer(s grpc.ServiceRegistrar, srv ExternalProcessorServer) {
	// If the following call pancis, it indicates UnimplementedExternalProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalProcessor_ServiceDesc, srv)
}

func _ExternalProcessor_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExternalProcessorServer).Process(&grpc.GenericServerStream[ProcessingRequest, ProcessingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExternalProcessor_ProcessServer = grpc.BidiStreamingServer[ProcessingRequest, ProcessingResponse]

// ExternalProcessor_ServiceDesc is the grpc.ServiceDesc for ExternalProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.ext_proc.v3.ExternalProcessor",
	HandlerType: (*ExternalProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _ExternalProcessor_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/external_processor.proto",
}
